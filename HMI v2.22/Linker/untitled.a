;
;/*
; * commands.c
; *
; *  Created on: Jan 10, 2020
; *      Author: Mr.Yash
; */
;
;//#include <Serial.h>
;
;#include <alcd.h>
;#include <stdio.h>
;#include "string.h"
;//#include "ver1.c"
;flash char *msg;
;flash char *xmitMsg;
;flash char *rec;
;flash char *rdata;
;
;int functn = 0;
;
;    //commands will be given a 3 digit numeric code based on the button pressed;
;    //Stored values for the particular option-
;
;    //    000-  noOp
;    //    001-  mainOn
;    //    002-  mainOff
;    //    003-  resetFault
;    //    004-  readVolt
;    //    005-  readAmp
;    //    006-
;    //    007-
;    //    008-
;    //    009-
;    //    010-
;    //    011-
;    //    012-
;    //    013-
;    //    014-
;    //    015-
;    //    016-
;    //    017-
;    //    018-
;    //    019-
;    //    020-
;    //    021-
;    //    022-
;    //    023-
;    //    024-
;    //    025-
;    //    026-
;    //    027-
;    //    028-
;    //    029-
;    //    030-
;    //    031-
;    //    032-
;    //    033-
;    //    034-
;    //    035-
;    //    036-
;    //    037-
;    //    038-
;    //    039-
;
;void xmitString(flash char * xmitMsg)
; 0001 0043 {

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0001 0044     int i =0;
; 0001 0045     for(i = 0;*(xmitMsg+i)!= '\0';i++)
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;	*xmitMsg -> Y+2
;	i -> R16,R17
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 0046     {
; 0001 0047          putchar1(xmitMsg[i]);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 0048 
; 0001 0049     }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 004A 
; 0001 004B 
; 0001 004C 
; 0001 004D }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;
;void noOp()
; 0001 0050 {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0051 
; 0001 0052 }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;void mainOn()
; 0001 0055 {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0056 
; 0001 0057     lcd_putsf("The System is turning on");                            //function to display message on the lcd
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0058     xmitMsg ="<001>";
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0059     xmitString(xmitMsg);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 005A }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;void mainOff()
; 0001 005D {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 005E 
; 0001 005F     lcd_putsf("The System is turning off");
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 0060     xmitMsg = "<002>";
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 0061     xmitString(xmitMsg);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 0062 
; 0001 0063 }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;void resetFault()
; 0001 0066 {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0067     lcd_putsf("Resetting Faults");
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0068     xmitMsg = "<003>";
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0069     xmitString(xmitMsg);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 006A 
; 0001 006B }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;
;void readVolt()
; 0001 006E {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0001 006F     xmitMsg = "<004>";
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 0070     xmitString(xmitMsg);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 0071     //voltVal = recVolt();
; 0001 0072     //msg = sprintf("\nVoltage is: %d",voltVal);
; 0001 0073     //lcd_putsf(msg);
; 0001 0074 
; 0001 0075 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;void readAmp()
; 0001 0078 {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 0079     xmitMsg = "<005>";
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 007A     xmitString(xmitMsg);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 007B     //ampVal = recAmp();
; 0001 007C     //msg = sprintf("\nCurrent is: %d",ampVal);
; 0001 007D     //lcd_putsf(msg);
; 0001 007E }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;static void (*xmitFunc[100])() = {
;    noOp,mainOn,mainOff,resetFault,readVolt,readAmp
;    };

	.DSEG
;
;
;
;
;//On receiving response from the TMS, further actions are taken by recFunc array
;void rnoOp()
; 0001 0089 {

	.CSEG
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 008A 
; 0001 008B }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;
;
;void rmainOn()
; 0001 008F {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0090     flash char*msg ="The System has turned on";
; 0001 0091     lcd_putsf(msg);                            //function to display message on the lcd
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;	*msg -> R16,R17
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 0092 
; 0001 0093 }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;
;void rmainOff()
; 0001 0096 {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 0097     msg = "The System has turned off";
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 0098     lcd_putsf(msg);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 0099 
; 0001 009A }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;
;void rresetFault()
; 0001 009D {
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0001 009E     msg = "Faults have been reset";
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 009F     lcd_putsf(msg);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 00A0 
; 0001 00A1 }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;void rreadVolt()
; 0001 00A4 {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 00A5     int i;flash char *tempRdata;
; 0001 00A6     for(i=5;*(rec+i-1)!='\0';i++)
;PCODE: $00000081 VOL: 0
;	i -> R16,R17
;	*tempRdata -> R18,R19
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 00A7     {
; 0001 00A8         tempRdata= (rec+i);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 00A9         if(i==5)  rdata = tempRdata;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 00AA         tempRdata++;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 00AB     }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0001 00AC 
; 0001 00AD     msg = rdata;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0001 00AE     lcd_putsf(msg);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0001 00AF 
; 0001 00B0 }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;
;void rreadAmp()
; 0001 00B3 {
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 00B4     int i;flash char *tempRdata;
; 0001 00B5     for(i=5;*(rec+i-1)!='\0';i++)
;PCODE: $000000A8 VOL: 0
;	i -> R16,R17
;	*tempRdata -> R18,R19
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0001 00B6     {
; 0001 00B7         tempRdata= (rec+i);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 00B8         if(i==5)  rdata = tempRdata;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 00B9         tempRdata++;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 00BA     }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0001 00BB     msg = rdata;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0001 00BC     lcd_putsf(msg);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 00BD 
; 0001 00BE }
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;
;
;static void (*recFunc[100])() = {rnoOp,rmainOn,rmainOff,rresetFault,rreadVolt,rreadAmp
;    };

	.DSEG
;
;
;void recOp()
; 0001 00C6 {

	.CSEG
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0001 00C7     char recArray[100];
; 0001 00C8     char cmd[3]={'','',''};
; 0001 00C9     int icmd = 0;
; 0001 00CA     int i = 0;
; 0001 00CB     //char tempRec[100];
; 0001 00CC     do
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;	recArray -> Y+7
;	cmd -> Y+4
;	icmd -> R16,R17
;	i -> R18,R19
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 00CD     {
; 0001 00CE         recArray[i++] = getchar1();
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 00CF 
; 0001 00D0     }while(recArray[i]!='\0');
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0001 00D1 //    char *rec = "<001-anyData>";
; 0001 00D2     for(i=1;i<4;i++)
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0001 00D3     {
; 0001 00D4        cmd[i-1] = *(recArray+i);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0001 00D5     }
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 00D6 
; 0001 00D7     icmd = cmd[2]-'0'+((cmd[1]-'0')*10)+((cmd[0]-'0')*100);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0001 00D8     recFunc[icmd]();
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0001 00D9 }
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
