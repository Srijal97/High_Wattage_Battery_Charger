
AVRASM ver. 2.1.30  C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.22\List\ver2.asm Wed Feb 12 19:06:06 2020

C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.22\List\ver2.asm(1061): warning: Register r4 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.22\List\ver2.asm(1062): warning: Register r6 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.22\List\ver2.asm(1063): warning: Register r8 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.22\List\ver2.asm(1064): warning: Register r10 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.22\List\ver2.asm(1065): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Screen=R4
                 	.DEF _Current_Screen=R6
                 	.DEF _Pointer_horiz=R8
                 	.DEF _Pointer_vert=R10
                 	.DEF _Pt=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0157 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0308 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 037a 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 03c6 	JMP  _timer3_ovf_isr
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00004f 0000      	.DW  0x0000
                 
                 _0x3:
000050 3030
000051 3030
000052 3030
000053 3030      	.DB  0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30
                 _0xC5:
000054 0001
000055 0000
000056 0000
000057 0000      	.DB  0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
000058 303c
000059 3130
00005a 003e
00005b 303c      	.DB  0x3C,0x30,0x30,0x31,0x3E,0x0,0x3C,0x30
00005c 3230
00005d 003e
00005e 303c
00005f 3330      	.DB  0x30,0x32,0x3E,0x0,0x3C,0x30,0x30,0x33
000060 003e
000061 303c
000062 3031
000063 003e      	.DB  0x3E,0x0,0x3C,0x30,0x31,0x30,0x3E,0x0
000064 303c
000065 3131
000066 003e
000067 303c      	.DB  0x3C,0x30,0x31,0x31,0x3E,0x0,0x3C,0x30
000068 3431
000069 252d
00006a 3430
00006b 3e64      	.DB  0x31,0x34,0x2D,0x25,0x30,0x34,0x64,0x3E
00006c 3c00
00006d 3130
00006e 2d35
00006f 3025      	.DB  0x0,0x3C,0x30,0x31,0x35,0x2D,0x25,0x30
000070 6434
000071 003e
000072 0020
000073 005e      	.DB  0x34,0x64,0x3E,0x0,0x20,0x0,0x5E,0x0
000074 3025
000075 6433
000076 2500
000077 3230      	.DB  0x25,0x30,0x33,0x64,0x0,0x25,0x30,0x32
000078 0064
000079 6f56
00007a 746c
00007b 6761      	.DB  0x64,0x0,0x56,0x6F,0x6C,0x74,0x61,0x67
00007c 2065
00007d 6573
00007e 2074
00007f 6f74      	.DB  0x65,0x20,0x73,0x65,0x74,0x20,0x74,0x6F
000080 003a
000081 0056
000082 303c
000083 3431      	.DB  0x3A,0x0,0x56,0x0,0x3C,0x30,0x31,0x34
000084 002d
000085 6553
000086 2074
000087 6176      	.DB  0x2D,0x0,0x53,0x65,0x74,0x20,0x76,0x61
000088 756c
000089 2065
00008a 6873
00008b 756f      	.DB  0x6C,0x75,0x65,0x20,0x73,0x68,0x6F,0x75
00008c 646c
00008d 6200
00008e 2065
00008f 6562      	.DB  0x6C,0x64,0x0,0x62,0x65,0x20,0x62,0x65
000090 7774
000091 6565
000092 206e
000093 3131      	.DB  0x74,0x77,0x65,0x65,0x6E,0x20,0x31,0x31
000094 2d30
000095 3100
000096 3533
000097 7620      	.DB  0x30,0x2D,0x0,0x31,0x33,0x35,0x20,0x76
000098 6c6f
000099 7374
00009a 4300
00009b 7275      	.DB  0x6F,0x6C,0x74,0x73,0x0,0x43,0x75,0x72
00009c 6572
00009d 746e
00009e 7320
00009f 7465      	.DB  0x72,0x65,0x6E,0x74,0x20,0x73,0x65,0x74
0000a0 7420
0000a1 3a6f
0000a2 4100
0000a3 3c00      	.DB  0x20,0x74,0x6F,0x3A,0x0,0x41,0x0,0x3C
0000a4 3130
0000a5 2d35
0000a6 6200
0000a7 2065      	.DB  0x30,0x31,0x35,0x2D,0x0,0x62,0x65,0x20
0000a8 6562
0000a9 7774
0000aa 6565
0000ab 206e      	.DB  0x62,0x65,0x74,0x77,0x65,0x65,0x6E,0x20
0000ac 3031
0000ad 002d
0000ae 3032
0000af 6120      	.DB  0x31,0x30,0x2D,0x0,0x32,0x30,0x20,0x61
0000b0 706d
0000b1 0073
0000b2 2020
0000b3 4948      	.DB  0x6D,0x70,0x73,0x0,0x20,0x20,0x48,0x49
0000b4 4847
0000b5 5720
0000b6 5441
0000b7 4154      	.DB  0x47,0x48,0x20,0x57,0x41,0x54,0x54,0x41
0000b8 4547
0000b9 2020
0000ba 2000
0000bb 4142      	.DB  0x47,0x45,0x20,0x20,0x0,0x20,0x42,0x41
0000bc 5454
0000bd 5245
0000be 2059
0000bf 4843      	.DB  0x54,0x54,0x45,0x52,0x59,0x20,0x43,0x48
0000c0 5241
0000c1 4547
0000c2 0052
0000c3 303c      	.DB  0x41,0x52,0x47,0x45,0x52,0x0,0x3C,0x30
0000c4 3431
0000c5 302d
0000c6 3131
0000c7 0030      	.DB  0x31,0x34,0x2D,0x30,0x31,0x31,0x30,0x0
0000c8 303c
0000c9 3531
0000ca 302d
0000cb 3130      	.DB  0x3C,0x30,0x31,0x35,0x2D,0x30,0x30,0x31
0000cc 0030
0000cd 6553
0000ce 2074
0000cf 6150      	.DB  0x30,0x0,0x53,0x65,0x74,0x20,0x50,0x61
0000d0 6172
0000d1 656d
0000d2 6574
0000d3 7372      	.DB  0x72,0x61,0x6D,0x65,0x74,0x65,0x72,0x73
0000d4 5000
0000d5 5241
0000d6 4d41
0000d7 5445      	.DB  0x0,0x50,0x41,0x52,0x41,0x4D,0x45,0x54
0000d8 5245
0000d9 0053
0000da 6f56
0000db 746c      	.DB  0x45,0x52,0x53,0x0,0x56,0x6F,0x6C,0x74
0000dc 6761
0000dd 2065
0000de 5628
0000df 4c4f      	.DB  0x61,0x67,0x65,0x20,0x28,0x56,0x4F,0x4C
0000e0 5354
0000e1 0029
0000e2 7543
0000e3 7272      	.DB  0x54,0x53,0x29,0x0,0x43,0x75,0x72,0x72
0000e4 6e65
0000e5 2074
0000e6 4128
0000e7 504d      	.DB  0x65,0x6E,0x74,0x20,0x28,0x41,0x4D,0x50
0000e8 2953
0000e9 5300
0000ea 7465
0000eb 7620      	.DB  0x53,0x29,0x0,0x53,0x65,0x74,0x20,0x76
0000ec 6c6f
0000ed 6174
0000ee 6567
0000ef 003a      	.DB  0x6F,0x6C,0x74,0x61,0x67,0x65,0x3A,0x0
0000f0 6553
0000f1 2074
0000f2 7563
0000f3 7272      	.DB  0x53,0x65,0x74,0x20,0x63,0x75,0x72,0x72
0000f4 6e65
0000f5 3a74
0000f6 5300
0000f7 3a56      	.DB  0x65,0x6E,0x74,0x3A,0x0,0x53,0x56,0x3A
0000f8 5300
0000f9 4342
0000fa 003a
0000fb 5641      	.DB  0x0,0x53,0x42,0x43,0x3A,0x0,0x41,0x56
0000fc 003a
0000fd 4241
0000fe 3a43
0000ff 4100      	.DB  0x3A,0x0,0x41,0x42,0x43,0x3A,0x0,0x41
000100 5649
000101 003a
000102 4f41
000103 3a43      	.DB  0x49,0x56,0x3A,0x0,0x41,0x4F,0x43,0x3A
000104 4600
000105 7561
000106 746c
000107 4920      	.DB  0x0,0x46,0x61,0x75,0x6C,0x74,0x20,0x49
000108 3a44
000109 3000
00010a 3030
00010b 2500      	.DB  0x44,0x3A,0x0,0x30,0x30,0x30,0x0,0x25
00010c 3230
00010d 2e64
00010e 3025
00010f 6431      	.DB  0x30,0x32,0x64,0x2E,0x25,0x30,0x31,0x64
000110 4d00
000111 6361
000112 6968
000113 656e      	.DB  0x0,0x4D,0x61,0x63,0x68,0x69,0x6E,0x65
000114 3a20
000115 4f20
000116 204e
000117 4d00      	.DB  0x20,0x3A,0x20,0x4F,0x4E,0x20,0x0,0x4D
000118 6361
000119 6968
00011a 656e
00011b 3a20      	.DB  0x61,0x63,0x68,0x69,0x6E,0x65,0x20,0x3A
00011c 4f20
00011d 4646
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.22\List\ver2.asm(1174): warning: .cseg .db misalignment - padding zero byte
00011e 0000      	.DB  0x20,0x4F,0x46,0x46,0x0
                 _0x2020060:
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.22\List\ver2.asm(1176): warning: .cseg .db misalignment - padding zero byte
00011f 0001      	.DB  0x1
                 _0x2020000:
000120 4e2d
000121 4e41
000122 4900
000123 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.22\List\ver2.asm(1179): warning: .cseg .db misalignment - padding zero byte
000124 0000      	.DB  0x0
                 _0x2080003:
000125 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000126 0001      	.DW  0x01
000127 0002      	.DW  0x02
000128 009e      	.DW  __REG_BIT_VARS*2
                 
000129 0008      	.DW  0x08
00012a 0586      	.DW  _fltArray
00012b 00a0      	.DW  _0x3*2
                 
00012c 0001      	.DW  0x01
00012d 0500      	.DW  _0xA
00012e 00b5      	.DW  _0x0*2+5
                 
00012f 0001      	.DW  0x01
000130 0501      	.DW  _0xB
000131 00b5      	.DW  _0x0*2+5
                 
000132 0010      	.DW  0x10
000133 0502      	.DW  _0x73
000134 00f2      	.DW  _0x0*2+66
                 
000135 0010      	.DW  0x10
000136 0512      	.DW  _0x8C
000137 0135      	.DW  _0x0*2+133
                 
000138 0011      	.DW  0x11
000139 0522      	.DW  _0x94
00013a 0164      	.DW  _0x0*2+180
                 
00013b 0011      	.DW  0x11
00013c 0533      	.DW  _0x94+17
00013d 0175      	.DW  _0x0*2+197
                 
00013e 000a      	.DW  0x0A
00013f 0544      	.DW  _0xAA
000140 0209      	.DW  _0x0*2+345
                 
000141 0004      	.DW  0x04
000142 054e      	.DW  _0xAA+10
000143 0213      	.DW  _0x0*2+355
                 
000144 0004      	.DW  0x04
000145 0552      	.DW  _0xAA+14
000146 0213      	.DW  _0x0*2+355
                 
000147 0004      	.DW  0x04
000148 0556      	.DW  _0xAA+18
000149 0213      	.DW  _0x0*2+355
                 
00014a 0004      	.DW  0x04
00014b 055a      	.DW  _0xAA+22
00014c 0213      	.DW  _0x0*2+355
                 
00014d 0008      	.DW  0x08
00014e 0004      	.DW  0x04
00014f 00a8      	.DW  _0xC5*2
                 
000150 0001      	.DW  0x01
000151 0636      	.DW  __seed_G101
000152 023e      	.DW  _0x2020060*2
                 
000153 0002      	.DW  0x02
000154 063a      	.DW  __base_y_G104
000155 024a      	.DW  _0x2080003*2
                 
                 _0xFFFFFFFF:
000156 0000      	.DW  0
                 
                 __RESET:
000157 94f8      	CLI
000158 27ee      	CLR  R30
000159 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00015a e0f1      	LDI  R31,1
00015b bff5      	OUT  MCUCR,R31
00015c bfe5      	OUT  MCUCR,R30
00015d 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00015f e1f8      	LDI  R31,0x18
000160 bdf1      	OUT  WDTCR,R31
000161 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000162 e08d      	LDI  R24,(14-2)+1
000163 e0a2      	LDI  R26,2
000164 27bb      	CLR  R27
                 __CLEAR_REG:
000165 93ed      	ST   X+,R30
000166 958a      	DEC  R24
000167 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000168 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000169 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00016a e0a0      	LDI  R26,LOW(__SRAM_START)
00016b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00016c 93ed      	ST   X+,R30
00016d 9701      	SBIW R24,1
00016e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00016f e4ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000170 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000171 9185      	LPM  R24,Z+
000172 9195      	LPM  R25,Z+
000173 9700      	SBIW R24,0
000174 f061      	BREQ __GLOBAL_INI_END
000175 91a5      	LPM  R26,Z+
000176 91b5      	LPM  R27,Z+
000177 9005      	LPM  R0,Z+
000178 9015      	LPM  R1,Z+
000179 01bf      	MOVW R22,R30
00017a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00017b 9005      	LPM  R0,Z+
00017c 920d      	ST   X+,R0
00017d 9701      	SBIW R24,1
00017e f7e1      	BRNE __GLOBAL_INI_LOOP
00017f 01fb      	MOVW R30,R22
000180 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000181 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000182 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000183 bfed      	OUT  SPL,R30
000184 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000185 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000186 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000187 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000188 940c 0780 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ;PORTE.5 == KEYPAD 2
                 ;PORTE.7 == KEYPAD 1
                 ;PORTD.2 == KEYPAD 4
                 ;PORTB.3 == KEYPAD 3
                 ;*/
                 ;
                 ;
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <Math.h>
                 ;#include <String.h>
                 ;#include "commands.c"
                 ;/*
                 ; * commands.c
                 ; *
                 ; *  Created on: Jan 10, 2020
                 ; *      Author: Mr.Yash
                 ; */
                 ;
                 ;//#include <Serial.h>
                 ;#include <commands.h>
                 ;#include <alcd.h>
                 ;#include <ver1.h>
                 ;//#include <variables.h>
                 ;
                 ;int Screen = 1;
                 ;int Current_Screen = 0;
                 ;int Pointer_horiz = 0, Pointer_vert = 0, Pt;
                 ;
                 ;int temp_voltage = 0;
                 ;int temp_current = 0;
                 ;long set_voltage = 0;
                 ;long set_current = 0;
                 ;//float set_current = 00.0;                        //12/2/20
                 ;static int actual_voltage = 0;
                 ;static int actual_btcurrentdp = 0;
                 ;static int actual_btcurrentip = 0;
                 ;static int actual_ipvoltage = 0;
                 ;static int actual_opcurrentdp = 0;
                 ;static int actual_opcurrentip = 0;
                 ;
                 ;int set_flag=0;
                 ;int flag = 0;
                 ;
                 ;int n=0;                    //Input function parameter in screen functions
                 ;int main_screen_trigger;  //to return to main screen
                 ;int ms_update_flag = 0;
                 ;int current_mainscreen_flag = 0;
                 ;int status = 0;
                 ;int fault_flag = 0;
                 ;
                 ;
                 ;flash char* txVoltCom;
                 ;flash char* txAmpCom;
                 ;
                 ;char fltArray[9] = {'0','0','0','0','0','0','0','0','\0'};
                 
                 	.DSEG
                 ;char disp_volt[3];
                 ;char disp_current[3];
                 ;char disp_set_voltage[3];
                 ;char disp_set_btcurrent[4];
                 ;char disp_actual_voltage[3];
                 ;char disp_actual_btcurrent[4];
                 ;char disp_actual_ipvoltage[3];
                 ;char disp_actual_opcurrent[4];
                 ;char disp_fault[];
                 ;flash char *msg;
                 ;flash char *xmitMsg;
                 ;flash char *rec;
                 ;flash char *rdata;
                 ;//char sdataA[20];    // Send data for SCI-A
                 ;char rdataA[20]; // Received data for SCI-A
                 ;int comStart;
                 ;
                 ;int i = 0;
                 ;
                 ;    //commands will be given a 3 digit numeric code based on the button pressed;
                 ;    //Stored values for the particular option-
                 ;
                 ;    //    000-  noOp
                 ;    //    001-  mainOn
                 ;    //    002-  mainOff
                 ;    //    003-  resetFault
                 ;    //    004-  faultDetect
                 ;    //    005-  txSetVoltage
                 ;    //    006-  txSetCurrent
                 ;    //    007-
                 ;    //    008-
                 ;    //    009-
                 ;    //    010-  read output voltage
                 ;    //    011-  read battery current
                 ;    //    012-  read input voltage
                 ;    //    013-  read output current
                 ;    //    014-  set output voltage
                 ;    //    015-  set battery current
                 ;    //    016-
                 ;    //    017-
                 ;    //    018-
                 ;    //    019-
                 ;    //    020-
                 ;    //    021-
                 ;    //    022-
                 ;    //    023-
                 ;    //    024-
                 ;    //    025-
                 ;    //    026-
                 ;    //    027-
                 ;    //    028-
                 ;    //    029-
                 ;    //    030-
                 ;    //    031-
                 ;    //    032-
                 ;    //    033-
                 ;    //    034-
                 ;    //    035-
                 ;    //    036-
                 ;    //    037-
                 ;    //    038-
                 ;    //    039-
                 ;
                 ;void xmitString(flash char * xmitMsg)
                 ; 0000 0010 {
                 
                 	.CSEG
                 _xmitString:
                 ;    int i =0;
                 ;    for(i = 0;*(xmitMsg+i)!= '\0';i++)
00018a 931a      	ST   -Y,R17
00018b 930a      	ST   -Y,R16
                 ;	*xmitMsg -> Y+2
                 ;	i -> R16,R17
                +
00018c e000     +LDI R16 , LOW ( 0 )
00018d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00018e e000     +LDI R16 , LOW ( 0 )
00018f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x5:
000190 940e 0ce4 	CALL SUBOPT_0x0
000192 30e0      	CPI  R30,0
000193 f039      	BREQ _0x6
                 ;    {
                 ;         putchar(xmitMsg[i]);
000194 940e 0ce4 	CALL SUBOPT_0x0
000196 93ea      	ST   -Y,R30
000197 d206      	RCALL _putchar
                 ;
                 ;    }
                +
000198 5f0f     +SUBI R16 , LOW ( - 1 )
000199 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00019a cff5      	RJMP _0x5
                 _0x6:
                 ;
                 ;
                 ;
                 ;}
00019b 8119      	LDD  R17,Y+1
00019c 8108      	LDD  R16,Y+0
00019d 9624      	ADIW R28,4
00019e 9508      	RET
                 ;
                 ;void xmitStringnf(char * xmitMsgnf)
                 ;{
                 ;    int i =0;
                 ;    for(i = 0;*(xmitMsgnf+i)!= '\0';i++)
                 ;	*xmitMsgnf -> Y+2
                 ;	i -> R16,R17
                 ;    {
                 ;         putchar(xmitMsgnf[i]);
                 ;
                 ;    }
                 ;
                 ;
                 ;
                 ;}
                 ;
                 ;void noOp()
                 ;{
                 _noOp:
                 ;
                 ;}
00019f 9508      	RET
                 ;
                 ;void mainOn()
                 ;{
                 _mainOn:
                 ;
                 ;    xmitMsg ="<001>";
                +
0001a0 ebe0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001a1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001a2 c005      	RJMP _0x212000D
                 ;    xmitString(xmitMsg);
                 ;
                 ;}
                 ;
                 ;void mainOff()
                 ;{
                 _mainOff:
                 ;
                 ;    xmitMsg = "<002>";
                +
0001a3 ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
0001a4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
0001a5 c002      	RJMP _0x212000D
                 ;    xmitString(xmitMsg);
                 ;
                 ;}
                 ;
                 ;void resetFault()
                 ;{
                 _resetFault:
                 ;    xmitMsg = "<003>";
                +
0001a6 ebec     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0001a7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
                 _0x212000D:
0001a8 93e0 05aa 	STS  _xmitMsg,R30
0001aa 93f0 05ab 	STS  _xmitMsg+1,R31
                 ;    xmitString(xmitMsg);
0001ac 940e 0ceb 	CALL SUBOPT_0x1
                 ;}
0001ae 9508      	RET
                 ;
                 ;void readOutputVolt()
                 ;{
                 ;    xmitMsg = "<010>";
                 ;    xmitString(xmitMsg);
                 ;
                 ;}
                 ;
                 ;void readBatteryAmp()
                 ;{
                 ;    xmitMsg = "<011>";
                 ;    xmitString(xmitMsg);
                 ;
                 ;}
                 ;
                 ;void txSetVoltage(int setVoltVal)
                 ;{
                 ;    int cpyVolt = setVoltVal;
                 ;    char* msg1 = "";
                 ;    sprintf(msg1,"<014-%04d>",cpyVolt);
                 ;	setVoltVal -> Y+4
                 ;	cpyVolt -> R16,R17
                 ;	*msg1 -> R18,R19
                 ;    xmitStringnf(msg1);
                 ;}
                 
                 	.DSEG
                 _0xA:
000500           	.BYTE 0x1
                 ;
                 ;void txSetCurrent(int setAmpVal)
                 ;{
                 
                 	.CSEG
                 ;    int cpyAmp = setAmpVal;
                 ;    char*msg1 = "";
                 ;    sprintf(msg1,"<015-%04d>",cpyAmp);
                 ;	setAmpVal -> Y+4
                 ;	cpyAmp -> R16,R17
                 ;	*msg1 -> R18,R19
                 ;    xmitStringnf(msg1);
                 ;
                 ;}
                 
                 	.DSEG
                 _0xB:
000501           	.BYTE 0x1
                 ;/*static void (*tx_function[100])() = {
                 ;    noOp,  // 0
                 ;    mainOn,  // 1
                 ;    mainOff,  // 2
                 ;    resetFault,  // 3
                 ;    faultDetect, //4
                 ;    noOp,
                 ;    noOp,
                 ;    noOp,
                 ;    noOp,
                 ;    noOp,
                 ;    readOutputVolt,//10
                 ;    readBatteryAmp,//11
                 ;    //readInputVolt,//12
                 ;    //xreadOutputCurrent,//13
                 ;};*/
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;//On receiving response from the TMS, further actions are taken by recFunc array
                 ;
                 ;
                 ;
                 ;
                 ;void rxnoOp()
                 ;{
                 
                 	.CSEG
                 ;}
                 ;
                 ;
                 ;void rxmainOn()
                 ;{
                 _rxmainOn:
                 ;    current_mainscreen_flag = 1;
0001af 940e 0cef 	CALL SUBOPT_0x2
                 ;    PORTC.3 = 0;
0001b1 98ab      	CBI  0x15,3
                 ;    status = 1;
0001b2 e0e1      	LDI  R30,LOW(1)
0001b3 e0f0      	LDI  R31,HIGH(1)
0001b4 93e0 0582 	STS  _status,R30
0001b6 93f0 0583 	STS  _status+1,R31
                 ;}
0001b8 9508      	RET
                 ;
                 ;void rxmainOff()
                 ;{
                 _rxmainOff:
                 ;    current_mainscreen_flag = 1;
0001b9 940e 0cef 	CALL SUBOPT_0x2
                 ;    status = 0;
0001bb e0e0      	LDI  R30,LOW(0)
0001bc 93e0 0582 	STS  _status,R30
0001be 93e0 0583 	STS  _status+1,R30
                 ;    PORTC.3 = 1;
0001c0 9aab      	SBI  0x15,3
                 ;
                 ;}
0001c1 9508      	RET
                 ;
                 ;void rxresetFault()
                 ;{
                 _rxresetFault:
                 ;   fault_flag = 0;
0001c2 e0e0      	LDI  R30,LOW(0)
0001c3 93e0 0584 	STS  _fault_flag,R30
0001c5 93e0 0585 	STS  _fault_flag+1,R30
                 ;   current_mainscreen_flag = 1;
0001c7 940e 0cef 	CALL SUBOPT_0x2
                 ;   status = 0;
0001c9 e0e0      	LDI  R30,LOW(0)
0001ca 93e0 0582 	STS  _status,R30
0001cc 93e0 0583 	STS  _status+1,R30
                 ;}
0001ce 9508      	RET
                 ;
                 ;void rxfaultDetect(int val)
                 ;{
                 _rxfaultDetect:
                 ;    int i = 0,j,k=0;
                 ;    int fault = 0, cpyFault;
                 ;    int fltBit[8],tmpBit[8];
                 ;    fault = val;
0001cf 97a4      	SBIW R28,36
0001d0 e0e0      	LDI  R30,LOW(0)
0001d1 a3ea      	STD  Y+34,R30
0001d2 a3eb      	STD  Y+35,R30
0001d3 940e 1140 	CALL __SAVELOCR6
                 ;	val -> Y+42
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	k -> R20,R21
                 ;	fault -> Y+40
                 ;	cpyFault -> Y+38
                 ;	fltBit -> Y+22
                 ;	tmpBit -> Y+6
                +
0001d5 e000     +LDI R16 , LOW ( 0 )
0001d6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001d7 e040     +LDI R20 , LOW ( 0 )
0001d8 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0001d9 a5ea      	LDD  R30,Y+42
0001da a5fb      	LDD  R31,Y+42+1
0001db a7e8      	STD  Y+40,R30
0001dc a7f9      	STD  Y+40+1,R31
                 ;
                 ;    if(fault!=0)
0001dd 9730      	SBIW R30,0
0001de f059      	BREQ _0x10
                 ;    {
                 ;        PORTF &= ~0x40;
0001df 91e0 0062 	LDS  R30,98
0001e1 7bef      	ANDI R30,0xBF
0001e2 93e0 0062 	STS  98,R30
                 ;        fault_flag = 1;
0001e4 e0e1      	LDI  R30,LOW(1)
0001e5 e0f0      	LDI  R31,HIGH(1)
0001e6 93e0 0584 	STS  _fault_flag,R30
0001e8 93f0 0585 	STS  _fault_flag+1,R31
                 ;       // mainOff();
                 ;
                 ;    }
                 ;    for(i=0;i<8;i++)
                 _0x10:
                +
0001ea e000     +LDI R16 , LOW ( 0 )
0001eb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x12:
                +
0001ec 3008     +CPI R16 , LOW ( 8 )
0001ed e0e0     +LDI R30 , HIGH ( 8 )
0001ee 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
0001ef f4cc      	BRGE _0x13
                 ;    {
                 ;        fltArray[7-i] = fault%2 + 48;
0001f0 e0e7      	LDI  R30,LOW(7)
0001f1 e0f0      	LDI  R31,HIGH(7)
0001f2 1be0      	SUB  R30,R16
0001f3 0bf1      	SBC  R31,R17
0001f4 57ea      	SUBI R30,LOW(-_fltArray)
0001f5 4ffa      	SBCI R31,HIGH(-_fltArray)
0001f6 01bf      	MOVW R22,R30
0001f7 a5a8      	LDD  R26,Y+40
0001f8 a5b9      	LDD  R27,Y+40+1
0001f9 e0e2      	LDI  R30,LOW(2)
0001fa e0f0      	LDI  R31,HIGH(2)
0001fb 940e 10ec 	CALL __MODW21
0001fd 5de0      	SUBI R30,-LOW(48)
0001fe 01db      	MOVW R26,R22
0001ff 93ec      	ST   X,R30
                 ;        fault = fault >> 1;
000200 a5e8      	LDD  R30,Y+40
000201 a5f9      	LDD  R31,Y+40+1
000202 95f5      	ASR  R31
000203 95e7      	ROR  R30
000204 a7e8      	STD  Y+40,R30
000205 a7f9      	STD  Y+40+1,R31
                 ;
                 ;    }
                +
000206 5f0f     +SUBI R16 , LOW ( - 1 )
000207 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000208 cfe3      	RJMP _0x12
                 _0x13:
                 ;
                 ;//    numFlt = fltBit[0]+(fltBit[1]*10)+(fltBit[2]*100)
                 ;//    +(fltBit[3]*1000)+(fltBit[4]*10000)+(fltBit[5]*100000)+(fltBit[1]*1000000)+(fltBit[1]*10000000);
                 ;
                 ;//    if(fltBit[0] == 1)PORTC.3 = 0;
                 ;//    if(fltBit[1] == 1)PORTC.3 = 1;
                 ;//    if(fltBit[2] == 1)PORTF &= ~0x80;;
                 ;//    if(fltBit[3] == 1)PORTC.3 = 1  ;
                 ;//    if(fltBit[4] == 1)PORTC.3 = 1   ;
                 ;//    if(fltBit[5] == 1)PORTC.3 = 1    ;
                 ;//    if(fltBit[6] == 1)PORTC.3 = 1     ;
                 ;//    if(fltBit[7] == 1)PORTC.3 = 1      ;
                 ;//
                 ;
                 ;
                 ;
                 ;}
000209 940e 1147 	CALL __LOADLOCR6
00020b 96ac      	ADIW R28,44
00020c 9508      	RET
                 ;
                 ;void rxreadOutputVolt(int val)
                 ;{
                 _rxreadOutputVolt:
                 ;    actual_voltage = val;
                 ;	val -> Y+0
00020d 81e8      	LD   R30,Y
00020e 81f9      	LDD  R31,Y+1
00020f 93e0 056a 	STS  _actual_voltage_G000,R30
000211 93f0 056b 	STS  _actual_voltage_G000+1,R31
                 ;}
000213 c2b9      	RJMP _0x212000A
                 ;
                 ;
                 ;
                 ;void rxreadBatteryAmp(int val)
                 ;{
                 _rxreadBatteryAmp:
                 ;    int decimalPart;
                 ;    int integerPart;
                 ;    decimalPart = val%10;
000214 940e 0cf6 	CALL SUBOPT_0x3
                 ;	val -> Y+4
                 ;	decimalPart -> R16,R17
                 ;	integerPart -> R18,R19
                 ;    integerPart = val/10;
                 ;    actual_btcurrentdp = decimalPart;
                +
000216 9300 056c+STS _actual_btcurrentdp_G000 + ( 0 ) , R16
000218 9310 056d+STS _actual_btcurrentdp_G000 + ( 0 ) + 1 , R17
                 	__PUTWMRN _actual_btcurrentdp_G000,0,16,17
                 ;    actual_btcurrentip = integerPart;
                +
00021a 9320 056e+STS _actual_btcurrentip_G000 + ( 0 ) , R18
00021c 9330 056f+STS _actual_btcurrentip_G000 + ( 0 ) + 1 , R19
                 	__PUTWMRN _actual_btcurrentip_G000,0,18,19
                 ;}
00021e c011      	RJMP _0x212000C
                 ;
                 ;void rxreadInputVolt(int val)
                 ;{
                 _rxreadInputVolt:
                 ;    actual_ipvoltage = val;
                 ;	val -> Y+0
00021f 81e8      	LD   R30,Y
000220 81f9      	LDD  R31,Y+1
000221 93e0 0570 	STS  _actual_ipvoltage_G000,R30
000223 93f0 0571 	STS  _actual_ipvoltage_G000+1,R31
                 ;}
000225 c2a7      	RJMP _0x212000A
                 ;
                 ;void rxreadOutputCurrent(int val)
                 ;{
                 _rxreadOutputCurrent:
                 ;    int decimalPart;
                 ;    int integerPart;
                 ;    decimalPart = val%10;
000226 940e 0cf6 	CALL SUBOPT_0x3
                 ;	val -> Y+4
                 ;	decimalPart -> R16,R17
                 ;	integerPart -> R18,R19
                 ;    integerPart = val/10;
                 ;    actual_opcurrentdp = decimalPart;
                +
000228 9300 0572+STS _actual_opcurrentdp_G000 + ( 0 ) , R16
00022a 9310 0573+STS _actual_opcurrentdp_G000 + ( 0 ) + 1 , R17
                 	__PUTWMRN _actual_opcurrentdp_G000,0,16,17
                 ;    actual_opcurrentip = integerPart;
                +
00022c 9320 0574+STS _actual_opcurrentip_G000 + ( 0 ) , R18
00022e 9330 0575+STS _actual_opcurrentip_G000 + ( 0 ) + 1 , R19
                 	__PUTWMRN _actual_opcurrentip_G000,0,18,19
                 ;}
                 _0x212000C:
000230 940e 1149 	CALL __LOADLOCR4
000232 9626      	ADIW R28,6
000233 9508      	RET
                 ;
                 ;
                 ;/*static void (*rx_function[100])() = {
                 ;    rxnoOp,  // 0
                 ;    rxmainOn,  // 1
                 ;    rxmainOff,  // 2
                 ;    rxresetFault,  // 3
                 ;    rxfaultDetect, //4
                 ;    rxnoOp,
                 ;    rxnoOp,
                 ;    rxnoOp,
                 ;    rxnoOp,
                 ;    rxnoOp,
                 ;    rxreadOutputVolt,//10
                 ;    rxreadBatteryAmp,//11
                 ;    rxreadInputVolt,//12
                 ;    rexreadOutputCurrent,//13
                 ;};*/
                 ;
                 ;
                 ;
                 ;void comDecode(char * rec)
                 ;{
                 _comDecode:
                 ;
                 ;    char cmd[3] = {'0','0','0'};
                 ;    char data[4] = {'0','0','0','0'};
                 ;    int icmd = 0;
                 ;    int idata = 0;
                 ;    int i;
                 ;
                 ;    for(i = 1; i < 4; i++)
000234 9727      	SBIW R28,7
000235 e3e0      	LDI  R30,LOW(48)
000236 83e8      	ST   Y,R30
000237 83e9      	STD  Y+1,R30
000238 83ea      	STD  Y+2,R30
000239 83eb      	STD  Y+3,R30
00023a 83ec      	STD  Y+4,R30
00023b 83ed      	STD  Y+5,R30
00023c 83ee      	STD  Y+6,R30
00023d 940e 1140 	CALL __SAVELOCR6
                 ;	*rec -> Y+13
                 ;	cmd -> Y+10
                 ;	data -> Y+6
                 ;	icmd -> R16,R17
                 ;	idata -> R18,R19
                 ;	i -> R20,R21
                +
00023f e000     +LDI R16 , LOW ( 0 )
000240 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000241 e020     +LDI R18 , LOW ( 0 )
000242 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000243 e041     +LDI R20 , LOW ( 1 )
000244 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 _0x15:
                +
000245 3044     +CPI R20 , LOW ( 4 )
000246 e0e0     +LDI R30 , HIGH ( 4 )
000247 075e     +CPC R21 , R30
                 	__CPWRN 20,21,4
000248 f44c      	BRGE _0x16
                 ;    {
                 ;       cmd[i-1] = rec[i];
000249 01fa      	MOVW R30,R20
00024a 9731      	SBIW R30,1
00024b 01de      	MOVW R26,R28
00024c 961a      	ADIW R26,10
00024d 940e 0d07 	CALL SUBOPT_0x4
                 ;    }
                +
00024f 5f4f     +SUBI R20 , LOW ( - 1 )
000250 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000251 cff3      	RJMP _0x15
                 _0x16:
                 ;
                 ;    for(i = 5; i < 9; i++)
                +
000252 e045     +LDI R20 , LOW ( 5 )
000253 e050     +LDI R21 , HIGH ( 5 )
                 	__GETWRN 20,21,5
                 _0x18:
                +
000254 3049     +CPI R20 , LOW ( 9 )
000255 e0e0     +LDI R30 , HIGH ( 9 )
000256 075e     +CPC R21 , R30
                 	__CPWRN 20,21,9
000257 f44c      	BRGE _0x19
                 ;    {
                 ;       data[i-5] = rec[i];
000258 01fa      	MOVW R30,R20
000259 9735      	SBIW R30,5
00025a 01de      	MOVW R26,R28
00025b 9616      	ADIW R26,6
00025c 940e 0d07 	CALL SUBOPT_0x4
                 ;    }
                +
00025e 5f4f     +SUBI R20 , LOW ( - 1 )
00025f 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000260 cff3      	RJMP _0x18
                 _0x19:
                 ;
                 ;
                 ;    icmd = (cmd[2]-'0') + ((cmd[1] - '0')*10) + ((cmd[0]-'0')*100);
000261 85ec      	LDD  R30,Y+12
000262 940e 0d13 	CALL SUBOPT_0x5
000264 01bf      	MOVW R22,R30
000265 85eb      	LDD  R30,Y+11
000266 940e 0d13 	CALL SUBOPT_0x5
000268 940e 0d16 	CALL SUBOPT_0x6
00026a 85ea      	LDD  R30,Y+10
00026b 940e 0d13 	CALL SUBOPT_0x5
00026d e6a4      	LDI  R26,LOW(100)
00026e e0b0      	LDI  R27,HIGH(100)
00026f 940e 10cf 	CALL __MULW12
000271 0fe6      	ADD  R30,R22
000272 1ff7      	ADC  R31,R23
000273 018f      	MOVW R16,R30
                 ;    idata = (data[3]-'0') + ((data[2] - '0')*10) + ((data[1]-'0')*100) + ((data[0]-'0')*1000);
000274 85e9      	LDD  R30,Y+9
000275 940e 0d13 	CALL SUBOPT_0x5
000277 01bf      	MOVW R22,R30
000278 85e8      	LDD  R30,Y+8
000279 940e 0d13 	CALL SUBOPT_0x5
00027b 940e 0d16 	CALL SUBOPT_0x6
00027d 81ef      	LDD  R30,Y+7
00027e 940e 0d13 	CALL SUBOPT_0x5
000280 e6a4      	LDI  R26,LOW(100)
000281 e0b0      	LDI  R27,HIGH(100)
000282 940e 10cf 	CALL __MULW12
                +
000284 0f6e     +ADD R22 , R30
000285 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000286 81ee      	LDD  R30,Y+6
000287 940e 0d13 	CALL SUBOPT_0x5
000289 eea8      	LDI  R26,LOW(1000)
00028a e0b3      	LDI  R27,HIGH(1000)
00028b 940e 10cf 	CALL __MULW12
00028d 0fe6      	ADD  R30,R22
00028e 1ff7      	ADC  R31,R23
00028f 019f      	MOVW R18,R30
                 ;
                 ;   //rx_function[icmd]();
                 ;   switch(icmd)
000290 01f8      	MOVW R30,R16
                 ;   {
                 ;        case 0:  noOp();                    break;
000291 9730      	SBIW R30,0
000292 f411      	BRNE _0x1D
000293 df0b      	RCALL _noOp
000294 c06f      	RJMP _0x1C
                 ;        case 1:  rxmainOn();                break;
                 _0x1D:
000295 30e1      	CPI  R30,LOW(0x1)
000296 e0a0      	LDI  R26,HIGH(0x1)
000297 07fa      	CPC  R31,R26
000298 f411      	BRNE _0x1E
000299 df15      	RCALL _rxmainOn
00029a c069      	RJMP _0x1C
                 ;        case 2:  rxmainOff();               break;
                 _0x1E:
00029b 30e2      	CPI  R30,LOW(0x2)
00029c e0a0      	LDI  R26,HIGH(0x2)
00029d 07fa      	CPC  R31,R26
00029e f411      	BRNE _0x1F
00029f df19      	RCALL _rxmainOff
0002a0 c063      	RJMP _0x1C
                 ;        case 3:  rxresetFault();            break;
                 _0x1F:
0002a1 30e3      	CPI  R30,LOW(0x3)
0002a2 e0a0      	LDI  R26,HIGH(0x3)
0002a3 07fa      	CPC  R31,R26
0002a4 f411      	BRNE _0x20
0002a5 df1c      	RCALL _rxresetFault
0002a6 c05d      	RJMP _0x1C
                 ;        case 4:  rxfaultDetect(idata);      break;
                 _0x20:
0002a7 30e4      	CPI  R30,LOW(0x4)
0002a8 e0a0      	LDI  R26,HIGH(0x4)
0002a9 07fa      	CPC  R31,R26
0002aa f421      	BRNE _0x21
0002ab 933a      	ST   -Y,R19
0002ac 932a      	ST   -Y,R18
0002ad df21      	RCALL _rxfaultDetect
0002ae c055      	RJMP _0x1C
                 ;        case 5:  noOp();                    break;
                 _0x21:
0002af 30e5      	CPI  R30,LOW(0x5)
0002b0 e0a0      	LDI  R26,HIGH(0x5)
0002b1 07fa      	CPC  R31,R26
0002b2 f411      	BRNE _0x22
0002b3 deeb      	RCALL _noOp
0002b4 c04f      	RJMP _0x1C
                 ;        case 6:  noOp();                    break;
                 _0x22:
0002b5 30e6      	CPI  R30,LOW(0x6)
0002b6 e0a0      	LDI  R26,HIGH(0x6)
0002b7 07fa      	CPC  R31,R26
0002b8 f411      	BRNE _0x23
0002b9 dee5      	RCALL _noOp
0002ba c049      	RJMP _0x1C
                 ;        case 7:  noOp();                    break;
                 _0x23:
0002bb 30e7      	CPI  R30,LOW(0x7)
0002bc e0a0      	LDI  R26,HIGH(0x7)
0002bd 07fa      	CPC  R31,R26
0002be f411      	BRNE _0x24
0002bf dedf      	RCALL _noOp
0002c0 c043      	RJMP _0x1C
                 ;        case 8:  noOp();                    break;
                 _0x24:
0002c1 30e8      	CPI  R30,LOW(0x8)
0002c2 e0a0      	LDI  R26,HIGH(0x8)
0002c3 07fa      	CPC  R31,R26
0002c4 f411      	BRNE _0x25
0002c5 ded9      	RCALL _noOp
0002c6 c03d      	RJMP _0x1C
                 ;        case 9:  noOp();                    break;
                 _0x25:
0002c7 30e9      	CPI  R30,LOW(0x9)
0002c8 e0a0      	LDI  R26,HIGH(0x9)
0002c9 07fa      	CPC  R31,R26
0002ca f411      	BRNE _0x26
0002cb ded3      	RCALL _noOp
0002cc c037      	RJMP _0x1C
                 ;        case 10: rxreadOutputVolt(idata);   break;
                 _0x26:
0002cd 30ea      	CPI  R30,LOW(0xA)
0002ce e0a0      	LDI  R26,HIGH(0xA)
0002cf 07fa      	CPC  R31,R26
0002d0 f421      	BRNE _0x27
0002d1 933a      	ST   -Y,R19
0002d2 932a      	ST   -Y,R18
0002d3 df39      	RCALL _rxreadOutputVolt
0002d4 c02f      	RJMP _0x1C
                 ;        case 11: rxreadBatteryAmp(idata);   break;
                 _0x27:
0002d5 30eb      	CPI  R30,LOW(0xB)
0002d6 e0a0      	LDI  R26,HIGH(0xB)
0002d7 07fa      	CPC  R31,R26
0002d8 f421      	BRNE _0x28
0002d9 933a      	ST   -Y,R19
0002da 932a      	ST   -Y,R18
0002db df38      	RCALL _rxreadBatteryAmp
0002dc c027      	RJMP _0x1C
                 ;        case 12: rxreadInputVolt(idata);    break;
                 _0x28:
0002dd 30ec      	CPI  R30,LOW(0xC)
0002de e0a0      	LDI  R26,HIGH(0xC)
0002df 07fa      	CPC  R31,R26
0002e0 f421      	BRNE _0x29
0002e1 933a      	ST   -Y,R19
0002e2 932a      	ST   -Y,R18
0002e3 df3b      	RCALL _rxreadInputVolt
0002e4 c01f      	RJMP _0x1C
                 ;        case 13: rxreadOutputCurrent(idata);break;
                 _0x29:
0002e5 30ed      	CPI  R30,LOW(0xD)
0002e6 e0a0      	LDI  R26,HIGH(0xD)
0002e7 07fa      	CPC  R31,R26
0002e8 f421      	BRNE _0x2A
0002e9 933a      	ST   -Y,R19
0002ea 932a      	ST   -Y,R18
0002eb df3a      	RCALL _rxreadOutputCurrent
0002ec c017      	RJMP _0x1C
                 ;        case 14: noOp();                    break;
                 _0x2A:
0002ed 30ee      	CPI  R30,LOW(0xE)
0002ee e0a0      	LDI  R26,HIGH(0xE)
0002ef 07fa      	CPC  R31,R26
0002f0 f411      	BRNE _0x2B
0002f1 dead      	RCALL _noOp
0002f2 c011      	RJMP _0x1C
                 ;        case 15: noOp();                    break;
                 _0x2B:
0002f3 30ef      	CPI  R30,LOW(0xF)
0002f4 e0a0      	LDI  R26,HIGH(0xF)
0002f5 07fa      	CPC  R31,R26
0002f6 f411      	BRNE _0x2C
0002f7 dea7      	RCALL _noOp
0002f8 c00b      	RJMP _0x1C
                 ;        case 16: noOp();                    break;
                 _0x2C:
0002f9 31e0      	CPI  R30,LOW(0x10)
0002fa e0a0      	LDI  R26,HIGH(0x10)
0002fb 07fa      	CPC  R31,R26
0002fc f411      	BRNE _0x2D
0002fd dea1      	RCALL _noOp
0002fe c005      	RJMP _0x1C
                 ;        case 17: noOp();                    break;
                 _0x2D:
0002ff 31e1      	CPI  R30,LOW(0x11)
000300 e0a0      	LDI  R26,HIGH(0x11)
000301 07fa      	CPC  R31,R26
000302 f409      	BRNE _0x2F
000303 de9b      	RCALL _noOp
                 ;        default: ;
                 _0x2F:
                 ;   }
                 _0x1C:
                 ;
                 ;//    if (icmd == 1) {  // <001>
                 ;//        rxmainOn();
                 ;//    }
                 ;//    else if (icmd == 2) {
                 ;//        rxmainOff();
                 ;//    }
                 ;//    else if (icmd == 3 ) {
                 ;//        rxresetFault();
                 ;//
                 ;//    }
                 ;//    else if (icmd == 4) {
                 ;//       rxfaultDetect(idata);
                 ;//    }
                 ;//
                 ;//    else if (icmd == 10 ){
                 ;//        rxreadOutputVolt(idata);
                 ;//
                 ;//    }
                 ;//    else if (icmd == 11 ){
                 ;//        rxreadBatteryAmp(idata);
                 ;//    }
                 ;//    else if (icmd == 12 ){
                 ;//        rxreadInputVolt(idata);
                 ;//    }
                 ;//    else if (icmd == 13 ){
                 ;//        rxreadOutputCurrent(idata);
                 ;//    }
                 ;
                 ;
                 ;}
000304 940e 1147 	CALL __LOADLOCR6
000306 962f      	ADIW R28,15
000307 9508      	RET
                 ;
                 ;
                 ;
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#include <alcd.h>
                 ;
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;
                 ;//int data_received = 0;
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 32
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 005D {
                 _usart0_rx_isr:
000308 920a      	ST   -Y,R0
000309 921a      	ST   -Y,R1
00030a 92fa      	ST   -Y,R15
00030b 936a      	ST   -Y,R22
00030c 937a      	ST   -Y,R23
00030d 938a      	ST   -Y,R24
00030e 939a      	ST   -Y,R25
00030f 93aa      	ST   -Y,R26
000310 93ba      	ST   -Y,R27
000311 93ea      	ST   -Y,R30
000312 93fa      	ST   -Y,R31
000313 b7ef      	IN   R30,SREG
000314 93ea      	ST   -Y,R30
                 ; 0000 005E char status,data;
                 ; 0000 005F status=UCSR0A;
000315 931a      	ST   -Y,R17
000316 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000317 b11b      	IN   R17,11
                 ; 0000 0060 data=UDR0;
000318 b10c      	IN   R16,12
                 ; 0000 0061 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000319 2fe1      	MOV  R30,R17
00031a 71ec      	ANDI R30,LOW(0x1C)
00031b f011      	BREQ PC+3
00031c 940c 036a 	JMP _0x30
                 ; 0000 0062    {
                 ; 0000 0063    rx_buffer0[rx_wr_index0++]=data;
00031e 91e0 05e4 	LDS  R30,_rx_wr_index0
000320 5fef      	SUBI R30,-LOW(1)
000321 93e0 05e4 	STS  _rx_wr_index0,R30
000323 940e 0d1d 	CALL SUBOPT_0x7
000325 53ec      	SUBI R30,LOW(-_rx_buffer0)
000326 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
000327 8300      	ST   Z,R16
                 ; 0000 0064      if(data == '<') {
000328 330c      	CPI  R16,60
000329 f449      	BRNE _0x31
                 ; 0000 0065         comStart = 1;
00032a e0e1      	LDI  R30,LOW(1)
00032b e0f0      	LDI  R31,HIGH(1)
00032c 93e0 05c0 	STS  _comStart,R30
00032e 93f0 05c1 	STS  _comStart+1,R31
                 ; 0000 0066         i = 0;
000330 940e 0d20 	CALL SUBOPT_0x8
                 ; 0000 0067 
                 ; 0000 0068     }
                 ; 0000 0069     else if(data == '>') {
000332 c010      	RJMP _0x32
                 _0x31:
000333 330e      	CPI  R16,62
000334 f471      	BRNE _0x33
                 ; 0000 006A             *(rdataA+i) = data;
000335 940e 0d26 	CALL SUBOPT_0x9
                 ; 0000 006B             comStart = 0;
000337 e0e0      	LDI  R30,LOW(0)
000338 93e0 05c0 	STS  _comStart,R30
00033a 93e0 05c1 	STS  _comStart+1,R30
                 ; 0000 006C             i = 0;
00033c 940e 0d20 	CALL SUBOPT_0x8
                 ; 0000 006D             comDecode(rdataA);
00033e eaec      	LDI  R30,LOW(_rdataA)
00033f e0f5      	LDI  R31,HIGH(_rdataA)
000340 93fa      	ST   -Y,R31
000341 93ea      	ST   -Y,R30
000342 def1      	RCALL _comDecode
                 ; 0000 006E     }
                 ; 0000 006F     if (comStart == 1) {
                 _0x33:
                 _0x32:
000343 91a0 05c0 	LDS  R26,_comStart
000345 91b0 05c1 	LDS  R27,_comStart+1
000347 9711      	SBIW R26,1
000348 f471      	BRNE _0x34
                 ; 0000 0070             *(rdataA+i) = data;  // Read data
000349 940e 0d26 	CALL SUBOPT_0x9
                 ; 0000 0071             i++;
00034b eca2      	LDI  R26,LOW(_i)
00034c e0b5      	LDI  R27,HIGH(_i)
00034d 940e 0d2e 	CALL SUBOPT_0xA
                 ; 0000 0072             if(i==9){i=0;}
00034f 91a0 05c2 	LDS  R26,_i
000351 91b0 05c3 	LDS  R27,_i+1
000353 9719      	SBIW R26,9
000354 f411      	BRNE _0x35
000355 940e 0d20 	CALL SUBOPT_0x8
                 ; 0000 0073     }
                 _0x35:
                 ; 0000 0074 
                 ; 0000 0075 
                 ; 0000 0076 //#if RX_BUFFER_SIZE0 == 256
                 ; 0000 0077 //   // special case for receiver buffer size=256
                 ; 0000 0078 //   if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0079 //#else
                 ; 0000 007A    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
                 _0x34:
000357 91a0 05e4 	LDS  R26,_rx_wr_index0
000359 32a0      	CPI  R26,LOW(0x20)
00035a f419      	BRNE _0x36
00035b e0e0      	LDI  R30,LOW(0)
00035c 93e0 05e4 	STS  _rx_wr_index0,R30
                 ; 0000 007B    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x36:
00035e 91a0 05e6 	LDS  R26,_rx_counter0
000360 5faf      	SUBI R26,-LOW(1)
000361 93a0 05e6 	STS  _rx_counter0,R26
000363 32a0      	CPI  R26,LOW(0x20)
000364 f429      	BRNE _0x37
                 ; 0000 007C       {
                 ; 0000 007D       rx_counter0=0;
000365 e0e0      	LDI  R30,LOW(0)
000366 93e0 05e6 	STS  _rx_counter0,R30
                 ; 0000 007E       rx_buffer_overflow0=1;
000368 9468      	SET
000369 f820      	BLD  R2,0
                 ; 0000 007F       }
                 ; 0000 0080 //#endif
                 ; 0000 0081    }//data_received = 1;
                 _0x37:
                 ; 0000 0082 }
                 _0x30:
00036a 9109      	LD   R16,Y+
00036b 9119      	LD   R17,Y+
00036c 91e9      	LD   R30,Y+
00036d bfef      	OUT  SREG,R30
00036e 91f9      	LD   R31,Y+
00036f 91e9      	LD   R30,Y+
000370 91b9      	LD   R27,Y+
000371 91a9      	LD   R26,Y+
000372 9199      	LD   R25,Y+
000373 9189      	LD   R24,Y+
000374 9179      	LD   R23,Y+
000375 9169      	LD   R22,Y+
000376 90f9      	LD   R15,Y+
000377 9019      	LD   R1,Y+
000378 9009      	LD   R0,Y+
000379 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;
                 ;
                 ;
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 008C {
                 ; 0000 008D char data;
                 ; 0000 008E while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 008F data=rx_buffer0[rx_rd_index0++];
                 ; 0000 0090 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0091 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0092 #endif
                 ; 0000 0093 #asm("cli")
                 ; 0000 0094 --rx_counter0;
                 ; 0000 0095 #asm("sei")
                 ; 0000 0096 return data;
                 ; 0000 0097 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 64
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 00AD {
                 _usart0_tx_isr:
00037a 93aa      	ST   -Y,R26
00037b 93ea      	ST   -Y,R30
00037c 93fa      	ST   -Y,R31
00037d b7ef      	IN   R30,SREG
00037e 93ea      	ST   -Y,R30
                 ; 0000 00AE if (tx_counter0)
00037f 91e0 0629 	LDS  R30,_tx_counter0
000381 30e0      	CPI  R30,0
000382 f0a9      	BREQ _0x3C
                 ; 0000 00AF    {
                 ; 0000 00B0    --tx_counter0;
000383 50e1      	SUBI R30,LOW(1)
000384 93e0 0629 	STS  _tx_counter0,R30
                 ; 0000 00B1    UDR0=tx_buffer0[tx_rd_index0++];
000386 91e0 0628 	LDS  R30,_tx_rd_index0
000388 5fef      	SUBI R30,-LOW(1)
000389 93e0 0628 	STS  _tx_rd_index0,R30
00038b 940e 0d1d 	CALL SUBOPT_0x7
00038d 51e9      	SUBI R30,LOW(-_tx_buffer0)
00038e 4ffa      	SBCI R31,HIGH(-_tx_buffer0)
00038f 81e0      	LD   R30,Z
000390 b9ec      	OUT  0xC,R30
                 ; 0000 00B2 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00B3    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000391 91a0 0628 	LDS  R26,_tx_rd_index0
000393 34a0      	CPI  R26,LOW(0x40)
000394 f419      	BRNE _0x3D
000395 e0e0      	LDI  R30,LOW(0)
000396 93e0 0628 	STS  _tx_rd_index0,R30
                 ; 0000 00B4 #endif
                 ; 0000 00B5    }
                 _0x3D:
                 ; 0000 00B6 }
                 _0x3C:
000398 91e9      	LD   R30,Y+
000399 bfef      	OUT  SREG,R30
00039a 91f9      	LD   R31,Y+
00039b 91e9      	LD   R30,Y+
00039c 91a9      	LD   R26,Y+
00039d 9518      	RETI
                 ;
                 ;
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 00BF {
                 _putchar:
                 ; 0000 00C0 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0x3E:
00039e 91a0 0629 	LDS  R26,_tx_counter0
0003a0 34a0      	CPI  R26,LOW(0x40)
0003a1 f3e1      	BREQ _0x3E
                 ; 0000 00C1 #asm("cli")
0003a2 94f8      	cli
                 ; 0000 00C2 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
0003a3 91e0 0629 	LDS  R30,_tx_counter0
0003a5 30e0      	CPI  R30,0
0003a6 f411      	BRNE _0x42
0003a7 995d      	SBIC 0xB,5
0003a8 c018      	RJMP _0x41
                 _0x42:
                 ; 0000 00C3    {
                 ; 0000 00C4    tx_buffer0[tx_wr_index0++]=c;
0003a9 91e0 0627 	LDS  R30,_tx_wr_index0
0003ab 5fef      	SUBI R30,-LOW(1)
0003ac 93e0 0627 	STS  _tx_wr_index0,R30
0003ae 940e 0d1d 	CALL SUBOPT_0x7
0003b0 51e9      	SUBI R30,LOW(-_tx_buffer0)
0003b1 4ffa      	SBCI R31,HIGH(-_tx_buffer0)
0003b2 81a8      	LD   R26,Y
0003b3 83a0      	STD  Z+0,R26
                 ; 0000 00C5 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00C6    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
0003b4 91a0 0627 	LDS  R26,_tx_wr_index0
0003b6 34a0      	CPI  R26,LOW(0x40)
0003b7 f419      	BRNE _0x44
0003b8 e0e0      	LDI  R30,LOW(0)
0003b9 93e0 0627 	STS  _tx_wr_index0,R30
                 ; 0000 00C7 #endif
                 ; 0000 00C8    ++tx_counter0;
                 _0x44:
0003bb 91e0 0629 	LDS  R30,_tx_counter0
0003bd 5fef      	SUBI R30,-LOW(1)
0003be 93e0 0629 	STS  _tx_counter0,R30
                 ; 0000 00C9    }
                 ; 0000 00CA else
0003c0 c002      	RJMP _0x45
                 _0x41:
                 ; 0000 00CB    UDR0=c;
0003c1 81e8      	LD   R30,Y
0003c2 b9ec      	OUT  0xC,R30
                 ; 0000 00CC #asm("sei")
                 _0x45:
0003c3 9478      	sei
                 ; 0000 00CD }
0003c4 9621      	ADIW R28,1
0003c5 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;int on_pressed = 0;
                 ;int off_pressed = 0;
                 ;int reset_pressed = 0;
                 ;short int on_button_state = 0x0000;
                 ;short int off_button_state = 0x0000;
                 ;short int reset_button_state = 0x0000;
                 ;
                 ;// Timer3 overflow interrupt service routine
                 ;interrupt[TIM3_OVF] void timer3_ovf_isr(void) {
                 ; 0000 00D9 interrupt[30] void timer3_ovf_isr(void) {
                 _timer3_ovf_isr:
0003c6 93aa      	ST   -Y,R26
0003c7 93ba      	ST   -Y,R27
0003c8 93ea      	ST   -Y,R30
0003c9 93fa      	ST   -Y,R31
0003ca b7ef      	IN   R30,SREG
0003cb 93ea      	ST   -Y,R30
                 ; 0000 00DA 
                 ; 0000 00DB     // ISR called every 8.595 msec when TCCRB = 0x09, and OCR3A = 0xFFFF
                 ; 0000 00DC 
                 ; 0000 00DD     // switch debounce logic. refer: https://www.embedded.com/electronics-blogs/break-points/4024981/My-favorite-software-debouncers
                 ; 0000 00DE     // 16 bit shifts = approx 130msec debounce delay
                 ; 0000 00DF on_button_state = (0x8000 | !PINE.4) | (on_button_state << 1);
0003cc e0e0      	LDI  R30,0
0003cd 9b0c      	SBIS 0x1,4
0003ce e0e1      	LDI  R30,1
0003cf 940e 0d34 	CALL SUBOPT_0xB
0003d1 91e0 0630 	LDS  R30,_on_button_state
0003d3 91f0 0631 	LDS  R31,_on_button_state+1
0003d5 940e 0d38 	CALL SUBOPT_0xC
0003d7 93e0 0630 	STS  _on_button_state,R30
0003d9 93f0 0631 	STS  _on_button_state+1,R31
                 ; 0000 00E0     if(on_button_state == 0xC000) {
0003db 91a0 0630 	LDS  R26,_on_button_state
0003dd 91b0 0631 	LDS  R27,_on_button_state+1
0003df 30a0      	CPI  R26,LOW(0xC000)
0003e0 ece0      	LDI  R30,HIGH(0xC000)
0003e1 07be      	CPC  R27,R30
0003e2 f431      	BRNE _0x46
                 ; 0000 00E1        on_pressed = 1;
0003e3 e0e1      	LDI  R30,LOW(1)
0003e4 e0f0      	LDI  R31,HIGH(1)
0003e5 93e0 062a 	STS  _on_pressed,R30
0003e7 93f0 062b 	STS  _on_pressed+1,R31
                 ; 0000 00E2 
                 ; 0000 00E3     }
                 ; 0000 00E4 
                 ; 0000 00E5     off_button_state = (0x8000 | !PINE.6) | (off_button_state << 1);
                 _0x46:
0003e9 e0e0      	LDI  R30,0
0003ea 9b0e      	SBIS 0x1,6
0003eb e0e1      	LDI  R30,1
0003ec 940e 0d34 	CALL SUBOPT_0xB
0003ee 91e0 0632 	LDS  R30,_off_button_state
0003f0 91f0 0633 	LDS  R31,_off_button_state+1
0003f2 940e 0d38 	CALL SUBOPT_0xC
0003f4 93e0 0632 	STS  _off_button_state,R30
0003f6 93f0 0633 	STS  _off_button_state+1,R31
                 ; 0000 00E6     if(off_button_state == 0xC000 ) {
0003f8 91a0 0632 	LDS  R26,_off_button_state
0003fa 91b0 0633 	LDS  R27,_off_button_state+1
0003fc 30a0      	CPI  R26,LOW(0xC000)
0003fd ece0      	LDI  R30,HIGH(0xC000)
0003fe 07be      	CPC  R27,R30
0003ff f431      	BRNE _0x47
                 ; 0000 00E7         off_pressed = 1;
000400 e0e1      	LDI  R30,LOW(1)
000401 e0f0      	LDI  R31,HIGH(1)
000402 93e0 062c 	STS  _off_pressed,R30
000404 93f0 062d 	STS  _off_pressed+1,R31
                 ; 0000 00E8     }
                 ; 0000 00E9 
                 ; 0000 00EA     reset_button_state = (0x8000 | !PIND.4) | (reset_button_state << 1);
                 _0x47:
000406 e0e0      	LDI  R30,0
000407 9b84      	SBIS 0x10,4
000408 e0e1      	LDI  R30,1
000409 940e 0d34 	CALL SUBOPT_0xB
00040b 91e0 0634 	LDS  R30,_reset_button_state
00040d 91f0 0635 	LDS  R31,_reset_button_state+1
00040f 940e 0d38 	CALL SUBOPT_0xC
000411 93e0 0634 	STS  _reset_button_state,R30
000413 93f0 0635 	STS  _reset_button_state+1,R31
                 ; 0000 00EB     if(reset_button_state == 0xC000 ) {
000415 91a0 0634 	LDS  R26,_reset_button_state
000417 91b0 0635 	LDS  R27,_reset_button_state+1
000419 30a0      	CPI  R26,LOW(0xC000)
00041a ece0      	LDI  R30,HIGH(0xC000)
00041b 07be      	CPC  R27,R30
00041c f431      	BRNE _0x48
                 ; 0000 00EC         reset_pressed = 1;
00041d e0e1      	LDI  R30,LOW(1)
00041e e0f0      	LDI  R31,HIGH(1)
00041f 93e0 062e 	STS  _reset_pressed,R30
000421 93f0 062f 	STS  _reset_pressed+1,R31
                 ; 0000 00ED     }
                 ; 0000 00EE 
                 ; 0000 00EF }
                 _0x48:
000423 91e9      	LD   R30,Y+
000424 bfef      	OUT  SREG,R30
000425 91f9      	LD   R31,Y+
000426 91e9      	LD   R30,Y+
000427 91b9      	LD   R27,Y+
000428 91a9      	LD   R26,Y+
000429 9518      	RETI
                 ;
                 ;
                 ;// SPI functions
                 ;#include <spi.h>
                 ;//---------------THERMOCOUPLE------------
                 ;#include "Thermocouple.c"
                 ;//ThermoInit(void);
                 ;/*
                 ;/*
                 ; *  Define literals for the SPI port accesses and the thermocouple chip
                 ; *  select line.
                 ; */
                 ;#define  PORT_THERMO_CS           PORTE
                 ;#define  DDR_THERMO_CS            DDRE
                 ;#define  BIT_THERMO_CS            3
                 ;#define  MASK_THERMO_CS           (1<<BIT_THERMO_CS)
                 ;
                 ;#define  PORT_SPI                 PORTB
                 ;#define  DDR_SPI                  DDRB
                 ;#define  BIT_SPI_SCK              1
                 ;#define  MASK_SPI_SCK             (1<<BIT_SPI_SCK)
                 ;#define  BIT_SPI_SS               0
                 ;#define  MASK_SPI_SS              (1<<BIT_SPI_SS)
                 ;#define  BIT_SPI_MISO             3
                 ;#define  MASK_SPI_MISO            (1<<BIT_SPI_MISO)
                 ;
                 ;/*
                 ; *  ThermoInit      set up hardware for using the MAX31855
                 ; *
                 ; *  This routine configures the SPI as a master for exchanging
                 ; *  data with the MAX31855 thermocouple converter.  All pins
                 ; *  and registers for accessing the various port lines are
                 ; *  defined at the top of this code as named literals.
                 ; */
                 ;/*
                 ;void  ThermoInit(void)
                 ;{
                 ;    PORT_THERMO_CS |= MASK_THERMO_CS;        // start with CS high
                 ;    DDR_THERMO_CS |= MASK_THERMO_CS;         // now make that line an output
                 ;
                 ;    PORT_SPI |= MASK_SPI_SS;                 // SS* is not used but must be driven high
                 ;    DDR_SPI |= MASK_SPI_SS;                  // SS* is not used but must be driven high
                 ;    PORT_SPI &= ~MASK_SPI_SCK;               // drive SCK low
                 ;    DDR_SPI |= MASK_SPI_SCK;                 // now make SCK an output
                 ;
                 ;    SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0) | (1<<SPR1) | (1<<CPHA);
                 ;                                             // enable SPI as master, slowest clock,
                 ;                                             // data active on trailing edge of SCK
                 ;}
                 ;
                 ;
                 ;/*
                 ; *  ThermoReadRaw      return 32-bit raw value from MAX31855
                 ; *
                 ; *  This routine uses a four-byte SPI exchange to collect a
                 ; *  raw reading from the MAX31855 thermocouple converter.  That
                 ; *  value is returned unprocessed to the calling routine.
                 ; *
                 ; *  Note that this routine does NO processing.  It does not
                 ; *  check for error flags or reasonable data ranges.
                 ;
                 ;//  d = 0x01900000;            // thermocouple = +25C, reference = 0C, no faults
                 ;//  d = 0xfff00000;            // thermocouple = -1C, reference = 0C, no faults
                 ;//  d = 0xf0600000;            // thermocouple = -250C, reference = 0C, no faults
                 ;//  d = 0x00010001;            // thermocouple = N/A, reference = N/A, open fault
                 ;//  d = 0x00010002;            // thermocouple = N/A, reference = N/A, short to GND
                 ;//  d = 0x00010004;            // thermocouple = N/A, refernece = N/A, short to VCC
                 ;*/
                 ;
                 ;/*
                 ;signed int  ThermoReadRaw (void)
                 ;{
                 ;    signed int                   d;
                 ;    unsigned char                n;
                 ;
                 ;    PORT_THERMO_CS &= ~MASK_THERMO_CS;    // pull thermo CS low
                 ;    d = 0;                                // start with nothing
                 ;    for (n=3; n!=0xff; n--)
                 ;    {
                 ;        SPDR = 0;                         // send a null byte
                 ;        while ((SPSR & (1<<SPIF)) == 0)  ;    // wait until transfer ends
                 ;        d = (d<<8) + SPDR;                // add next byte, starting with MSB
                 ;    }
                 ;    PORT_THERMO_CS |= MASK_THERMO_CS;     // done, pull CS high
                 ;    return  d;
                 ;}
                 ;
                 ;/*
                 ; *  ThermoReadC      return thermocouple temperature in degrees C
                 ; *
                 ; *  This routine takes a raw reading from the thermocouple converter
                 ; *  and translates that value into a temperature in degrees C.  That
                 ; *  value is returned to the calling routine as an integer value,
                 ; *  rounded.
                 ; *
                 ; *  The thermocouple value is stored in bits 31-18 as a signed 14-bit
                 ; *  value, where the LSB represents 0.25 degC.  To convert to an
                 ; *  integer value with no intermediate float operations, this code
                 ; *  shifts the value 20 places right, rather than 18, effectively
                 ; *  dividing the raw value by 4 and scaling it to unit degrees.
                 ; *
                 ; *  Note that this routine does NOT check the error flags in the
                 ; *  raw value.  This would be a nice thing to add later, when I've
                 ; *  figured out how I want to propagate the error conditions...
                 ; */
                 ; /*
                 ;int  ThermoReadC(void)
                 ;{
                 ;    signed int d;
                 ;    int neg;
                 ;
                 ;
                 ;    neg = 0;                    // assume a positive raw value
                 ;    d = ThermoReadRaw();        // get a raw value
                 ;    d = ((d >> 10) & 0x3fff);   // leave only thermocouple value in d
                 ;    if (d & 0x2000)             // if thermocouple reading is negative...
                 ;    {
                 ;        d = -d & 0x3fff;        // always work with positive values
                 ;        neg = 1;                // but note original value was negative
                 ;    }
                 ;    d = d + 2;                  // round up by 0.5 degC (2 LSBs)
                 ;    d = d >> 2;                 // now convert from 0.25 degC units to degC
                 ;    if (neg)  d = -d;           // convert to negative if needed
                 ;    return  d;                  // return as integer
                 ;}
                 ;   */
                 ;
                 ;/*
                 ; *  ThermoReadF      return thermocouple temperature in degrees F
                 ; *
                 ; *  This routine takes a reading from the thermocouple converter in
                 ; *  degC and converts it to degF.
                 ; *
                 ; *  Note that this routine simply calls ThermoReadC and converts
                 ; *  from degC to degF using integer math.  This routine does not
                 ; *  see the raw converter value and cannot do any error checking.
                 ; */
                 ;/*int  ThermoReadF(void)
                 ;{
                 ;    int t;
                 ;
                 ;    t = ThermoReadC();           // get the value in degC
                 ;    t = ((t * 90) / 50) + 32;    // convert to degF
                 ;    return  t;                   // all done
                 ;}*/
                 ;
                 ;
                 ;//---------------Variables---------------
                 ;#include <variables.h>
                 ;//-------------Display Functions---------
                 ;#include "Display_functions.c"
                 ;//#include <variables.h>
                 ;
                 ;void pointer_display_horiz()                          //checks the cursor position.
                 ; 0000 00F9 {
                 _pointer_display_horiz:
                 ;    lcd_gotoxy(0,2);
00042a 940e 0d3d 	CALL SUBOPT_0xD
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(1,2);
00042c e0e1      	LDI  R30,LOW(1)
00042d 940e 0d49 	CALL SUBOPT_0xE
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(2,2);
00042f e0e2      	LDI  R30,LOW(2)
000430 940e 0d49 	CALL SUBOPT_0xE
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(3,2);
000432 e0e3      	LDI  R30,LOW(3)
000433 940e 0d49 	CALL SUBOPT_0xE
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(Pointer_horiz,2);                      //Pointer displays arrow at that position
000435 928a      	ST   -Y,R8
000436 940e 0d54 	CALL SUBOPT_0xF
                 ;    lcd_putsf("^");
                +
000438 eee6     +LDI R30 , LOW ( 2 * _0x0 + ( 54 ) )
000439 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 54 ) )
                 	__POINTW1FN _0x0,54
00043a c016      	RJMP _0x212000B
                 ;}
                 ;
                 ;void pointer_display_vert()                          //checks the cursor position.
                 ;{
                 _pointer_display_vert:
                 ;    lcd_gotoxy(0,0);
00043b 940e 0d58 	CALL SUBOPT_0x10
                 ;    lcd_putsf(" ");
00043d 940e 0d5d 	CALL SUBOPT_0x11
                 ;    lcd_gotoxy(0,1);
00043f 940e 0d63 	CALL SUBOPT_0x12
                 ;    lcd_putsf(" ");
000441 940e 0d5d 	CALL SUBOPT_0x11
                 ;    lcd_gotoxy(0,2);
000443 940e 0d3d 	CALL SUBOPT_0xD
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(0,3);
000445 e0e0      	LDI  R30,LOW(0)
000446 940e 0d69 	CALL SUBOPT_0x13
                 ;    lcd_putsf(" ");
000448 940e 0d5d 	CALL SUBOPT_0x11
                 ;    lcd_gotoxy(0,Pointer_vert);                      //Pointer displays arrow at that position
00044a e0e0      	LDI  R30,LOW(0)
00044b 93ea      	ST   -Y,R30
00044c 92aa      	ST   -Y,R10
00044d 940e 0c51 	CALL _lcd_gotoxy
                 ;    lcd_putsf(">");
                +
00044f ebe4     +LDI R30 , LOW ( 2 * _0x0 + ( 4 ) )
000450 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW1FN _0x0,4
                 _0x212000B:
000451 93fa      	ST   -Y,R31
000452 93ea      	ST   -Y,R30
000453 940e 0c9f 	CALL _lcd_putsf
                 ;}
000455 9508      	RET
                 ;
                 ;
                 ;
                 ;void show_volt()
                 ;{
                 _show_volt:
                 ;    sprintf(disp_volt,"%03d",temp_voltage);
000456 e8ef      	LDI  R30,LOW(_disp_volt)
000457 e0f5      	LDI  R31,HIGH(_disp_volt)
000458 940e 0d6e 	CALL SUBOPT_0x14
00045a 940e 0d75 	CALL SUBOPT_0x15
00045c 940e 0d7a 	CALL SUBOPT_0x16
                 ;    lcd_gotoxy(0,1);
                 ;    lcd_puts(disp_volt);
00045e e8ef      	LDI  R30,LOW(_disp_volt)
00045f e0f5      	LDI  R31,HIGH(_disp_volt)
000460 c2c6      	RJMP _0x2120008
                 ;}
                 ;void show_current()
                 ;{
                 _show_current:
                 ;    sprintf(disp_current,"%02d",temp_current);
000461 e9e2      	LDI  R30,LOW(_disp_current)
000462 e0f5      	LDI  R31,HIGH(_disp_current)
000463 93fa      	ST   -Y,R31
000464 93ea      	ST   -Y,R30
                +
000465 eeed     +LDI R30 , LOW ( 2 * _0x0 + ( 61 ) )
000466 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 61 ) )
                 	__POINTW1FN _0x0,61
000467 93fa      	ST   -Y,R31
000468 93ea      	ST   -Y,R30
000469 940e 0d83 	CALL SUBOPT_0x17
00046b 940e 0d7a 	CALL SUBOPT_0x16
                 ;    lcd_gotoxy(0,1);
                 ;    lcd_puts(disp_current);
00046d e9e2      	LDI  R30,LOW(_disp_current)
00046e e0f5      	LDI  R31,HIGH(_disp_current)
00046f c2b7      	RJMP _0x2120008
                 ;}
                 ;
                 ;//----Input and val change functions-----
                 ;#include "Change.c"
                 ;#include "Inputs.c"
                 ;//#include <variables.h>
                 ;
                 ;
                 ;
                 ;void input(int next)                         //next recieves value no of options we will have in the next menu
                 ; 0000 00FC {
                 _input:
                 ;    Pt = Pointer_vert;
                 ;	next -> Y+0
000470 0165      	MOVW R12,R10
                 ;    pointer_display_vert();
000471 dfc9      	RCALL _pointer_display_vert
                 ;    delay_ms(100);
000472 940e 0d88 	CALL SUBOPT_0x18
                 ;    if (PINE.7 == 0)                                            //UP
000474 990f      	SBIC 0x1,7
000475 c017      	RJMP _0x49
                 ;       {
                 ;        while(PINE.7 == 0);
                 _0x4A:
000476 9b0f      	SBIS 0x1,7
000477 cffe      	RJMP _0x4A
                 ;        Pt--;
000478 01f6      	MOVW R30,R12
000479 9731      	SBIW R30,1
00047a 016f      	MOVW R12,R30
                 ;        Pointer_vert = ((Pt < 0) ? (next+Pt): Pt) % next;
00047b 2400      	CLR  R0
00047c 14c0      	CP   R12,R0
00047d 04d0      	CPC  R13,R0
00047e f434      	BRGE _0x4D
00047f 01f6      	MOVW R30,R12
000480 81a8      	LD   R26,Y
000481 81b9      	LDD  R27,Y+1
000482 0fea      	ADD  R30,R26
000483 1ffb      	ADC  R31,R27
000484 c001      	RJMP _0x4E
                 _0x4D:
000485 01f6      	MOVW R30,R12
                 _0x4E:
000486 01df      	MOVW R26,R30
000487 81e8      	LD   R30,Y
000488 81f9      	LDD  R31,Y+1
000489 940e 10ec 	CALL __MODW21
00048b 015f      	MOVW R10,R30
                 ;        pointer_display_vert();
00048c dfae      	RCALL _pointer_display_vert
                 ;       }
                 ;
                 ;    if (PINE.5 == 0)                                            //DOWN
                 _0x49:
00048d 990d      	SBIC 0x1,5
00048e c00c      	RJMP _0x50
                 ;       {
                 ;        while(PINE.5 == 0);
                 _0x51:
00048f 9b0d      	SBIS 0x1,5
000490 cffe      	RJMP _0x51
                 ;        Pointer_vert++;
000491 01f5      	MOVW R30,R10
000492 9631      	ADIW R30,1
000493 015f      	MOVW R10,R30
                 ;        Pointer_vert = Pointer_vert % next;
000494 81e8      	LD   R30,Y
000495 81f9      	LDD  R31,Y+1
000496 01d5      	MOVW R26,R10
000497 940e 10ec 	CALL __MODW21
000499 015f      	MOVW R10,R30
                 ;        pointer_display_vert();
00049a dfa0      	RCALL _pointer_display_vert
                 ;       }
                 ;
                 ;    if (PINB.3 == 0)                                            //ENTER
                 _0x50:
00049b 99b3      	SBIC 0x16,3
00049c c012      	RJMP _0x54
                 ;       {
                 ;        while(PINB.3 == 0);
                 _0x55:
00049d 9bb3      	SBIS 0x16,3
00049e cffe      	RJMP _0x55
                 ;        if(Screen < 10)
00049f e0ea      	LDI  R30,LOW(10)
0004a0 e0f0      	LDI  R31,HIGH(10)
0004a1 164e      	CP   R4,R30
0004a2 065f      	CPC  R5,R31
0004a3 f41c      	BRGE _0x58
                 ;        {
                 ;            Screen = ((Screen+1)*10) + Pointer_vert;
0004a4 01f2      	MOVW R30,R4
0004a5 9631      	ADIW R30,1
0004a6 c001      	RJMP _0xBC
                 ;        }
                 ;        else
                 _0x58:
                 ;        {
                 ;            Screen = ((Screen)*10) + Pointer_vert;
0004a7 01f2      	MOVW R30,R4
                 _0xBC:
0004a8 e0aa      	LDI  R26,LOW(10)
0004a9 e0b0      	LDI  R27,HIGH(10)
0004aa 940e 10cf 	CALL __MULW12
0004ac 0dea      	ADD  R30,R10
0004ad 1dfb      	ADC  R31,R11
0004ae 012f      	MOVW R4,R30
                 ;        }
                 ;
                 ;
                 ;       }
                 ;
                 ;    if (PIND.2 == 0)                                            //ESCAPE
                 _0x54:
0004af 9982      	SBIC 0x10,2
0004b0 c01c      	RJMP _0x5A
                 ;       {
                 ;        while(PIND.2 == 0);
                 _0x5B:
0004b1 9b82      	SBIS 0x10,2
0004b2 cffe      	RJMP _0x5B
                 ;
                 ;            if (Screen == 2)
0004b3 e0e2      	LDI  R30,LOW(2)
0004b4 e0f0      	LDI  R31,HIGH(2)
0004b5 15e4      	CP   R30,R4
0004b6 05f5      	CPC  R31,R5
0004b7 f459      	BRNE _0x5E
                 ;            {
                 ;              main_screen_trigger = 1;
0004b8 940e 0d8e 	CALL SUBOPT_0x19
                 ;              current_mainscreen_flag = 1;
                 ;              Current_Screen = 0;
0004ba 2466      	CLR  R6
0004bb 2477      	CLR  R7
                 ;              set_flag = 1;
0004bc e0e1      	LDI  R30,LOW(1)
0004bd e0f0      	LDI  R31,HIGH(1)
0004be 93e0 0576 	STS  _set_flag,R30
0004c0 93f0 0577 	STS  _set_flag+1,R31
                 ;            }
                 ;            else if(Screen > 100)
0004c2 c00a      	RJMP _0x5F
                 _0x5E:
0004c3 940e 0d95 	CALL SUBOPT_0x1A
0004c5 f41c      	BRGE _0x60
                 ;            {
                 ;                Screen = Screen/10;
0004c6 940e 0d9a 	CALL SUBOPT_0x1B
0004c8 c003      	RJMP _0xBD
                 ;            }
                 ;            else
                 _0x60:
                 ;            {
                 ;                Screen = (Screen/10)-1;
0004c9 940e 0d9a 	CALL SUBOPT_0x1B
0004cb 9731      	SBIW R30,1
                 _0xBD:
0004cc 012f      	MOVW R4,R30
                 ;            }
                 _0x5F:
                 ;
                 ;
                 ;       }
                 ;
                 ;}
                 _0x5A:
                 _0x212000A:
0004cd 9622      	ADIW R28,2
0004ce 9508      	RET
                 ;
                 ;
                 ;void input_volt(int next)
                 ;{
                 _input_volt:
                 ;    int change = pow(10,(next-Pointer_horiz-1));
                 ;    pointer_display_horiz();
0004cf 940e 0da0 	CALL SUBOPT_0x1C
                 ;	next -> Y+2
                 ;	change -> R16,R17
                 ;    delay_ms(100);
                 ;    if (PINE.7 == 0)                                            //UP     1
0004d1 990f      	SBIC 0x1,7
0004d2 c01c      	RJMP _0x62
                 ;       {
                 ;        while(PINE.7 == 0);
                 _0x63:
0004d3 9b0f      	SBIS 0x1,7
0004d4 cffe      	RJMP _0x63
                 ;        if(change == 1)
0004d5 e0e1      	LDI  R30,LOW(1)
0004d6 e0f0      	LDI  R31,HIGH(1)
0004d7 17e0      	CP   R30,R16
0004d8 07f1      	CPC  R31,R17
0004d9 f431      	BRNE _0x66
                 ;        {temp_voltage = temp_voltage + (change);}
0004da 01f8      	MOVW R30,R16
0004db 940e 0dc0 	CALL SUBOPT_0x1D
0004dd 0fea      	ADD  R30,R26
0004de 1ffb      	ADC  R31,R27
0004df c005      	RJMP _0xBE
                 ;        else
                 _0x66:
                 ;        {temp_voltage = temp_voltage + 1 + (change);}
0004e0 940e 0d75 	CALL SUBOPT_0x15
0004e2 9631      	ADIW R30,1
0004e3 0fe0      	ADD  R30,R16
0004e4 1ff1      	ADC  R31,R17
                 _0xBE:
0004e5 93e0 055e 	STS  _temp_voltage,R30
0004e7 93f0 055f 	STS  _temp_voltage+1,R31
                 ;        temp_voltage = temp_voltage % 1000;
0004e9 940e 0dc5 	CALL SUBOPT_0x1E
0004eb 940e 0dc9 	CALL SUBOPT_0x1F
                 ;        show_volt();
0004ed df68      	RCALL _show_volt
                 ;        pointer_display_horiz();
0004ee df3b      	RCALL _pointer_display_horiz
                 ;       }
                 ;
                 ;    if (PINE.5 == 0)                                            //Next   2
                 _0x62:
0004ef 990d      	SBIC 0x1,5
0004f0 c004      	RJMP _0x68
                 ;       {
                 ;        while(PINE.5 == 0);
                 _0x69:
0004f1 9b0d      	SBIS 0x1,5
0004f2 cffe      	RJMP _0x69
                 ;        Pointer_horiz++;
0004f3 940e 0dd0 	CALL SUBOPT_0x20
                 ;
                 ;        Pointer_horiz = Pointer_horiz % next;
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINB.3 == 0)                                             //ENTER 3
                 _0x68:
0004f5 99b3      	SBIC 0x16,3
0004f6 c07b      	RJMP _0x6C
                 ;        {
                 ;         while(PINB.3 == 0);
                 _0x6D:
0004f7 9bb3      	SBIS 0x16,3
0004f8 cffe      	RJMP _0x6D
                 ;         if(110 <= temp_voltage && temp_voltage <= 135)
0004f9 940e 0d75 	CALL SUBOPT_0x15
0004fb 36ee      	CPI  R30,LOW(0x6E)
0004fc e0a0      	LDI  R26,HIGH(0x6E)
0004fd 07fa      	CPC  R31,R26
0004fe f034      	BRLT _0x71
0004ff 940e 0dc0 	CALL SUBOPT_0x1D
000501 38a8      	CPI  R26,LOW(0x88)
000502 e0e0      	LDI  R30,HIGH(0x88)
000503 07be      	CPC  R27,R30
000504 f00c      	BRLT _0x72
                 _0x71:
000505 c04a      	RJMP _0x70
                 _0x72:
                 ;         {
                 ;
                 ;            lcd_clear();
000506 940e 0ddb 	CALL SUBOPT_0x21
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_puts("Voltage set to:");
                +
000508 e0e2     +LDI R30 , LOW ( _0x73 + ( 0 ) )
000509 e0f5     +LDI R31 , HIGH ( _0x73 + ( 0 ) )
                 	__POINTW1MN _0x73,0
00050a 940e 0dde 	CALL SUBOPT_0x22
                 ;            lcd_gotoxy(4,1);
00050c e0e4      	LDI  R30,LOW(4)
00050d 940e 0de2 	CALL SUBOPT_0x23
                 ;            lcd_putsf("V");
                +
00050f e0e2     +LDI R30 , LOW ( 2 * _0x0 + ( 82 ) )
000510 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 82 ) )
                 	__POINTW1FN _0x0,82
000511 940e 0de7 	CALL SUBOPT_0x24
                 ;            show_volt();
000513 df42      	RCALL _show_volt
                 ;            set_voltage = temp_voltage;
000514 940e 0d75 	CALL SUBOPT_0x15
000516 940e 10c2 	CALL __CWD1
000518 940e 0deb 	CALL SUBOPT_0x25
                 ;            flag = 11;
00051a 940e 0df4 	CALL SUBOPT_0x26
                 ;            Screen = 30;
00051c e1ee      	LDI  R30,LOW(30)
00051d e0f0      	LDI  R31,HIGH(30)
00051e 012f      	MOVW R4,R30
                 ;
                 ;            xmitString("<014-");
                +
00051f e0e4     +LDI R30 , LOW ( 2 * _0x0 + ( 84 ) )
000520 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 84 ) )
                 	__POINTW1FN _0x0,84
000521 940e 0ceb 	CALL SUBOPT_0x1
                 ;
                 ;            putchar(temp_voltage/1000 + 48);
000523 940e 0dc5 	CALL SUBOPT_0x1E
000525 940e 0dfb 	CALL SUBOPT_0x27
                 ;            temp_voltage %= 1000;
000527 940e 0dc5 	CALL SUBOPT_0x1E
000529 940e 0dc9 	CALL SUBOPT_0x1F
                 ;            putchar(temp_voltage/100 + 48);
00052b 940e 0dc0 	CALL SUBOPT_0x1D
00052d e6e4      	LDI  R30,LOW(100)
00052e e0f0      	LDI  R31,HIGH(100)
00052f 940e 0dfb 	CALL SUBOPT_0x27
                 ;            temp_voltage %= 100;
000531 940e 0dc0 	CALL SUBOPT_0x1D
000533 e6e4      	LDI  R30,LOW(100)
000534 e0f0      	LDI  R31,HIGH(100)
000535 940e 0dc9 	CALL SUBOPT_0x1F
                 ;            putchar(temp_voltage/10 + 48);
000537 940e 0dc0 	CALL SUBOPT_0x1D
000539 e0ea      	LDI  R30,LOW(10)
00053a e0f0      	LDI  R31,HIGH(10)
00053b 940e 0dfb 	CALL SUBOPT_0x27
                 ;            temp_voltage %= 10;
00053d 940e 0dc0 	CALL SUBOPT_0x1D
00053f e0ea      	LDI  R30,LOW(10)
000540 e0f0      	LDI  R31,HIGH(10)
000541 940e 0dc9 	CALL SUBOPT_0x1F
                 ;            putchar(temp_voltage + 48);
000543 91e0 055e 	LDS  R30,_temp_voltage
000545 5de0      	SUBI R30,-LOW(48)
000546 93ea      	ST   -Y,R30
000547 de56      	RCALL _putchar
                 ;            temp_voltage = 0;
000548 e0e0      	LDI  R30,LOW(0)
000549 93e0 055e 	STS  _temp_voltage,R30
00054b 93e0 055f 	STS  _temp_voltage+1,R30
                 ;
                 ;            putchar('>');
00054d 940e 0e01 	CALL SUBOPT_0x28
                 ;
                 ;            delay_ms(500);
00054f c01e      	RJMP _0xBF
                 ;            //txSetVoltage(set_voltage);
                 ;         }
                 ;         else
                 _0x70:
                 ;         {
                 ;            lcd_clear();
000550 940e 0ddb 	CALL SUBOPT_0x21
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_putsf("Set value should");
                +
000552 e0ea     +LDI R30 , LOW ( 2 * _0x0 + ( 90 ) )
000553 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 90 ) )
                 	__POINTW1FN _0x0,90
000554 940e 0de7 	CALL SUBOPT_0x24
                 ;            lcd_gotoxy(0,1);
000556 940e 0d63 	CALL SUBOPT_0x12
                 ;            lcd_putsf("be between 110-");
                +
000558 e1eb     +LDI R30 , LOW ( 2 * _0x0 + ( 107 ) )
000559 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 107 ) )
                 	__POINTW1FN _0x0,107
00055a 940e 0de7 	CALL SUBOPT_0x24
                 ;            lcd_gotoxy(0,2);
00055c 940e 0e08 	CALL SUBOPT_0x29
                 ;            lcd_putsf("135 volts");
                +
00055e e2eb     +LDI R30 , LOW ( 2 * _0x0 + ( 123 ) )
00055f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW1FN _0x0,123
000560 940e 0de7 	CALL SUBOPT_0x24
                 ;            temp_voltage = 000;
000562 e0e0      	LDI  R30,LOW(0)
000563 93e0 055e 	STS  _temp_voltage,R30
000565 93e0 055f 	STS  _temp_voltage+1,R30
                 ;            Screen = 30;
000567 e1ee      	LDI  R30,LOW(30)
000568 e0f0      	LDI  R31,HIGH(30)
000569 012f      	MOVW R4,R30
                 ;            flag = 11;
00056a 940e 0df4 	CALL SUBOPT_0x26
                 ;            delay_ms(1000);
00056c eee8      	LDI  R30,LOW(1000)
00056d e0f3      	LDI  R31,HIGH(1000)
                 _0xBF:
00056e 93fa      	ST   -Y,R31
00056f 93ea      	ST   -Y,R30
000570 940e 0edc 	CALL _delay_ms
                 ;         }
                 ;
                 ;        }
                 ;
                 ;    if (PIND.2 == 0)                                            //ESCAPE 4
                 _0x6C:
000572 9982      	SBIC 0x10,2
000573 c00e      	RJMP _0x75
                 ;       {
                 ;        while(PIND.2 == 0);
                 _0x76:
000574 9b82      	SBIS 0x10,2
000575 cffe      	RJMP _0x76
                 ;        flag = 11;
000576 940e 0df4 	CALL SUBOPT_0x26
                 ;        if(Screen > 100)
000578 940e 0d95 	CALL SUBOPT_0x1A
00057a f41c      	BRGE _0x79
                 ;        {Screen = Screen/10;}
00057b 940e 0d9a 	CALL SUBOPT_0x1B
00057d c003      	RJMP _0xC0
                 ;        else
                 _0x79:
                 ;        {Screen = (Screen/10)-1;}
00057e 940e 0d9a 	CALL SUBOPT_0x1B
000580 9731      	SBIW R30,1
                 _0xC0:
000581 012f      	MOVW R4,R30
                 ;        //flag = 1;
                 ;       }
                 ;}
                 _0x75:
000582 8119      	LDD  R17,Y+1
000583 8108      	LDD  R16,Y+0
000584 940c 0a9b 	JMP  _0x2120006
                 
                 	.DSEG
                 _0x73:
000502           	.BYTE 0x10
                 ;
                 ;void input_current(int next)
                 ;{
                 
                 	.CSEG
                 _input_current:
                 ;
                 ;    int change = pow(10,(next-Pointer_horiz-1));
                 ;    pointer_display_horiz();
000586 940e 0da0 	CALL SUBOPT_0x1C
                 ;	next -> Y+2
                 ;	change -> R16,R17
                 ;    delay_ms(100);
                 ;    if (PINE.7 == 0)                                            //UP     1
000588 990f      	SBIC 0x1,7
000589 c01c      	RJMP _0x7B
                 ;       {
                 ;        while(PINE.7 == 0);
                 _0x7C:
00058a 9b0f      	SBIS 0x1,7
00058b cffe      	RJMP _0x7C
                 ;        if(change == 1)
00058c e0e1      	LDI  R30,LOW(1)
00058d e0f0      	LDI  R31,HIGH(1)
00058e 17e0      	CP   R30,R16
00058f 07f1      	CPC  R31,R17
000590 f431      	BRNE _0x7F
                 ;        {temp_current = temp_current + (change);}
000591 01f8      	MOVW R30,R16
000592 940e 0e0b 	CALL SUBOPT_0x2A
000594 0fea      	ADD  R30,R26
000595 1ffb      	ADC  R31,R27
000596 c005      	RJMP _0xC1
                 ;        else
                 _0x7F:
                 ;        {temp_current = temp_current + 1 + (change);}
000597 940e 0d83 	CALL SUBOPT_0x17
000599 9631      	ADIW R30,1
00059a 0fe0      	ADD  R30,R16
00059b 1ff1      	ADC  R31,R17
                 _0xC1:
00059c 93e0 0560 	STS  _temp_current,R30
00059e 93f0 0561 	STS  _temp_current+1,R31
                 ;        temp_current = temp_current % 1000;
0005a0 940e 0e10 	CALL SUBOPT_0x2B
0005a2 940e 0e14 	CALL SUBOPT_0x2C
                 ;        show_current();
0005a4 debc      	RCALL _show_current
                 ;        pointer_display_horiz();
0005a5 de84      	RCALL _pointer_display_horiz
                 ;       }
                 ;
                 ;    if (PINE.5 == 0)                                            //Next   2
                 _0x7B:
0005a6 990d      	SBIC 0x1,5
0005a7 c004      	RJMP _0x81
                 ;       {
                 ;        while(PINE.5 == 0);
                 _0x82:
0005a8 9b0d      	SBIS 0x1,5
0005a9 cffe      	RJMP _0x82
                 ;        Pointer_horiz++;
0005aa 940e 0dd0 	CALL SUBOPT_0x20
                 ;
                 ;        Pointer_horiz = Pointer_horiz % next;
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINB.3 == 0)                                             //ENTER 3
                 _0x81:
0005ac 99b3      	SBIC 0x16,3
0005ad c077      	RJMP _0x85
                 ;        {
                 ;         while(PINB.3 == 0);
                 _0x86:
0005ae 9bb3      	SBIS 0x16,3
0005af cffe      	RJMP _0x86
                 ;         if(10 <= temp_current && temp_current <= 20)
0005b0 940e 0d83 	CALL SUBOPT_0x17
0005b2 973a      	SBIW R30,10
0005b3 f024      	BRLT _0x8A
0005b4 940e 0e0b 	CALL SUBOPT_0x2A
0005b6 9755      	SBIW R26,21
0005b7 f00c      	BRLT _0x8B
                 _0x8A:
0005b8 c04a      	RJMP _0x89
                 _0x8B:
                 ;         {
                 ;            lcd_clear();
0005b9 940e 0ddb 	CALL SUBOPT_0x21
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_puts("Current set to:");
                +
0005bb e1e2     +LDI R30 , LOW ( _0x8C + ( 0 ) )
0005bc e0f5     +LDI R31 , HIGH ( _0x8C + ( 0 ) )
                 	__POINTW1MN _0x8C,0
0005bd 940e 0dde 	CALL SUBOPT_0x22
                 ;            lcd_gotoxy(3,1);
0005bf e0e3      	LDI  R30,LOW(3)
0005c0 940e 0de2 	CALL SUBOPT_0x23
                 ;            lcd_putsf("A");
                +
0005c2 e4e5     +LDI R30 , LOW ( 2 * _0x0 + ( 149 ) )
0005c3 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 149 ) )
                 	__POINTW1FN _0x0,149
0005c4 940e 0de7 	CALL SUBOPT_0x24
                 ;            show_current();
0005c6 de9a      	RCALL _show_current
                 ;            set_current = temp_current;
0005c7 940e 0d83 	CALL SUBOPT_0x17
0005c9 940e 10c2 	CALL __CWD1
0005cb 940e 0e1b 	CALL SUBOPT_0x2D
                 ;            flag = 11;
0005cd 940e 0df4 	CALL SUBOPT_0x26
                 ;            Screen = 30;
0005cf e1ee      	LDI  R30,LOW(30)
0005d0 e0f0      	LDI  R31,HIGH(30)
0005d1 012f      	MOVW R4,R30
                 ;
                 ;          xmitString("<015-");
                +
0005d2 e4e7     +LDI R30 , LOW ( 2 * _0x0 + ( 151 ) )
0005d3 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 151 ) )
                 	__POINTW1FN _0x0,151
0005d4 940e 0ceb 	CALL SUBOPT_0x1
                 ;
                 ;            putchar(temp_current/1000 + 48);
0005d6 940e 0e10 	CALL SUBOPT_0x2B
0005d8 940e 0dfb 	CALL SUBOPT_0x27
                 ;            temp_current %= 1000;
0005da 940e 0e10 	CALL SUBOPT_0x2B
0005dc 940e 0e14 	CALL SUBOPT_0x2C
                 ;            putchar(temp_current/100 + 48);
0005de 940e 0e0b 	CALL SUBOPT_0x2A
0005e0 e6e4      	LDI  R30,LOW(100)
0005e1 e0f0      	LDI  R31,HIGH(100)
0005e2 940e 0dfb 	CALL SUBOPT_0x27
                 ;            temp_current %= 100;
0005e4 940e 0e0b 	CALL SUBOPT_0x2A
0005e6 e6e4      	LDI  R30,LOW(100)
0005e7 e0f0      	LDI  R31,HIGH(100)
0005e8 940e 0e14 	CALL SUBOPT_0x2C
                 ;            putchar(temp_current/10 + 48);
0005ea 940e 0e0b 	CALL SUBOPT_0x2A
0005ec e0ea      	LDI  R30,LOW(10)
0005ed e0f0      	LDI  R31,HIGH(10)
0005ee 940e 0dfb 	CALL SUBOPT_0x27
                 ;            temp_current %= 10;
0005f0 940e 0e0b 	CALL SUBOPT_0x2A
0005f2 e0ea      	LDI  R30,LOW(10)
0005f3 e0f0      	LDI  R31,HIGH(10)
0005f4 940e 0e14 	CALL SUBOPT_0x2C
                 ;            putchar(temp_current + 48);
0005f6 91e0 0560 	LDS  R30,_temp_current
0005f8 5de0      	SUBI R30,-LOW(48)
0005f9 93ea      	ST   -Y,R30
0005fa dda3      	RCALL _putchar
                 ;            temp_current = 0;
0005fb e0e0      	LDI  R30,LOW(0)
0005fc 93e0 0560 	STS  _temp_current,R30
0005fe 93e0 0561 	STS  _temp_current+1,R30
                 ;
                 ;            putchar('>');
000600 940e 0e01 	CALL SUBOPT_0x28
                 ;
                 ;            delay_ms(500);
000602 c01e      	RJMP _0xC2
                 ;
                 ;         }
                 ;         else
                 _0x89:
                 ;         {
                 ;            lcd_clear();
000603 940e 0ddb 	CALL SUBOPT_0x21
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_putsf("Set value should");
                +
000605 e0ea     +LDI R30 , LOW ( 2 * _0x0 + ( 90 ) )
000606 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 90 ) )
                 	__POINTW1FN _0x0,90
000607 940e 0de7 	CALL SUBOPT_0x24
                 ;            lcd_gotoxy(0,1);
000609 940e 0d63 	CALL SUBOPT_0x12
                 ;            lcd_putsf("be between 10-");
                +
00060b e4ed     +LDI R30 , LOW ( 2 * _0x0 + ( 157 ) )
00060c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 157 ) )
                 	__POINTW1FN _0x0,157
00060d 940e 0de7 	CALL SUBOPT_0x24
                 ;            lcd_gotoxy(0,2);
00060f 940e 0e08 	CALL SUBOPT_0x29
                 ;            lcd_putsf("20 amps");
                +
000611 e5ec     +LDI R30 , LOW ( 2 * _0x0 + ( 172 ) )
000612 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 172 ) )
                 	__POINTW1FN _0x0,172
000613 940e 0de7 	CALL SUBOPT_0x24
                 ;            temp_current = 000;
000615 e0e0      	LDI  R30,LOW(0)
000616 93e0 0560 	STS  _temp_current,R30
000618 93e0 0561 	STS  _temp_current+1,R30
                 ;            Screen = 30;
00061a e1ee      	LDI  R30,LOW(30)
00061b e0f0      	LDI  R31,HIGH(30)
00061c 012f      	MOVW R4,R30
                 ;            flag = 11;
00061d 940e 0df4 	CALL SUBOPT_0x26
                 ;            delay_ms(1000);
00061f eee8      	LDI  R30,LOW(1000)
000620 e0f3      	LDI  R31,HIGH(1000)
                 _0xC2:
000621 93fa      	ST   -Y,R31
000622 93ea      	ST   -Y,R30
000623 940e 0edc 	CALL _delay_ms
                 ;         }
                 ;        }
                 ;
                 ;    if (PIND.2 == 0)                                            //ESCAPE 4
                 _0x85:
000625 9982      	SBIC 0x10,2
000626 c00e      	RJMP _0x8E
                 ;       {
                 ;        while(PIND.2 == 0);
                 _0x8F:
000627 9b82      	SBIS 0x10,2
000628 cffe      	RJMP _0x8F
                 ;        flag = 11;
000629 940e 0df4 	CALL SUBOPT_0x26
                 ;        if(Screen > 100)
00062b 940e 0d95 	CALL SUBOPT_0x1A
00062d f41c      	BRGE _0x92
                 ;        {Screen = Screen/10;}
00062e 940e 0d9a 	CALL SUBOPT_0x1B
000630 c003      	RJMP _0xC3
                 ;        else
                 _0x92:
                 ;        {Screen = (Screen/10)-1;}
000631 940e 0d9a 	CALL SUBOPT_0x1B
000633 9731      	SBIW R30,1
                 _0xC3:
000634 012f      	MOVW R4,R30
                 ;        //flag = 1;
                 ;       }
                 ;
                 ;
                 ;}
                 _0x8E:
000635 8119      	LDD  R17,Y+1
000636 8108      	LDD  R16,Y+0
000637 940c 0a9b 	JMP  _0x2120006
                 
                 	.DSEG
                 _0x8C:
000512           	.BYTE 0x10
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;void Screen1()
                 ; 0000 0102 {
                 
                 	.CSEG
                 _Screen1:
                 ; 0000 0103     //Screen = 1;
                 ; 0000 0104     Pointer_horiz = 0;
000639 2488      	CLR  R8
00063a 2499      	CLR  R9
                 ; 0000 0105     Pointer_vert = 0;
00063b 24aa      	CLR  R10
00063c 24bb      	CLR  R11
                 ; 0000 0106     lcd_clear();
00063d 940e 0c62 	CALL _lcd_clear
                 ; 0000 0107     lcd_gotoxy(0,1);
00063f 940e 0d63 	CALL SUBOPT_0x12
                 ; 0000 0108     lcd_puts("  HIGH WATTAGE  ");
                +
000641 e2e2     +LDI R30 , LOW ( _0x94 + ( 0 ) )
000642 e0f5     +LDI R31 , HIGH ( _0x94 + ( 0 ) )
                 	__POINTW1MN _0x94,0
000643 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 0109     lcd_gotoxy(0,2);
000645 940e 0e08 	CALL SUBOPT_0x29
                 ; 0000 010A     lcd_puts(" BATTERY CHARGER");
                +
000647 e3e3     +LDI R30 , LOW ( _0x94 + ( 17 ) )
000648 e0f5     +LDI R31 , HIGH ( _0x94 + ( 17 ) )
                 	__POINTW1MN _0x94,17
000649 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 010B     delay_ms(1000);
00064b eee8      	LDI  R30,LOW(1000)
00064c e0f3      	LDI  R31,HIGH(1000)
00064d 940e 0e24 	CALL SUBOPT_0x2E
                 ; 0000 010C 
                 ; 0000 010D 
                 ; 0000 010E     // default current and voltage value sent to DSP at start
                 ; 0000 010F     set_voltage = 110;
                +
00064f e6ee     +LDI R30 , LOW ( 0x6E )
000650 e0f0     +LDI R31 , HIGH ( 0x6E )
000651 e060     +LDI R22 , BYTE3 ( 0x6E )
000652 e070     +LDI R23 , BYTE4 ( 0x6E )
                 	__GETD1N 0x6E
000653 940e 0deb 	CALL SUBOPT_0x25
                 ; 0000 0110     xmitString("<014-0110");
                +
000655 e8e6     +LDI R30 , LOW ( 2 * _0x0 + ( 214 ) )
000656 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 214 ) )
                 	__POINTW1FN _0x0,214
000657 940e 0ceb 	CALL SUBOPT_0x1
                 ; 0000 0111 
                 ; 0000 0112     set_current = 10;
                +
000659 e0ea     +LDI R30 , LOW ( 0xA )
00065a e0f0     +LDI R31 , HIGH ( 0xA )
00065b e060     +LDI R22 , BYTE3 ( 0xA )
00065c e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
00065d 940e 0e1b 	CALL SUBOPT_0x2D
                 ; 0000 0113     xmitString("<015-0010");
                +
00065f e9e0     +LDI R30 , LOW ( 2 * _0x0 + ( 224 ) )
000660 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 224 ) )
                 	__POINTW1FN _0x0,224
000661 940e 0ceb 	CALL SUBOPT_0x1
                 ; 0000 0114 
                 ; 0000 0115     Screen = 2;
000663 e0e2      	LDI  R30,LOW(2)
000664 e0f0      	LDI  R31,HIGH(2)
000665 012f      	MOVW R4,R30
                 ; 0000 0116     Current_Screen = 1;
000666 e0e1      	LDI  R30,LOW(1)
000667 e0f0      	LDI  R31,HIGH(1)
000668 013f      	MOVW R6,R30
                 ; 0000 0117     main_screen_trigger = 1;
000669 940e 0d8e 	CALL SUBOPT_0x19
                 ; 0000 0118     current_mainscreen_flag = 1;
                 ; 0000 0119 }
00066b 9508      	RET
                 
                 	.DSEG
                 _0x94:
000522           	.BYTE 0x22
                 ;
                 ;void Screen2()
                 ; 0000 011C {
                 
                 	.CSEG
                 _Screen2:
                 ; 0000 011D     lcd_clear();
00066c 940e 0c62 	CALL _lcd_clear
                 ; 0000 011E     //Screen = 2;
                 ; 0000 011F     Pointer_vert = 0;
00066e 24aa      	CLR  R10
00066f 24bb      	CLR  R11
                 ; 0000 0120     Pointer_horiz= 0;
000670 2488      	CLR  R8
000671 2499      	CLR  R9
                 ; 0000 0121 
                 ; 0000 0122         lcd_gotoxy(1,0);
000672 940e 0e28 	CALL SUBOPT_0x2F
                 ; 0000 0123         lcd_putsf("Set Parameters");
                +
000674 e9ea     +LDI R30 , LOW ( 2 * _0x0 + ( 234 ) )
000675 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 234 ) )
                 	__POINTW1FN _0x0,234
000676 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 0124         n = 1;
000678 e0e1      	LDI  R30,LOW(1)
000679 e0f0      	LDI  R31,HIGH(1)
00067a 93e0 057a 	STS  _n,R30
00067c 93f0 057b 	STS  _n+1,R31
                 ; 0000 0125         Current_Screen = 2;
00067e e0e2      	LDI  R30,LOW(2)
00067f e0f0      	LDI  R31,HIGH(2)
000680 c054      	RJMP _0x2120009
                 ; 0000 0126 }
                 ;
                 ;
                 ;
                 ;void Screen30()
                 ; 0000 012B {
                 _Screen30:
                 ; 0000 012C     lcd_clear();
000681 940e 0c62 	CALL _lcd_clear
                 ; 0000 012D     lcd_gotoxy(3,3);
000683 e0e3      	LDI  R30,LOW(3)
000684 940e 0d69 	CALL SUBOPT_0x13
                 ; 0000 012E     lcd_putsf("PARAMETERS");
                +
000686 eae9     +LDI R30 , LOW ( 2 * _0x0 + ( 249 ) )
000687 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 249 ) )
                 	__POINTW1FN _0x0,249
000688 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 012F     lcd_gotoxy(1,0);
00068a 940e 0e28 	CALL SUBOPT_0x2F
                 ; 0000 0130     lcd_putsf("Voltage (VOLTS)");
                +
00068c ebe4     +LDI R30 , LOW ( 2 * _0x0 + ( 260 ) )
00068d e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 260 ) )
                 	__POINTW1FN _0x0,260
00068e 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 0131     lcd_gotoxy(1,1);
000690 e0e1      	LDI  R30,LOW(1)
000691 940e 0de2 	CALL SUBOPT_0x23
                 ; 0000 0132     lcd_putsf("Current (AMPS)");
                +
000693 ece4     +LDI R30 , LOW ( 2 * _0x0 + ( 276 ) )
000694 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 276 ) )
                 	__POINTW1FN _0x0,276
000695 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 0133     n = 2;
000697 e0e2      	LDI  R30,LOW(2)
000698 e0f0      	LDI  R31,HIGH(2)
000699 93e0 057a 	STS  _n,R30
00069b 93f0 057b 	STS  _n+1,R31
                 ; 0000 0134     Current_Screen = 30;
00069d e1ee      	LDI  R30,LOW(30)
00069e e0f0      	LDI  R31,HIGH(30)
00069f c035      	RJMP _0x2120009
                 ; 0000 0135 }
                 ;
                 ;void Screen300()      //SET VOLTAGE
                 ; 0000 0138 {
                 _Screen300:
                 ; 0000 0139     lcd_clear();
0006a0 940e 0ddb 	CALL SUBOPT_0x21
                 ; 0000 013A     lcd_gotoxy(0,0);
                 ; 0000 013B     lcd_putsf("Set voltage:");
                +
0006a2 ede3     +LDI R30 , LOW ( 2 * _0x0 + ( 291 ) )
0006a3 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 291 ) )
                 	__POINTW1FN _0x0,291
0006a4 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 013C     show_volt();
0006a6 ddaf      	RCALL _show_volt
                 ; 0000 013D     while(flag != 11)
                 _0x95:
0006a7 91a0 0578 	LDS  R26,_flag
0006a9 91b0 0579 	LDS  R27,_flag+1
0006ab 971b      	SBIW R26,11
0006ac f031      	BREQ _0x97
                 ; 0000 013E     {
                 ; 0000 013F         input_volt(3);
0006ad e0e3      	LDI  R30,LOW(3)
0006ae e0f0      	LDI  R31,HIGH(3)
0006af 93fa      	ST   -Y,R31
0006b0 93ea      	ST   -Y,R30
0006b1 de1d      	RCALL _input_volt
                 ; 0000 0140     }
0006b2 cff4      	RJMP _0x95
                 _0x97:
                 ; 0000 0141     flag = 0;
0006b3 e0e0      	LDI  R30,LOW(0)
0006b4 93e0 0578 	STS  _flag,R30
0006b6 93e0 0579 	STS  _flag+1,R30
                 ; 0000 0142     Current_Screen = 300;
0006b8 e2ec      	LDI  R30,LOW(300)
0006b9 e0f1      	LDI  R31,HIGH(300)
0006ba c01a      	RJMP _0x2120009
                 ; 0000 0143 }
                 ;void Screen301()     //SET CURRENT
                 ; 0000 0145 {
                 _Screen301:
                 ; 0000 0146 
                 ; 0000 0147     lcd_clear();
0006bb 940e 0ddb 	CALL SUBOPT_0x21
                 ; 0000 0148     lcd_gotoxy(0,0);
                 ; 0000 0149     lcd_putsf("Set current:");
                +
0006bd eee0     +LDI R30 , LOW ( 2 * _0x0 + ( 304 ) )
0006be e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 304 ) )
                 	__POINTW1FN _0x0,304
0006bf 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 014A     show_current();
0006c1 dd9f      	RCALL _show_current
                 ; 0000 014B     while(flag != 11)
                 _0x98:
0006c2 91a0 0578 	LDS  R26,_flag
0006c4 91b0 0579 	LDS  R27,_flag+1
0006c6 971b      	SBIW R26,11
0006c7 f031      	BREQ _0x9A
                 ; 0000 014C     {
                 ; 0000 014D         input_current(2);
0006c8 e0e2      	LDI  R30,LOW(2)
0006c9 e0f0      	LDI  R31,HIGH(2)
0006ca 93fa      	ST   -Y,R31
0006cb 93ea      	ST   -Y,R30
0006cc deb9      	RCALL _input_current
                 ; 0000 014E     }
0006cd cff4      	RJMP _0x98
                 _0x9A:
                 ; 0000 014F     flag = 0;
0006ce e0e0      	LDI  R30,LOW(0)
0006cf 93e0 0578 	STS  _flag,R30
0006d1 93e0 0579 	STS  _flag+1,R30
                 ; 0000 0150     Current_Screen = 301;
0006d3 e2ed      	LDI  R30,LOW(301)
0006d4 e0f1      	LDI  R31,HIGH(301)
                 _0x2120009:
0006d5 013f      	MOVW R6,R30
                 ; 0000 0151 }
0006d6 9508      	RET
                 ;
                 ;
                 ;void Main_Screen()
                 ; 0000 0155 {
                 _Main_Screen:
                 ; 0000 0156     lcd_clear();
0006d7 940e 0ddb 	CALL SUBOPT_0x21
                 ; 0000 0157 
                 ; 0000 0158     lcd_gotoxy(0,0);
                 ; 0000 0159     lcd_putsf("SV:");
                +
0006d9 eeed     +LDI R30 , LOW ( 2 * _0x0 + ( 317 ) )
0006da e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 317 ) )
                 	__POINTW1FN _0x0,317
0006db 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 015A 
                 ; 0000 015B     lcd_gotoxy(8,0);
0006dd e0e8      	LDI  R30,LOW(8)
0006de 940e 0e2e 	CALL SUBOPT_0x30
                 ; 0000 015C     lcd_putsf("SBC:");
                +
0006e0 efe1     +LDI R30 , LOW ( 2 * _0x0 + ( 321 ) )
0006e1 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 321 ) )
                 	__POINTW1FN _0x0,321
0006e2 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 015D 
                 ; 0000 015E     lcd_gotoxy(0,1);
0006e4 940e 0d63 	CALL SUBOPT_0x12
                 ; 0000 015F     lcd_putsf("AV:");
                +
0006e6 efe6     +LDI R30 , LOW ( 2 * _0x0 + ( 326 ) )
0006e7 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 326 ) )
                 	__POINTW1FN _0x0,326
0006e8 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 0160 
                 ; 0000 0161     lcd_gotoxy(8,1);
0006ea e0e8      	LDI  R30,LOW(8)
0006eb 940e 0de2 	CALL SUBOPT_0x23
                 ; 0000 0162     lcd_putsf("ABC:");
                +
0006ed efea     +LDI R30 , LOW ( 2 * _0x0 + ( 330 ) )
0006ee e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 330 ) )
                 	__POINTW1FN _0x0,330
0006ef 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 0163 
                 ; 0000 0164     lcd_gotoxy(0,2);
0006f1 940e 0e08 	CALL SUBOPT_0x29
                 ; 0000 0165     lcd_putsf("AIV:");
                +
0006f3 efef     +LDI R30 , LOW ( 2 * _0x0 + ( 335 ) )
0006f4 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 335 ) )
                 	__POINTW1FN _0x0,335
0006f5 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 0166 
                 ; 0000 0167     lcd_gotoxy(8,2);
0006f7 e0e8      	LDI  R30,LOW(8)
0006f8 93ea      	ST   -Y,R30
0006f9 940e 0d54 	CALL SUBOPT_0xF
                 ; 0000 0168     lcd_putsf("AOC:");
                +
0006fb e0e4     +LDI R30 , LOW ( 2 * _0x0 + ( 340 ) )
0006fc e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 340 ) )
                 	__POINTW1FN _0x0,340
0006fd 940e 0de7 	CALL SUBOPT_0x24
                 ; 0000 0169 
                 ; 0000 016A     lcd_gotoxy(3,0);
0006ff e0e3      	LDI  R30,LOW(3)
000700 940e 0e2e 	CALL SUBOPT_0x30
                 ; 0000 016B     sprintf(disp_set_voltage,"%03d",set_voltage);
000702 e9e5      	LDI  R30,LOW(_disp_set_voltage)
000703 e0f5      	LDI  R31,HIGH(_disp_set_voltage)
000704 940e 0d6e 	CALL SUBOPT_0x14
000706 91e0 0562 	LDS  R30,_set_voltage
000708 91f0 0563 	LDS  R31,_set_voltage+1
00070a 9160 0564 	LDS  R22,_set_voltage+2
00070c 9170 0565 	LDS  R23,_set_voltage+3
00070e 940e 0e33 	CALL SUBOPT_0x31
                 ; 0000 016C     lcd_puts(disp_set_voltage);
000710 e9e5      	LDI  R30,LOW(_disp_set_voltage)
000711 e0f5      	LDI  R31,HIGH(_disp_set_voltage)
000712 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 016D 
                 ; 0000 016E     lcd_gotoxy(12,0);
000714 e0ec      	LDI  R30,LOW(12)
000715 940e 0e2e 	CALL SUBOPT_0x30
                 ; 0000 016F     sprintf(disp_set_btcurrent,"%03d",set_current);                           //12220
000717 e9e8      	LDI  R30,LOW(_disp_set_btcurrent)
000718 e0f5      	LDI  R31,HIGH(_disp_set_btcurrent)
000719 940e 0d6e 	CALL SUBOPT_0x14
00071b 91e0 0566 	LDS  R30,_set_current
00071d 91f0 0567 	LDS  R31,_set_current+1
00071f 9160 0568 	LDS  R22,_set_current+2
000721 9170 0569 	LDS  R23,_set_current+3
000723 940e 0e33 	CALL SUBOPT_0x31
                 ; 0000 0170     // sprintf(disp_set_btcurrent,"%03d",set_current);
                 ; 0000 0171     lcd_puts(disp_set_btcurrent);
000725 e9e8      	LDI  R30,LOW(_disp_set_btcurrent)
000726 e0f5      	LDI  R31,HIGH(_disp_set_btcurrent)
                 _0x2120008:
000727 93fa      	ST   -Y,R31
000728 93ea      	ST   -Y,R30
000729 940e 0c92 	CALL _lcd_puts
                 ; 0000 0172 
                 ; 0000 0173    // current_mainscreen_flag = 0;
                 ; 0000 0174 
                 ; 0000 0175 
                 ; 0000 0176 
                 ; 0000 0177 
                 ; 0000 0178 }
00072b 9508      	RET
                 ;
                 ;void Screen_sel()
                 ; 0000 017B {
                 _Screen_sel:
                 ; 0000 017C 
                 ; 0000 017D     if (Screen == 1)
00072c e0e1      	LDI  R30,LOW(1)
00072d e0f0      	LDI  R31,HIGH(1)
00072e 15e4      	CP   R30,R4
00072f 05f5      	CPC  R31,R5
000730 f409      	BRNE _0x9B
                 ; 0000 017E     {
                 ; 0000 017F         Screen1();
000731 df07      	RCALL _Screen1
                 ; 0000 0180     }
                 ; 0000 0181     if (Screen == 2)
                 _0x9B:
000732 e0e2      	LDI  R30,LOW(2)
000733 e0f0      	LDI  R31,HIGH(2)
000734 15e4      	CP   R30,R4
000735 05f5      	CPC  R31,R5
000736 f409      	BRNE _0x9C
                 ; 0000 0182     {
                 ; 0000 0183         Screen2();
000737 df34      	RCALL _Screen2
                 ; 0000 0184     }
                 ; 0000 0185     if (Screen == 30)
                 _0x9C:
000738 e1ee      	LDI  R30,LOW(30)
000739 e0f0      	LDI  R31,HIGH(30)
00073a 15e4      	CP   R30,R4
00073b 05f5      	CPC  R31,R5
00073c f409      	BRNE _0x9D
                 ; 0000 0186     {
                 ; 0000 0187         Screen30();
00073d df43      	RCALL _Screen30
                 ; 0000 0188     }
                 ; 0000 0189     if (Screen == 300)
                 _0x9D:
00073e e2ec      	LDI  R30,LOW(300)
00073f e0f1      	LDI  R31,HIGH(300)
000740 15e4      	CP   R30,R4
000741 05f5      	CPC  R31,R5
000742 f409      	BRNE _0x9E
                 ; 0000 018A     {
                 ; 0000 018B         Screen300();
000743 df5c      	RCALL _Screen300
                 ; 0000 018C     }
                 ; 0000 018D     if (Screen == 301)
                 _0x9E:
000744 e2ed      	LDI  R30,LOW(301)
000745 e0f1      	LDI  R31,HIGH(301)
000746 15e4      	CP   R30,R4
000747 05f5      	CPC  R31,R5
000748 f409      	BRNE _0x9F
                 ; 0000 018E     {
                 ; 0000 018F         Screen301();
000749 df71      	RCALL _Screen301
                 ; 0000 0190     }
                 ; 0000 0191 
                 ; 0000 0192 }
                 _0x9F:
00074a 9508      	RET
                 ;
                 ;void machine_state()
                 ; 0000 0195 {
                 _machine_state:
                 ; 0000 0196      if(fault_flag == 1)
00074b 940e 0e3a 	CALL SUBOPT_0x32
00074d f439      	BRNE _0xA0
                 ; 0000 0197      {
                 ; 0000 0198         mainOff();
00074e da54      	RCALL _mainOff
                 ; 0000 0199         on_pressed = 0;
00074f e0e0      	LDI  R30,LOW(0)
000750 93e0 062a 	STS  _on_pressed,R30
000752 93e0 062b 	STS  _on_pressed+1,R30
                 ; 0000 019A      }
                 ; 0000 019B      else
000754 c01e      	RJMP _0xA1
                 _0xA0:
                 ; 0000 019C      {
                 ; 0000 019D         PORTF |= 0x40;
000755 91e0 0062 	LDS  R30,98
000757 64e0      	ORI  R30,0x40
000758 93e0 0062 	STS  98,R30
                 ; 0000 019E 
                 ; 0000 019F         if(on_pressed == 1)
00075a 91a0 062a 	LDS  R26,_on_pressed
00075c 91b0 062b 	LDS  R27,_on_pressed+1
00075e 9711      	SBIW R26,1
00075f f439      	BRNE _0xA2
                 ; 0000 01A0         {
                 ; 0000 01A1             mainOn();
000760 da3f      	RCALL _mainOn
                 ; 0000 01A2             on_pressed = 0;
000761 e0e0      	LDI  R30,LOW(0)
000762 93e0 062a 	STS  _on_pressed,R30
000764 93e0 062b 	STS  _on_pressed+1,R30
                 ; 0000 01A3             //status = 1;
                 ; 0000 01A4         }
                 ; 0000 01A5         else if(off_pressed == 1)
000766 c00c      	RJMP _0xA3
                 _0xA2:
000767 91a0 062c 	LDS  R26,_off_pressed
000769 91b0 062d 	LDS  R27,_off_pressed+1
00076b 9711      	SBIW R26,1
00076c f431      	BRNE _0xA4
                 ; 0000 01A6         {
                 ; 0000 01A7             mainOff();
00076d da35      	RCALL _mainOff
                 ; 0000 01A8             off_pressed = 0;
00076e e0e0      	LDI  R30,LOW(0)
00076f 93e0 062c 	STS  _off_pressed,R30
000771 93e0 062d 	STS  _off_pressed+1,R30
                 ; 0000 01A9             //status = 0;
                 ; 0000 01AA         }
                 ; 0000 01AB      }
                 _0xA4:
                 _0xA3:
                 _0xA1:
                 ; 0000 01AC 
                 ; 0000 01AD //    if(data_received == 1)
                 ; 0000 01AE //    {
                 ; 0000 01AF //        recOp();
                 ; 0000 01B0 //        data_received = 0;
                 ; 0000 01B1 //        ms_update_flag = 1;
                 ; 0000 01B2 //        //current_mainscreen_flag = 0;
                 ; 0000 01B3 //    }
                 ; 0000 01B4     if(reset_pressed == 1)
000773 91a0 062e 	LDS  R26,_reset_pressed
000775 91b0 062f 	LDS  R27,_reset_pressed+1
000777 9711      	SBIW R26,1
000778 f431      	BRNE _0xA5
                 ; 0000 01B5     {
                 ; 0000 01B6         resetFault();
000779 da2c      	RCALL _resetFault
                 ; 0000 01B7         reset_pressed = 0;
00077a e0e0      	LDI  R30,LOW(0)
00077b 93e0 062e 	STS  _reset_pressed,R30
00077d 93e0 062f 	STS  _reset_pressed+1,R30
                 ; 0000 01B8     }
                 ; 0000 01B9 
                 ; 0000 01BA 
                 ; 0000 01BB }
                 _0xA5:
00077f 9508      	RET
                 ;
                 ;void main(void)
                 ; 0000 01BE {
                 _main:
                 ; 0000 01BF PORTA=0x00;
000780 e0e0      	LDI  R30,LOW(0)
000781 bbeb      	OUT  0x1B,R30
                 ; 0000 01C0 DDRA=0x00;
000782 bbea      	OUT  0x1A,R30
                 ; 0000 01C1 
                 ; 0000 01C2 PORTB=0x08;
000783 e0e8      	LDI  R30,LOW(8)
000784 bbe8      	OUT  0x18,R30
                 ; 0000 01C3 DDRB=0x00;
000785 e0e0      	LDI  R30,LOW(0)
000786 bbe7      	OUT  0x17,R30
                 ; 0000 01C4 
                 ; 0000 01C5 PORTC=0x08;
000787 e0e8      	LDI  R30,LOW(8)
000788 bbe5      	OUT  0x15,R30
                 ; 0000 01C6 DDRC=0x08;
000789 bbe4      	OUT  0x14,R30
                 ; 0000 01C7 
                 ; 0000 01C8 PORTD=0xDC;
00078a edec      	LDI  R30,LOW(220)
00078b bbe2      	OUT  0x12,R30
                 ; 0000 01C9 DDRD=0x08;
00078c e0e8      	LDI  R30,LOW(8)
00078d bbe1      	OUT  0x11,R30
                 ; 0000 01CA 
                 ; 0000 01CB PORTE=0xFF;
00078e efef      	LDI  R30,LOW(255)
00078f b9e3      	OUT  0x3,R30
                 ; 0000 01CC DDRE=0x00;
000790 e0e0      	LDI  R30,LOW(0)
000791 b9e2      	OUT  0x2,R30
                 ; 0000 01CD 
                 ; 0000 01CE PORTF=0xFF;
000792 efef      	LDI  R30,LOW(255)
000793 93e0 0062 	STS  98,R30
                 ; 0000 01CF DDRF=0xFF;
000795 93e0 0061 	STS  97,R30
                 ; 0000 01D0 
                 ; 0000 01D1 PORTG=0x00;
000797 e0e0      	LDI  R30,LOW(0)
000798 93e0 0065 	STS  101,R30
                 ; 0000 01D2 DDRG=0x00;
00079a 93e0 0064 	STS  100,R30
                 ; 0000 01D3 
                 ; 0000 01D4 TCCR3A=0x00;
00079c 93e0 008b 	STS  139,R30
                 ; 0000 01D5 TCCR3B=0x09;
00079e e0e9      	LDI  R30,LOW(9)
00079f 93e0 008a 	STS  138,R30
                 ; 0000 01D6 TCNT3H=0x00;
0007a1 e0e0      	LDI  R30,LOW(0)
0007a2 93e0 0089 	STS  137,R30
                 ; 0000 01D7 TCNT3L=0x00;
0007a4 93e0 0088 	STS  136,R30
                 ; 0000 01D8 ICR3H=0x00;
0007a6 93e0 0081 	STS  129,R30
                 ; 0000 01D9 ICR3L=0x00;
0007a8 93e0 0080 	STS  128,R30
                 ; 0000 01DA OCR3AH=0xFF;
0007aa efef      	LDI  R30,LOW(255)
0007ab 93e0 0087 	STS  135,R30
                 ; 0000 01DB OCR3AL=0xFF;
0007ad 93e0 0086 	STS  134,R30
                 ; 0000 01DC OCR3BH=0x00;
0007af e0e0      	LDI  R30,LOW(0)
0007b0 93e0 0085 	STS  133,R30
                 ; 0000 01DD OCR3BL=0x00;
0007b2 93e0 0084 	STS  132,R30
                 ; 0000 01DE OCR3CH=0x00;
0007b4 93e0 0083 	STS  131,R30
                 ; 0000 01DF OCR3CL=0x00;
0007b6 93e0 0082 	STS  130,R30
                 ; 0000 01E0 
                 ; 0000 01E1 // External Interrupt(s) initialization
                 ; 0000 01E2 //EICRA=0x00;
                 ; 0000 01E3 //EICRB=0xAA;
                 ; 0000 01E4 //EIMSK=0xF0;
                 ; 0000 01E5 //EIFR=0xF0;
                 ; 0000 01E6 
                 ; 0000 01E7 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01E8 TIMSK=0x00;
0007b8 bfe7      	OUT  0x37,R30
                 ; 0000 01E9 ETIMSK=0x04;
0007b9 e0e4      	LDI  R30,LOW(4)
0007ba 93e0 007d 	STS  125,R30
                 ; 0000 01EA 
                 ; 0000 01EB 
                 ; 0000 01EC // USART0 initialization
                 ; 0000 01ED // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01EE // USART0 Receiver: On
                 ; 0000 01EF // USART0 Transmitter: On
                 ; 0000 01F0 // USART0 Mode: Asynchronous
                 ; 0000 01F1 // USART0 Baud Rate: 9600
                 ; 0000 01F2 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
0007bc e0e0      	LDI  R30,LOW(0)
0007bd b9eb      	OUT  0xB,R30
                 ; 0000 01F3 UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0007be ede8      	LDI  R30,LOW(216)
0007bf b9ea      	OUT  0xA,R30
                 ; 0000 01F4 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
0007c0 e0e6      	LDI  R30,LOW(6)
0007c1 93e0 0095 	STS  149,R30
                 ; 0000 01F5 UBRR0H=0x00;
0007c3 e0e0      	LDI  R30,LOW(0)
0007c4 93e0 0090 	STS  144,R30
                 ; 0000 01F6 UBRR0L=0x33;
0007c6 e3e3      	LDI  R30,LOW(51)
0007c7 b9e9      	OUT  0x9,R30
                 ; 0000 01F7 
                 ; 0000 01F8 
                 ; 0000 01F9 
                 ; 0000 01FA lcd_init(16);
0007c8 e1e0      	LDI  R30,LOW(16)
0007c9 93ea      	ST   -Y,R30
0007ca 940e 0cb0 	CALL _lcd_init
                 ; 0000 01FB 
                 ; 0000 01FC // Global enable interrupts
                 ; 0000 01FD #asm("sei")
0007cc 9478      	sei
                 ; 0000 01FE 
                 ; 0000 01FF 
                 ; 0000 0200     while(1)
                 _0xA6:
                 ; 0000 0201         {
                 ; 0000 0202             if(fault_flag == 1)
0007cd 940e 0e3a 	CALL SUBOPT_0x32
0007cf f489      	BRNE _0xA9
                 ; 0000 0203             {
                 ; 0000 0204                 lcd_clear();
0007d0 940e 0ddb 	CALL SUBOPT_0x21
                 ; 0000 0205                 lcd_gotoxy(0,0);
                 ; 0000 0206                 lcd_puts("Fault ID:");
                +
0007d2 e4e4     +LDI R30 , LOW ( _0xAA + ( 0 ) )
0007d3 e0f5     +LDI R31 , HIGH ( _0xAA + ( 0 ) )
                 	__POINTW1MN _0xAA,0
0007d4 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 0207                 lcd_gotoxy(4,2);
0007d6 940e 0e40 	CALL SUBOPT_0x33
                 ; 0000 0208 
                 ; 0000 0209 
                 ; 0000 020A                 lcd_puts(fltArray);
0007d8 e8e6      	LDI  R30,LOW(_fltArray)
0007d9 e0f5      	LDI  R31,HIGH(_fltArray)
0007da 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 020B 
                 ; 0000 020C                 while(fault_flag == 1)
                 _0xAB:
0007dc 940e 0e3a 	CALL SUBOPT_0x32
0007de f411      	BRNE _0xAD
                 ; 0000 020D                 machine_state();
0007df df6b      	RCALL _machine_state
0007e0 cffb      	RJMP _0xAB
                 _0xAD:
                 ; 0000 020E }
                 ; 0000 020F 
                 ; 0000 0210             if (Screen == 1)        //runs only at start
                 _0xA9:
0007e1 e0e1      	LDI  R30,LOW(1)
0007e2 e0f0      	LDI  R31,HIGH(1)
0007e3 15e4      	CP   R30,R4
0007e4 05f5      	CPC  R31,R5
0007e5 f409      	BRNE _0xAE
                 ; 0000 0211             {Screen1();}
0007e6 de52      	RCALL _Screen1
                 ; 0000 0212 
                 ; 0000 0213 
                 ; 0000 0214 
                 ; 0000 0215             if (main_screen_trigger == 1) //| ms_update_flag == 1)
                 _0xAE:
0007e7 91a0 057c 	LDS  R26,_main_screen_trigger
0007e9 91b0 057d 	LDS  R27,_main_screen_trigger+1
0007eb 9711      	SBIW R26,1
0007ec f011      	BREQ PC+3
0007ed 940c 0890 	JMP _0xAF
                 ; 0000 0216             {
                 ; 0000 0217                 if(current_mainscreen_flag == 1)
0007ef 91a0 0580 	LDS  R26,_current_mainscreen_flag
0007f1 91b0 0581 	LDS  R27,_current_mainscreen_flag+1
0007f3 9711      	SBIW R26,1
0007f4 f409      	BRNE _0xB0
                 ; 0000 0218                 {Main_Screen();}      //Function to display all values
0007f5 dee1      	RCALL _Main_Screen
                 ; 0000 0219 
                 ; 0000 021A                 lcd_gotoxy(3,1);
                 _0xB0:
0007f6 e0e3      	LDI  R30,LOW(3)
0007f7 940e 0de2 	CALL SUBOPT_0x23
                 ; 0000 021B                 sprintf(disp_actual_voltage,"%03d",actual_voltage);
0007f9 e9ec      	LDI  R30,LOW(_disp_actual_voltage)
0007fa e0f5      	LDI  R31,HIGH(_disp_actual_voltage)
0007fb 940e 0d6e 	CALL SUBOPT_0x14
0007fd 91e0 056a 	LDS  R30,_actual_voltage_G000
0007ff 91f0 056b 	LDS  R31,_actual_voltage_G000+1
000801 940e 10c2 	CALL __CWD1
000803 940e 0e33 	CALL SUBOPT_0x31
                 ; 0000 021C                 lcd_puts("000");
                +
000805 e4ee     +LDI R30 , LOW ( _0xAA + ( 10 ) )
000806 e0f5     +LDI R31 , HIGH ( _0xAA + ( 10 ) )
                 	__POINTW1MN _0xAA,10
000807 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 021D                 lcd_gotoxy(3,1);
000809 e0e3      	LDI  R30,LOW(3)
00080a 940e 0de2 	CALL SUBOPT_0x23
                 ; 0000 021E                 lcd_puts(disp_actual_voltage);
00080c e9ec      	LDI  R30,LOW(_disp_actual_voltage)
00080d e0f5      	LDI  R31,HIGH(_disp_actual_voltage)
00080e 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 021F 
                 ; 0000 0220                 lcd_gotoxy(12,1);
000810 e0ec      	LDI  R30,LOW(12)
000811 940e 0de2 	CALL SUBOPT_0x23
                 ; 0000 0221                 sprintf(disp_actual_btcurrent,"%02d.%01d",actual_btcurrentip,actual_btcurrentdp);
000813 e9ef      	LDI  R30,LOW(_disp_actual_btcurrent)
000814 e0f5      	LDI  R31,HIGH(_disp_actual_btcurrent)
000815 940e 0e43 	CALL SUBOPT_0x34
000817 91e0 056e 	LDS  R30,_actual_btcurrentip_G000
000819 91f0 056f 	LDS  R31,_actual_btcurrentip_G000+1
00081b 940e 0e4a 	CALL SUBOPT_0x35
00081d 91e0 056c 	LDS  R30,_actual_btcurrentdp_G000
00081f 91f0 056d 	LDS  R31,_actual_btcurrentdp_G000+1
000821 940e 0e4a 	CALL SUBOPT_0x35
000823 e088      	LDI  R24,8
000824 d200      	RCALL _sprintf
000825 962c      	ADIW R28,12
                 ; 0000 0222                 lcd_puts("000");
                +
000826 e5e2     +LDI R30 , LOW ( _0xAA + ( 14 ) )
000827 e0f5     +LDI R31 , HIGH ( _0xAA + ( 14 ) )
                 	__POINTW1MN _0xAA,14
000828 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 0223                 lcd_gotoxy(12,1);
00082a e0ec      	LDI  R30,LOW(12)
00082b 940e 0de2 	CALL SUBOPT_0x23
                 ; 0000 0224                 lcd_puts(disp_actual_btcurrent);
00082d e9ef      	LDI  R30,LOW(_disp_actual_btcurrent)
00082e e0f5      	LDI  R31,HIGH(_disp_actual_btcurrent)
00082f 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 0225 
                 ; 0000 0226                 lcd_gotoxy(4,2);
000831 940e 0e40 	CALL SUBOPT_0x33
                 ; 0000 0227                 sprintf(disp_actual_ipvoltage,"%03d",actual_ipvoltage);
000833 eae3      	LDI  R30,LOW(_disp_actual_ipvoltage)
000834 e0f5      	LDI  R31,HIGH(_disp_actual_ipvoltage)
000835 940e 0d6e 	CALL SUBOPT_0x14
000837 91e0 0570 	LDS  R30,_actual_ipvoltage_G000
000839 91f0 0571 	LDS  R31,_actual_ipvoltage_G000+1
00083b 940e 10c2 	CALL __CWD1
00083d 940e 0e33 	CALL SUBOPT_0x31
                 ; 0000 0228                 lcd_puts("000");
                +
00083f e5e6     +LDI R30 , LOW ( _0xAA + ( 18 ) )
000840 e0f5     +LDI R31 , HIGH ( _0xAA + ( 18 ) )
                 	__POINTW1MN _0xAA,18
000841 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 0229                 lcd_gotoxy(4,2);
000843 940e 0e40 	CALL SUBOPT_0x33
                 ; 0000 022A                 lcd_puts(disp_actual_ipvoltage);
000845 eae3      	LDI  R30,LOW(_disp_actual_ipvoltage)
000846 e0f5      	LDI  R31,HIGH(_disp_actual_ipvoltage)
000847 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 022B 
                 ; 0000 022C                 lcd_gotoxy(12,2);
000849 e0ec      	LDI  R30,LOW(12)
00084a 93ea      	ST   -Y,R30
00084b 940e 0d54 	CALL SUBOPT_0xF
                 ; 0000 022D                 sprintf(disp_actual_opcurrent,"%02d.%01d",actual_opcurrentip,actual_opcurrentdp);
00084d eae6      	LDI  R30,LOW(_disp_actual_opcurrent)
00084e e0f5      	LDI  R31,HIGH(_disp_actual_opcurrent)
00084f 940e 0e43 	CALL SUBOPT_0x34
000851 91e0 0574 	LDS  R30,_actual_opcurrentip_G000
000853 91f0 0575 	LDS  R31,_actual_opcurrentip_G000+1
000855 940e 0e4a 	CALL SUBOPT_0x35
000857 91e0 0572 	LDS  R30,_actual_opcurrentdp_G000
000859 91f0 0573 	LDS  R31,_actual_opcurrentdp_G000+1
00085b 940e 0e4a 	CALL SUBOPT_0x35
00085d e088      	LDI  R24,8
00085e d1c6      	RCALL _sprintf
00085f 962c      	ADIW R28,12
                 ; 0000 022E                 lcd_puts("000");
                +
000860 e5ea     +LDI R30 , LOW ( _0xAA + ( 22 ) )
000861 e0f5     +LDI R31 , HIGH ( _0xAA + ( 22 ) )
                 	__POINTW1MN _0xAA,22
000862 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 022F                 lcd_gotoxy(12,2);
000864 e0ec      	LDI  R30,LOW(12)
000865 93ea      	ST   -Y,R30
000866 940e 0d54 	CALL SUBOPT_0xF
                 ; 0000 0230                 lcd_puts(disp_actual_opcurrent);
000868 eae6      	LDI  R30,LOW(_disp_actual_opcurrent)
000869 e0f5      	LDI  R31,HIGH(_disp_actual_opcurrent)
00086a 940e 0dde 	CALL SUBOPT_0x22
                 ; 0000 0231                 if (status == 1)
00086c 91a0 0582 	LDS  R26,_status
00086e 91b0 0583 	LDS  R27,_status+1
000870 9711      	SBIW R26,1
000871 f431      	BRNE _0xB1
                 ; 0000 0232                 {
                 ; 0000 0233                 lcd_gotoxy(1,3);
000872 e0e1      	LDI  R30,LOW(1)
000873 940e 0d69 	CALL SUBOPT_0x13
                 ; 0000 0234                 lcd_putsf("Machine : ON ");
                +
000875 e2e1     +LDI R30 , LOW ( 2 * _0x0 + ( 369 ) )
000876 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 369 ) )
                 	__POINTW1FN _0x0,369
000877 c00b      	RJMP _0xC4
                 ; 0000 0235                 }
                 ; 0000 0236                 else if (status == 0)
                 _0xB1:
000878 91e0 0582 	LDS  R30,_status
00087a 91f0 0583 	LDS  R31,_status+1
00087c 9730      	SBIW R30,0
00087d f449      	BRNE _0xB3
                 ; 0000 0237                 {
                 ; 0000 0238                     lcd_gotoxy(1,3);
00087e e0e1      	LDI  R30,LOW(1)
00087f 940e 0d69 	CALL SUBOPT_0x13
                 ; 0000 0239                     lcd_putsf("Machine : OFF");
                +
000881 e2ef     +LDI R30 , LOW ( 2 * _0x0 + ( 383 ) )
000882 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 383 ) )
                 	__POINTW1FN _0x0,383
                 _0xC4:
000883 93fa      	ST   -Y,R31
000884 93ea      	ST   -Y,R30
000885 940e 0c9f 	CALL _lcd_putsf
                 ; 0000 023A                 }
                 ; 0000 023B                 ms_update_flag = 0;
                 _0xB3:
000887 e0e0      	LDI  R30,LOW(0)
000888 93e0 057e 	STS  _ms_update_flag,R30
00088a 93e0 057f 	STS  _ms_update_flag+1,R30
                 ; 0000 023C                 //main_screen_trigger = 0;
                 ; 0000 023D                 current_mainscreen_flag = 0;
00088c 93e0 0580 	STS  _current_mainscreen_flag,R30
00088e 93e0 0581 	STS  _current_mainscreen_flag+1,R30
                 ; 0000 023E             }
                 ; 0000 023F 
                 ; 0000 0240             machine_state();    //Check for ON,OFF,reset  button press
                 _0xAF:
000890 deba      	RCALL _machine_state
                 ; 0000 0241 
                 ; 0000 0242             if (PIND.2 == 0)    //When 4 pressed
000891 9982      	SBIC 0x10,2
000892 c023      	RJMP _0xB4
                 ; 0000 0243             {
                 ; 0000 0244                 main_screen_trigger = 0;
000893 e0e0      	LDI  R30,LOW(0)
000894 93e0 057c 	STS  _main_screen_trigger,R30
000896 93e0 057d 	STS  _main_screen_trigger+1,R30
                 ; 0000 0245                 while(set_flag != 1)
                 _0xB5:
000898 91a0 0576 	LDS  R26,_set_flag
00089a 91b0 0577 	LDS  R27,_set_flag+1
00089c 9711      	SBIW R26,1
00089d f071      	BREQ _0xB7
                 ; 0000 0246                 {
                 ; 0000 0247                 while(Screen != Current_Screen)
                 _0xB8:
                +
00089e 1464     +CP R6 , R4
00089f 0475     +CPC R7 , R5
                 	__CPWRR 6,7,4,5
0008a0 f011      	BREQ _0xBA
                 ; 0000 0248                 {
                 ; 0000 0249                     Screen_sel();       //Screen selection
0008a1 de8a      	RCALL _Screen_sel
                 ; 0000 024A                 }
0008a2 cffb      	RJMP _0xB8
                 _0xBA:
                 ; 0000 024B                 input(n);
0008a3 91e0 057a 	LDS  R30,_n
0008a5 91f0 057b 	LDS  R31,_n+1
0008a7 93fa      	ST   -Y,R31
0008a8 93ea      	ST   -Y,R30
0008a9 dbc6      	RCALL _input
                 ; 0000 024C                 machine_state();
0008aa dea0      	RCALL _machine_state
                 ; 0000 024D                 }
0008ab cfec      	RJMP _0xB5
                 _0xB7:
                 ; 0000 024E                 set_flag = 0;
0008ac e0e0      	LDI  R30,LOW(0)
0008ad 93e0 0576 	STS  _set_flag,R30
0008af 93e0 0577 	STS  _set_flag+1,R30
                 ; 0000 024F                 Screen = 2;
0008b1 e0e2      	LDI  R30,LOW(2)
0008b2 e0f0      	LDI  R31,HIGH(2)
0008b3 012f      	MOVW R4,R30
                 ; 0000 0250                 lcd_clear();
0008b4 940e 0c62 	CALL _lcd_clear
                 ; 0000 0251             }
                 ; 0000 0252 
                 ; 0000 0253 
                 ; 0000 0254         }
                 _0xB4:
0008b6 cf16      	RJMP _0xA6
                 ; 0000 0255 
                 ; 0000 0256 }
                 _0xBB:
0008b7 cfff      	RJMP _0xBB
                 
                 	.DSEG
                 _0xAA:
000544           	.BYTE 0x1A
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
0008b8 931a      	ST   -Y,R17
0008b9 930a      	ST   -Y,R16
0008ba 81aa      	LDD  R26,Y+2
0008bb 81bb      	LDD  R27,Y+2+1
0008bc 9612      	ADIW R26,2
0008bd 940e 1108 	CALL __GETW1P
0008bf 9730      	SBIW R30,0
0008c0 f129      	BREQ _0x2000010
0008c1 81aa      	LDD  R26,Y+2
0008c2 81bb      	LDD  R27,Y+2+1
0008c3 9614      	ADIW R26,4
0008c4 940e 1108 	CALL __GETW1P
0008c6 018f      	MOVW R16,R30
0008c7 9730      	SBIW R30,0
0008c8 f061      	BREQ _0x2000012
                +
0008c9 3002     +CPI R16 , LOW ( 2 )
0008ca e0e0     +LDI R30 , HIGH ( 2 )
0008cb 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0008cc f0c0      	BRLO _0x2000013
0008cd 01f8      	MOVW R30,R16
0008ce 9731      	SBIW R30,1
0008cf 018f      	MOVW R16,R30
                +
0008d0 81aa     +LDD R26 , Y + 2
0008d1 81bb     +LDD R27 , Y + 2 + 1
0008d2 9614     +ADIW R26 , 4
0008d3 93ed     +ST X + , R30
0008d4 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0008d5 81aa      	LDD  R26,Y+2
0008d6 81bb      	LDD  R27,Y+2+1
0008d7 9612      	ADIW R26,2
0008d8 940e 0d2e 	CALL SUBOPT_0xA
0008da 9731      	SBIW R30,1
0008db 81ac      	LDD  R26,Y+4
0008dc 83a0      	STD  Z+0,R26
0008dd 81aa      	LDD  R26,Y+2
0008de 81bb      	LDD  R27,Y+2+1
0008df 940e 1108 	CALL __GETW1P
0008e1 23ff      	TST  R31
0008e2 f012      	BRMI _0x2000014
0008e3 940e 0d2e 	CALL SUBOPT_0xA
                 _0x2000014:
                 _0x2000013:
0008e5 c006      	RJMP _0x2000015
                 _0x2000010:
0008e6 81aa      	LDD  R26,Y+2
0008e7 81bb      	LDD  R27,Y+2+1
0008e8 efef      	LDI  R30,LOW(65535)
0008e9 efff      	LDI  R31,HIGH(65535)
0008ea 93ed      	ST   X+,R30
0008eb 93fc      	ST   X,R31
                 _0x2000015:
0008ec 8119      	LDD  R17,Y+1
0008ed 8108      	LDD  R16,Y+0
0008ee 9625      	ADIW R28,5
0008ef 9508      	RET
                 __print_G100:
0008f0 9726      	SBIW R28,6
0008f1 940e 1140 	CALL __SAVELOCR6
0008f3 e010      	LDI  R17,0
0008f4 85ac      	LDD  R26,Y+12
0008f5 85bd      	LDD  R27,Y+12+1
0008f6 e0e0      	LDI  R30,LOW(0)
0008f7 e0f0      	LDI  R31,HIGH(0)
0008f8 93ed      	ST   X+,R30
0008f9 93fc      	ST   X,R31
                 _0x2000016:
0008fa 89ea      	LDD  R30,Y+18
0008fb 89fb      	LDD  R31,Y+18+1
0008fc 9631      	ADIW R30,1
0008fd 8bea      	STD  Y+18,R30
0008fe 8bfb      	STD  Y+18+1,R31
0008ff 9731      	SBIW R30,1
000900 91e4      	LPM  R30,Z
000901 2f2e      	MOV  R18,R30
000902 30e0      	CPI  R30,0
000903 f411      	BRNE PC+3
000904 940c 0a1d 	JMP _0x2000018
000906 2fe1      	MOV  R30,R17
000907 30e0      	CPI  R30,0
000908 f439      	BRNE _0x200001C
000909 3225      	CPI  R18,37
00090a f411      	BRNE _0x200001D
00090b e011      	LDI  R17,LOW(1)
00090c c002      	RJMP _0x200001E
                 _0x200001D:
00090d 940e 0e4f 	CALL SUBOPT_0x36
                 _0x200001E:
00090f c10c      	RJMP _0x200001B
                 _0x200001C:
000910 30e1      	CPI  R30,LOW(0x1)
000911 f4a9      	BRNE _0x200001F
000912 3225      	CPI  R18,37
000913 f419      	BRNE _0x2000020
000914 940e 0e4f 	CALL SUBOPT_0x36
000916 c104      	RJMP _0x20000C9
                 _0x2000020:
000917 e012      	LDI  R17,LOW(2)
000918 e040      	LDI  R20,LOW(0)
000919 e000      	LDI  R16,LOW(0)
00091a 322d      	CPI  R18,45
00091b f411      	BRNE _0x2000021
00091c e001      	LDI  R16,LOW(1)
00091d c0fe      	RJMP _0x200001B
                 _0x2000021:
00091e 322b      	CPI  R18,43
00091f f411      	BRNE _0x2000022
000920 e24b      	LDI  R20,LOW(43)
000921 c0fa      	RJMP _0x200001B
                 _0x2000022:
000922 3220      	CPI  R18,32
000923 f411      	BRNE _0x2000023
000924 e240      	LDI  R20,LOW(32)
000925 c0f6      	RJMP _0x200001B
                 _0x2000023:
000926 c002      	RJMP _0x2000024
                 _0x200001F:
000927 30e2      	CPI  R30,LOW(0x2)
000928 f439      	BRNE _0x2000025
                 _0x2000024:
000929 e050      	LDI  R21,LOW(0)
00092a e013      	LDI  R17,LOW(3)
00092b 3320      	CPI  R18,48
00092c f411      	BRNE _0x2000026
00092d 6800      	ORI  R16,LOW(128)
00092e c0ed      	RJMP _0x200001B
                 _0x2000026:
00092f c004      	RJMP _0x2000027
                 _0x2000025:
000930 30e3      	CPI  R30,LOW(0x3)
000931 f011      	BREQ PC+3
000932 940c 0a1c 	JMP _0x200001B
                 _0x2000027:
000934 3320      	CPI  R18,48
000935 f010      	BRLO _0x200002A
000936 332a      	CPI  R18,58
000937 f008      	BRLO _0x200002B
                 _0x200002A:
000938 c007      	RJMP _0x2000029
                 _0x200002B:
000939 e0aa      	LDI  R26,LOW(10)
00093a 9f5a      	MUL  R21,R26
00093b 2d50      	MOV  R21,R0
00093c 2fe2      	MOV  R30,R18
00093d 53e0      	SUBI R30,LOW(48)
00093e 0f5e      	ADD  R21,R30
00093f c0dc      	RJMP _0x200001B
                 _0x2000029:
000940 2fe2      	MOV  R30,R18
000941 36e3      	CPI  R30,LOW(0x63)
000942 f449      	BRNE _0x200002F
000943 940e 0e58 	CALL SUBOPT_0x37
000945 89e8      	LDD  R30,Y+16
000946 89f9      	LDD  R31,Y+16+1
000947 81a4      	LDD  R26,Z+4
000948 93aa      	ST   -Y,R26
000949 940e 0e5e 	CALL SUBOPT_0x38
00094b c0cf      	RJMP _0x2000030
                 _0x200002F:
00094c 37e3      	CPI  R30,LOW(0x73)
00094d f441      	BRNE _0x2000032
00094e 940e 0e58 	CALL SUBOPT_0x37
000950 940e 0e66 	CALL SUBOPT_0x39
000952 940e 0c0a 	CALL _strlen
000954 2f1e      	MOV  R17,R30
000955 c00a      	RJMP _0x2000033
                 _0x2000032:
000956 37e0      	CPI  R30,LOW(0x70)
000957 f461      	BRNE _0x2000035
000958 940e 0e58 	CALL SUBOPT_0x37
00095a 940e 0e66 	CALL SUBOPT_0x39
00095c 940e 0c14 	CALL _strlenf
00095e 2f1e      	MOV  R17,R30
00095f 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000960 6002      	ORI  R16,LOW(2)
000961 770f      	ANDI R16,LOW(127)
000962 e030      	LDI  R19,LOW(0)
000963 c035      	RJMP _0x2000036
                 _0x2000035:
000964 36e4      	CPI  R30,LOW(0x64)
000965 f011      	BREQ _0x2000039
000966 36e9      	CPI  R30,LOW(0x69)
000967 f411      	BRNE _0x200003A
                 _0x2000039:
000968 6004      	ORI  R16,LOW(4)
000969 c002      	RJMP _0x200003B
                 _0x200003A:
00096a 37e5      	CPI  R30,LOW(0x75)
00096b f431      	BRNE _0x200003C
                 _0x200003B:
00096c e8ec      	LDI  R30,LOW(_tbl10_G100*2)
00096d e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00096e 83ee      	STD  Y+6,R30
00096f 83ff      	STD  Y+6+1,R31
000970 e015      	LDI  R17,LOW(5)
000971 c00d      	RJMP _0x200003D
                 _0x200003C:
000972 35e8      	CPI  R30,LOW(0x58)
000973 f411      	BRNE _0x200003F
000974 6008      	ORI  R16,LOW(8)
000975 c004      	RJMP _0x2000040
                 _0x200003F:
000976 37e8      	CPI  R30,LOW(0x78)
000977 f011      	BREQ PC+3
000978 940c 0a1b 	JMP _0x2000071
                 _0x2000040:
00097a e9e6      	LDI  R30,LOW(_tbl16_G100*2)
00097b e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00097c 83ee      	STD  Y+6,R30
00097d 83ff      	STD  Y+6+1,R31
00097e e014      	LDI  R17,LOW(4)
                 _0x200003D:
00097f ff02      	SBRS R16,2
000980 c014      	RJMP _0x2000042
000981 940e 0e58 	CALL SUBOPT_0x37
000983 940e 0e70 	CALL SUBOPT_0x3A
000985 85ab      	LDD  R26,Y+11
000986 23aa      	TST  R26
000987 f43a      	BRPL _0x2000043
000988 85ea      	LDD  R30,Y+10
000989 85fb      	LDD  R31,Y+10+1
00098a 940e 10b6 	CALL __ANEGW1
00098c 87ea      	STD  Y+10,R30
00098d 87fb      	STD  Y+10+1,R31
00098e e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00098f 3040      	CPI  R20,0
000990 f011      	BREQ _0x2000044
000991 5f1f      	SUBI R17,-LOW(1)
000992 c001      	RJMP _0x2000045
                 _0x2000044:
000993 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000994 c004      	RJMP _0x2000046
                 _0x2000042:
000995 940e 0e58 	CALL SUBOPT_0x37
000997 940e 0e70 	CALL SUBOPT_0x3A
                 _0x2000046:
                 _0x2000036:
000999 fd00      	SBRC R16,0
00099a c011      	RJMP _0x2000047
                 _0x2000048:
00099b 1715      	CP   R17,R21
00099c f478      	BRSH _0x200004A
00099d ff07      	SBRS R16,7
00099e c008      	RJMP _0x200004B
00099f ff02      	SBRS R16,2
0009a0 c004      	RJMP _0x200004C
0009a1 7f0b      	ANDI R16,LOW(251)
0009a2 2f24      	MOV  R18,R20
0009a3 5011      	SUBI R17,LOW(1)
0009a4 c001      	RJMP _0x200004D
                 _0x200004C:
0009a5 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0009a6 c001      	RJMP _0x200004E
                 _0x200004B:
0009a7 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0009a8 940e 0e4f 	CALL SUBOPT_0x36
0009aa 5051      	SUBI R21,LOW(1)
0009ab cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0009ac 2f31      	MOV  R19,R17
0009ad ff01      	SBRS R16,1
0009ae c017      	RJMP _0x200004F
                 _0x2000050:
0009af 3030      	CPI  R19,0
0009b0 f0a1      	BREQ _0x2000052
0009b1 ff03      	SBRS R16,3
0009b2 c006      	RJMP _0x2000053
0009b3 81ee      	LDD  R30,Y+6
0009b4 81ff      	LDD  R31,Y+6+1
0009b5 9125      	LPM  R18,Z+
0009b6 83ee      	STD  Y+6,R30
0009b7 83ff      	STD  Y+6+1,R31
0009b8 c005      	RJMP _0x2000054
                 _0x2000053:
0009b9 81ae      	LDD  R26,Y+6
0009ba 81bf      	LDD  R27,Y+6+1
0009bb 912d      	LD   R18,X+
0009bc 83ae      	STD  Y+6,R26
0009bd 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0009be 940e 0e4f 	CALL SUBOPT_0x36
0009c0 3050      	CPI  R21,0
0009c1 f009      	BREQ _0x2000055
0009c2 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0009c3 5031      	SUBI R19,LOW(1)
0009c4 cfea      	RJMP _0x2000050
                 _0x2000052:
0009c5 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0009c6 e320      	LDI  R18,LOW(48)
0009c7 81ee      	LDD  R30,Y+6
0009c8 81ff      	LDD  R31,Y+6+1
0009c9 940e 1111 	CALL __GETW1PF
0009cb 87e8      	STD  Y+8,R30
0009cc 87f9      	STD  Y+8+1,R31
0009cd 81ee      	LDD  R30,Y+6
0009ce 81ff      	LDD  R31,Y+6+1
0009cf 9632      	ADIW R30,2
0009d0 83ee      	STD  Y+6,R30
0009d1 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0009d2 85e8      	LDD  R30,Y+8
0009d3 85f9      	LDD  R31,Y+8+1
0009d4 85aa      	LDD  R26,Y+10
0009d5 85bb      	LDD  R27,Y+10+1
0009d6 17ae      	CP   R26,R30
0009d7 07bf      	CPC  R27,R31
0009d8 f050      	BRLO _0x200005C
0009d9 5f2f      	SUBI R18,-LOW(1)
0009da 85a8      	LDD  R26,Y+8
0009db 85b9      	LDD  R27,Y+8+1
0009dc 85ea      	LDD  R30,Y+10
0009dd 85fb      	LDD  R31,Y+10+1
0009de 1bea      	SUB  R30,R26
0009df 0bfb      	SBC  R31,R27
0009e0 87ea      	STD  Y+10,R30
0009e1 87fb      	STD  Y+10+1,R31
0009e2 cfef      	RJMP _0x200005A
                 _0x200005C:
0009e3 332a      	CPI  R18,58
0009e4 f028      	BRLO _0x200005D
0009e5 ff03      	SBRS R16,3
0009e6 c002      	RJMP _0x200005E
0009e7 5f29      	SUBI R18,-LOW(7)
0009e8 c001      	RJMP _0x200005F
                 _0x200005E:
0009e9 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0009ea fd04      	SBRC R16,4
0009eb c01a      	RJMP _0x2000061
0009ec 3321      	CPI  R18,49
0009ed f420      	BRSH _0x2000063
0009ee 85a8      	LDD  R26,Y+8
0009ef 85b9      	LDD  R27,Y+8+1
0009f0 9711      	SBIW R26,1
0009f1 f409      	BRNE _0x2000062
                 _0x2000063:
0009f2 c009      	RJMP _0x20000CA
                 _0x2000062:
0009f3 1753      	CP   R21,R19
0009f4 f010      	BRLO _0x2000067
0009f5 ff00      	SBRS R16,0
0009f6 c001      	RJMP _0x2000068
                 _0x2000067:
0009f7 c013      	RJMP _0x2000066
                 _0x2000068:
0009f8 e220      	LDI  R18,LOW(32)
0009f9 ff07      	SBRS R16,7
0009fa c00b      	RJMP _0x2000069
0009fb e320      	LDI  R18,LOW(48)
                 _0x20000CA:
0009fc 6100      	ORI  R16,LOW(16)
0009fd ff02      	SBRS R16,2
0009fe c007      	RJMP _0x200006A
0009ff 7f0b      	ANDI R16,LOW(251)
000a00 934a      	ST   -Y,R20
000a01 940e 0e5e 	CALL SUBOPT_0x38
000a03 3050      	CPI  R21,0
000a04 f009      	BREQ _0x200006B
000a05 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000a06 940e 0e4f 	CALL SUBOPT_0x36
000a08 3050      	CPI  R21,0
000a09 f009      	BREQ _0x200006C
000a0a 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000a0b 5031      	SUBI R19,LOW(1)
000a0c 85a8      	LDD  R26,Y+8
000a0d 85b9      	LDD  R27,Y+8+1
000a0e 9712      	SBIW R26,2
000a0f f008      	BRLO _0x2000059
000a10 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000a11 ff00      	SBRS R16,0
000a12 c008      	RJMP _0x200006D
                 _0x200006E:
000a13 3050      	CPI  R21,0
000a14 f031      	BREQ _0x2000070
000a15 5051      	SUBI R21,LOW(1)
000a16 e2e0      	LDI  R30,LOW(32)
000a17 93ea      	ST   -Y,R30
000a18 940e 0e5e 	CALL SUBOPT_0x38
000a1a cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
000a1b e010      	LDI  R17,LOW(0)
                 _0x200001B:
000a1c cedd      	RJMP _0x2000016
                 _0x2000018:
000a1d 85ac      	LDD  R26,Y+12
000a1e 85bd      	LDD  R27,Y+12+1
000a1f 940e 1108 	CALL __GETW1P
000a21 940e 1147 	CALL __LOADLOCR6
000a23 9664      	ADIW R28,20
000a24 9508      	RET
                 _sprintf:
000a25 92ff      	PUSH R15
000a26 2ef8      	MOV  R15,R24
000a27 9726      	SBIW R28,6
000a28 940e 1142 	CALL __SAVELOCR4
000a2a 940e 0e78 	CALL SUBOPT_0x3B
000a2c 9730      	SBIW R30,0
000a2d f419      	BRNE _0x2000072
000a2e efef      	LDI  R30,LOW(65535)
000a2f efff      	LDI  R31,HIGH(65535)
000a30 c025      	RJMP _0x2120007
                 _0x2000072:
000a31 01de      	MOVW R26,R28
000a32 9616      	ADIW R26,6
000a33 940e 10b2 	CALL __ADDW2R15
000a35 018d      	MOVW R16,R26
000a36 940e 0e78 	CALL SUBOPT_0x3B
000a38 83ee      	STD  Y+6,R30
000a39 83ff      	STD  Y+6+1,R31
000a3a e0e0      	LDI  R30,LOW(0)
000a3b 87e8      	STD  Y+8,R30
000a3c 87e9      	STD  Y+8+1,R30
000a3d 01de      	MOVW R26,R28
000a3e 961a      	ADIW R26,10
000a3f 940e 10b2 	CALL __ADDW2R15
000a41 940e 1108 	CALL __GETW1P
000a43 93fa      	ST   -Y,R31
000a44 93ea      	ST   -Y,R30
000a45 931a      	ST   -Y,R17
000a46 930a      	ST   -Y,R16
000a47 ebe8      	LDI  R30,LOW(_put_buff_G100)
000a48 e0f8      	LDI  R31,HIGH(_put_buff_G100)
000a49 93fa      	ST   -Y,R31
000a4a 93ea      	ST   -Y,R30
000a4b 01fe      	MOVW R30,R28
000a4c 963a      	ADIW R30,10
000a4d 93fa      	ST   -Y,R31
000a4e 93ea      	ST   -Y,R30
000a4f dea0      	RCALL __print_G100
000a50 019f      	MOVW R18,R30
000a51 81ae      	LDD  R26,Y+6
000a52 81bf      	LDD  R27,Y+6+1
000a53 e0e0      	LDI  R30,LOW(0)
000a54 93ec      	ST   X,R30
000a55 01f9      	MOVW R30,R18
                 _0x2120007:
000a56 940e 1149 	CALL __LOADLOCR4
000a58 962a      	ADIW R28,10
000a59 90ff      	POP  R15
000a5a 9508      	RET
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
000a5b 817b         ldd  r23,y+3
000a5c 816a         ldd  r22,y+2
000a5d 81f9         ldd  r31,y+1
000a5e 81e8         ld   r30,y
000a5f fb77         bst  r23,7
000a60 0f77         lsl  r23
000a61 fd67         sbrc r22,7
000a62 6071         sbr  r23,1
000a63 2f97         mov  r25,r23
000a64 579e         subi r25,0x7e
000a65 f081         breq __ftrunc0
000a66 f078         brcs __ftrunc0
000a67 3198         cpi  r25,24
000a68 f490         brsh __ftrunc1
000a69 27aa         clr  r26
000a6a 27bb         clr  r27
000a6b 2788         clr  r24
                 __ftrunc2:
000a6c 9408         sec
000a6d 9587         ror  r24
000a6e 95b7         ror  r27
000a6f 95a7         ror  r26
000a70 959a         dec  r25
000a71 f7d1         brne __ftrunc2
000a72 23ea         and  r30,r26
000a73 23fb         and  r31,r27
000a74 2368         and  r22,r24
000a75 c005         rjmp __ftrunc1
                 __ftrunc0:
000a76 94e8         clt
000a77 2777         clr  r23
000a78 27ee         clr  r30
000a79 27ff         clr  r31
000a7a 2766         clr  r22
                 __ftrunc1:
000a7b 776f         cbr  r22,0x80
000a7c 9576         lsr  r23
000a7d f408         brcc __ftrunc3
000a7e 6860         sbr  r22,0x80
                 __ftrunc3:
000a7f f977         bld  r23,7
000a80 91a9         ld   r26,y+
000a81 91b9         ld   r27,y+
000a82 9189         ld   r24,y+
000a83 9199         ld   r25,y+
000a84 17ea         cp   r30,r26
000a85 07fb         cpc  r31,r27
000a86 0768         cpc  r22,r24
000a87 0779         cpc  r23,r25
000a88 fb97         bst  r25,7
000a89 9508         ret
                 _floor:
000a8a 940e 0e7f 	CALL SUBOPT_0x3C
000a8c 940e 111f 	CALL __PUTPARD1
000a8e 940e 0a5b 	CALL _ftrunc
000a90 940e 111a 	CALL __PUTD1S0
000a92 f419          brne __floor1
                 __floor0:
000a93 940e 0e7f 	CALL SUBOPT_0x3C
000a95 c005      	RJMP _0x2120006
                 __floor1:
000a96 f7e6          brtc __floor0
000a97 940e 0e7f 	CALL SUBOPT_0x3C
000a99 940e 0e82 	CALL SUBOPT_0x3D
                 _0x2120006:
000a9b 9624      	ADIW R28,4
000a9c 9508      	RET
                 _log:
000a9d 9724      	SBIW R28,4
000a9e 931a      	ST   -Y,R17
000a9f 930a      	ST   -Y,R16
000aa0 940e 0e89 	CALL SUBOPT_0x3E
000aa2 940e 1135 	CALL __CPD02
000aa4 f02c      	BRLT _0x204000C
                +
000aa5 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
000aa6 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
000aa7 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
000aa8 ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
000aa9 c077      	RJMP _0x2120005
                 _0x204000C:
000aaa 940e 0e8e 	CALL SUBOPT_0x3F
000aac 940e 111f 	CALL __PUTPARD1
000aae b7ed      	IN   R30,SPL
000aaf b7fe      	IN   R31,SPH
000ab0 9731      	SBIW R30,1
000ab1 93fa      	ST   -Y,R31
000ab2 93ea      	ST   -Y,R30
000ab3 931f      	PUSH R17
000ab4 930f      	PUSH R16
000ab5 940e 0ee8 	CALL _frexp
000ab7 910f      	POP  R16
000ab8 911f      	POP  R17
000ab9 940e 0e93 	CALL SUBOPT_0x40
000abb 940e 0e89 	CALL SUBOPT_0x3E
                +
000abd efe3     +LDI R30 , LOW ( 0x3F3504F3 )
000abe e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
000abf e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000ac0 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000ac1 940e 1092 	CALL __CMPF12
000ac3 f440      	BRSH _0x204000D
000ac4 940e 0e98 	CALL SUBOPT_0x41
000ac6 940e 0faf 	CALL __ADDF12
000ac8 940e 0e93 	CALL SUBOPT_0x40
                +
000aca 5001     +SUBI R16 , LOW ( 1 )
000acb 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x204000D:
000acc 940e 0e8e 	CALL SUBOPT_0x3F
000ace 940e 0e82 	CALL SUBOPT_0x3D
000ad0 937f      	PUSH R23
000ad1 936f      	PUSH R22
000ad2 93ff      	PUSH R31
000ad3 93ef      	PUSH R30
000ad4 940e 0e8e 	CALL SUBOPT_0x3F
                +
000ad6 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000ad7 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000ad8 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000ad9 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000ada 940e 0faf 	CALL __ADDF12
000adc 91af      	POP  R26
000add 91bf      	POP  R27
000ade 918f      	POP  R24
000adf 919f      	POP  R25
000ae0 940e 104d 	CALL __DIVF21
000ae2 940e 0e93 	CALL SUBOPT_0x40
000ae4 940e 0e98 	CALL SUBOPT_0x41
000ae6 940e 0e9a 	CALL SUBOPT_0x42
                +
000ae8 e2a6     +LDI R26 , LOW ( 0x3F654226 )
000ae9 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
000aea e685     +LDI R24 , BYTE3 ( 0x3F654226 )
000aeb e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
000aec 940e 0fff 	CALL __MULF12
000aee 01df      	MOVW R26,R30
000aef 01cb      	MOVW R24,R22
                +
000af0 e4ee     +LDI R30 , LOW ( 0x4054114E )
000af1 e1f1     +LDI R31 , HIGH ( 0x4054114E )
000af2 e564     +LDI R22 , BYTE3 ( 0x4054114E )
000af3 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
000af4 940e 0ea1 	CALL SUBOPT_0x43
000af6 940e 0e89 	CALL SUBOPT_0x3E
000af8 940e 0fff 	CALL __MULF12
000afa 937f      	PUSH R23
000afb 936f      	PUSH R22
000afc 93ff      	PUSH R31
000afd 93ef      	PUSH R30
000afe 940e 0ea6 	CALL SUBOPT_0x44
                +
000b00 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
000b01 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
000b02 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
000b03 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
000b04 940e 0fa8 	CALL __SUBF12
000b06 91af      	POP  R26
000b07 91bf      	POP  R27
000b08 918f      	POP  R24
000b09 919f      	POP  R25
000b0a 940e 104d 	CALL __DIVF21
000b0c 937f      	PUSH R23
000b0d 936f      	PUSH R22
000b0e 93ff      	PUSH R31
000b0f 93ef      	PUSH R30
000b10 01f8      	MOVW R30,R16
000b11 940e 10c2 	CALL __CWD1
000b13 940e 0f75 	CALL __CDF1
                +
000b15 e1a8     +LDI R26 , LOW ( 0x3F317218 )
000b16 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
000b17 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
000b18 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
000b19 940e 0fff 	CALL __MULF12
000b1b 91af      	POP  R26
000b1c 91bf      	POP  R27
000b1d 918f      	POP  R24
000b1e 919f      	POP  R25
000b1f 940e 0faf 	CALL __ADDF12
                 _0x2120005:
000b21 8119      	LDD  R17,Y+1
000b22 8108      	LDD  R16,Y+0
000b23 962a      	ADIW R28,10
000b24 9508      	RET
                 _exp:
000b25 9728      	SBIW R28,8
000b26 931a      	ST   -Y,R17
000b27 930a      	ST   -Y,R16
000b28 940e 0eab 	CALL SUBOPT_0x45
                +
000b2a e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
000b2b eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
000b2c ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
000b2d ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
000b2e 940e 1092 	CALL __CMPF12
000b30 f418      	BRSH _0x204000F
000b31 940e 0eb0 	CALL SUBOPT_0x46
000b33 c088      	RJMP _0x2120004
                 _0x204000F:
                +
000b34 85ea     +LDD R30 , Y + 10
000b35 85fb     +LDD R31 , Y + 10 + 1
000b36 856c     +LDD R22 , Y + 10 + 2
000b37 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000b38 940e 1131 	CALL __CPD10
000b3a f429      	BRNE _0x2040010
                +
000b3b e0e0     +LDI R30 , LOW ( 0x3F800000 )
000b3c e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000b3d e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000b3e e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000b3f c07c      	RJMP _0x2120004
                 _0x2040010:
000b40 940e 0eab 	CALL SUBOPT_0x45
                +
000b42 e1e8     +LDI R30 , LOW ( 0x42B17218 )
000b43 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000b44 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000b45 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
000b46 940e 1092 	CALL __CMPF12
000b48 f009      	BREQ PC+2
000b49 f410      	BRCC PC+3
000b4a 940c 0b51 	JMP  _0x2040011
                +
000b4c efef     +LDI R30 , LOW ( 0x7F7FFFFF )
000b4d efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
000b4e e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
000b4f e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
000b50 c06b      	RJMP _0x2120004
                 _0x2040011:
000b51 940e 0eab 	CALL SUBOPT_0x45
                +
000b53 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000b54 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000b55 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000b56 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000b57 940e 0fff 	CALL __MULF12
                +
000b59 87ea     +STD Y + 10 , R30
000b5a 87fb     +STD Y + 10 + 1 , R31
000b5b 876c     +STD Y + 10 + 2 , R22
000b5c 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000b5d 940e 111f 	CALL __PUTPARD1
000b5f df2a      	RCALL _floor
000b60 940e 0f3e 	CALL __CFD1
000b62 018f      	MOVW R16,R30
000b63 01f8      	MOVW R30,R16
000b64 940e 0eab 	CALL SUBOPT_0x45
000b66 940e 10c2 	CALL __CWD1
000b68 940e 0f75 	CALL __CDF1
000b6a 940e 0ea1 	CALL SUBOPT_0x43
000b6c 01df      	MOVW R26,R30
000b6d 01cb      	MOVW R24,R22
                +
000b6e e0e0     +LDI R30 , LOW ( 0x3F000000 )
000b6f e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000b70 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000b71 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000b72 940e 0ea1 	CALL SUBOPT_0x43
000b74 940e 0e93 	CALL SUBOPT_0x40
000b76 940e 0e98 	CALL SUBOPT_0x41
000b78 940e 0e9a 	CALL SUBOPT_0x42
                +
000b7a e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
000b7b e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
000b7c e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
000b7d e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
000b7e 940e 0fff 	CALL __MULF12
                +
000b80 eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
000b81 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
000b82 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
000b83 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
000b84 940e 0faf 	CALL __ADDF12
000b86 940e 0e89 	CALL SUBOPT_0x3E
000b88 940e 0fff 	CALL __MULF12
000b8a 940e 0e93 	CALL SUBOPT_0x40
000b8c 940e 0ea6 	CALL SUBOPT_0x44
                +
000b8e e2a8     +LDI R26 , LOW ( 0x41A68D28 )
000b8f e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
000b90 ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
000b91 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
000b92 940e 0faf 	CALL __ADDF12
                +
000b94 83ea     +STD Y + 2 , R30
000b95 83fb     +STD Y + 2 + 1 , R31
000b96 836c     +STD Y + 2 + 2 , R22
000b97 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000b98 940e 0e8e 	CALL SUBOPT_0x3F
                +
000b9a 81aa     +LDD R26 , Y + 2
000b9b 81bb     +LDD R27 , Y + 2 + 1
000b9c 818c     +LDD R24 , Y + 2 + 2
000b9d 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000b9e 940e 0faf 	CALL __ADDF12
                +
000ba0 efa3     +LDI R26 , LOW ( 0x3FB504F3 )
000ba1 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
000ba2 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
000ba3 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
000ba4 940e 0fff 	CALL __MULF12
000ba6 937f      	PUSH R23
000ba7 936f      	PUSH R22
000ba8 93ff      	PUSH R31
000ba9 93ef      	PUSH R30
000baa 940e 0e89 	CALL SUBOPT_0x3E
000bac 940e 0ea6 	CALL SUBOPT_0x44
000bae 940e 0fa8 	CALL __SUBF12
000bb0 91af      	POP  R26
000bb1 91bf      	POP  R27
000bb2 918f      	POP  R24
000bb3 919f      	POP  R25
000bb4 940e 104d 	CALL __DIVF21
000bb6 940e 111f 	CALL __PUTPARD1
000bb8 931a      	ST   -Y,R17
000bb9 930a      	ST   -Y,R16
000bba 940e 0efb 	CALL _ldexp
                 _0x2120004:
000bbc 8119      	LDD  R17,Y+1
000bbd 8108      	LDD  R16,Y+0
000bbe 962e      	ADIW R28,14
000bbf 9508      	RET
                 _pow:
000bc0 9724      	SBIW R28,4
000bc1 940e 0eb5 	CALL SUBOPT_0x47
000bc3 940e 1131 	CALL __CPD10
000bc5 f419      	BRNE _0x2040012
000bc6 940e 0eb0 	CALL SUBOPT_0x46
000bc8 c03f      	RJMP _0x2120003
                 _0x2040012:
                +
000bc9 85a8     +LDD R26 , Y + 8
000bca 85b9     +LDD R27 , Y + 8 + 1
000bcb 858a     +LDD R24 , Y + 8 + 2
000bcc 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000bcd 940e 1135 	CALL __CPD02
000bcf f47c      	BRGE _0x2040013
000bd0 940e 0eba 	CALL SUBOPT_0x48
000bd2 940e 1131 	CALL __CPD10
000bd4 f429      	BRNE _0x2040014
                +
000bd5 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000bd6 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000bd7 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000bd8 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000bd9 c02e      	RJMP _0x2120003
                 _0x2040014:
000bda 940e 0eb5 	CALL SUBOPT_0x47
000bdc 940e 0ebf 	CALL SUBOPT_0x49
000bde c029      	RJMP _0x2120003
                 _0x2040013:
000bdf 940e 0eba 	CALL SUBOPT_0x48
000be1 01de      	MOVW R26,R28
000be2 940e 0f3e 	CALL __CFD1
000be4 940e 110c 	CALL __PUTDP1
000be6 940e 0e7f 	CALL SUBOPT_0x3C
000be8 940e 0f75 	CALL __CDF1
000bea 01df      	MOVW R26,R30
000beb 01cb      	MOVW R24,R22
000bec 940e 0eba 	CALL SUBOPT_0x48
000bee 940e 113b 	CALL __CPD12
000bf0 f019      	BREQ _0x2040015
000bf1 940e 0eb0 	CALL SUBOPT_0x46
000bf3 c014      	RJMP _0x2120003
                 _0x2040015:
000bf4 940e 0eb5 	CALL SUBOPT_0x47
000bf6 940e 0f09 	CALL __ANEGF1
000bf8 940e 0ebf 	CALL SUBOPT_0x49
                +
000bfa 87e8     +STD Y + 8 , R30
000bfb 87f9     +STD Y + 8 + 1 , R31
000bfc 876a     +STD Y + 8 + 2 , R22
000bfd 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000bfe 81e8      	LD   R30,Y
000bff 70e1      	ANDI R30,LOW(0x1)
000c00 f419      	BRNE _0x2040016
000c01 940e 0eb5 	CALL SUBOPT_0x47
000c03 c004      	RJMP _0x2120003
                 _0x2040016:
000c04 940e 0eb5 	CALL SUBOPT_0x47
000c06 940e 0f09 	CALL __ANEGF1
                 _0x2120003:
000c08 962c      	ADIW R28,12
000c09 9508      	RET
                 
                 	.CSEG
                 _strlen:
000c0a 91a9          ld   r26,y+
000c0b 91b9          ld   r27,y+
000c0c 27ee          clr  r30
000c0d 27ff          clr  r31
                 strlen0:
000c0e 916d          ld   r22,x+
000c0f 2366          tst  r22
000c10 f011          breq strlen1
000c11 9631          adiw r30,1
000c12 cffb          rjmp strlen0
                 strlen1:
000c13 9508          ret
                 _strlenf:
000c14 27aa          clr  r26
000c15 27bb          clr  r27
000c16 91e9          ld   r30,y+
000c17 91f9          ld   r31,y+
                 strlenf0:
000c18 9005      	lpm  r0,z+
000c19 2000          tst  r0
000c1a f011          breq strlenf1
000c1b 9611          adiw r26,1
000c1c cffb          rjmp strlenf0
                 strlenf1:
000c1d 01fd          movw r30,r26
000c1e 9508          ret
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G104:
000c1f 81e8      	LD   R30,Y
000c20 71e0      	ANDI R30,LOW(0x10)
000c21 f011      	BREQ _0x2080004
000c22 9aac      	SBI  0x15,4
000c23 c001      	RJMP _0x2080005
                 _0x2080004:
000c24 98ac      	CBI  0x15,4
                 _0x2080005:
000c25 81e8      	LD   R30,Y
000c26 72e0      	ANDI R30,LOW(0x20)
000c27 f011      	BREQ _0x2080006
000c28 9aad      	SBI  0x15,5
000c29 c001      	RJMP _0x2080007
                 _0x2080006:
000c2a 98ad      	CBI  0x15,5
                 _0x2080007:
000c2b 81e8      	LD   R30,Y
000c2c 74e0      	ANDI R30,LOW(0x40)
000c2d f011      	BREQ _0x2080008
000c2e 9aae      	SBI  0x15,6
000c2f c001      	RJMP _0x2080009
                 _0x2080008:
000c30 98ae      	CBI  0x15,6
                 _0x2080009:
000c31 81e8      	LD   R30,Y
000c32 78e0      	ANDI R30,LOW(0x80)
000c33 f011      	BREQ _0x208000A
000c34 9aaf      	SBI  0x15,7
000c35 c001      	RJMP _0x208000B
                 _0x208000A:
000c36 98af      	CBI  0x15,7
                 _0x208000B:
                +
000c37 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
000c38 958a     +DEC R24
000c39 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
000c3a 9aaa      	SBI  0x15,2
                +
000c3b e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000c3c 958a     +DEC R24
000c3d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000c3e 98aa      	CBI  0x15,2
                +
000c3f e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000c40 958a     +DEC R24
000c41 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000c42 c09f      	RJMP _0x2120001
                 __lcd_write_data:
000c43 81e8      	LD   R30,Y
000c44 93ea      	ST   -Y,R30
000c45 dfd9      	RCALL __lcd_write_nibble_G104
000c46 81e8          ld    r30,y
000c47 95e2          swap  r30
000c48 83e8          st    y,r30
000c49 81e8      	LD   R30,Y
000c4a 93ea      	ST   -Y,R30
000c4b dfd3      	RCALL __lcd_write_nibble_G104
                +
000c4c ec88     +LDI R24 , LOW ( 200 )
000c4d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000c4e 9701     +SBIW R24 , 1
000c4f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000c50 c091      	RJMP _0x2120001
                 _lcd_gotoxy:
000c51 81e8      	LD   R30,Y
000c52 e0f0      	LDI  R31,0
000c53 5ce6      	SUBI R30,LOW(-__base_y_G104)
000c54 4ff9      	SBCI R31,HIGH(-__base_y_G104)
000c55 81e0      	LD   R30,Z
000c56 81a9      	LDD  R26,Y+1
000c57 0fea      	ADD  R30,R26
000c58 93ea      	ST   -Y,R30
000c59 dfe9      	RCALL __lcd_write_data
000c5a 81e9      	LDD  R30,Y+1
000c5b 93e0 063e 	STS  __lcd_x,R30
000c5d 81e8      	LD   R30,Y
000c5e 93e0 063f 	STS  __lcd_y,R30
000c60 9622      	ADIW R28,2
000c61 9508      	RET
                 _lcd_clear:
000c62 e0e2      	LDI  R30,LOW(2)
000c63 940e 0ecd 	CALL SUBOPT_0x4A
000c65 e0ec      	LDI  R30,LOW(12)
000c66 93ea      	ST   -Y,R30
000c67 dfdb      	RCALL __lcd_write_data
000c68 e0e1      	LDI  R30,LOW(1)
000c69 940e 0ecd 	CALL SUBOPT_0x4A
000c6b e0e0      	LDI  R30,LOW(0)
000c6c 93e0 063f 	STS  __lcd_y,R30
000c6e 93e0 063e 	STS  __lcd_x,R30
000c70 9508      	RET
                 _lcd_putchar:
000c71 81a8      	LD   R26,Y
000c72 30aa      	CPI  R26,LOW(0xA)
000c73 f031      	BREQ _0x2080011
000c74 91e0 0640 	LDS  R30,__lcd_maxx
000c76 91a0 063e 	LDS  R26,__lcd_x
000c78 17ae      	CP   R26,R30
000c79 f068      	BRLO _0x2080010
                 _0x2080011:
000c7a e0e0      	LDI  R30,LOW(0)
000c7b 93ea      	ST   -Y,R30
000c7c 91e0 063f 	LDS  R30,__lcd_y
000c7e 5fef      	SUBI R30,-LOW(1)
000c7f 93e0 063f 	STS  __lcd_y,R30
000c81 93ea      	ST   -Y,R30
000c82 dfce      	RCALL _lcd_gotoxy
000c83 81a8      	LD   R26,Y
000c84 30aa      	CPI  R26,LOW(0xA)
000c85 f409      	BRNE _0x2080013
000c86 c05b      	RJMP _0x2120001
                 _0x2080013:
                 _0x2080010:
000c87 91e0 063e 	LDS  R30,__lcd_x
000c89 5fef      	SUBI R30,-LOW(1)
000c8a 93e0 063e 	STS  __lcd_x,R30
000c8c 9aa8      	SBI  0x15,0
000c8d 81e8      	LD   R30,Y
000c8e 93ea      	ST   -Y,R30
000c8f dfb3      	RCALL __lcd_write_data
000c90 98a8      	CBI  0x15,0
000c91 c050      	RJMP _0x2120001
                 _lcd_puts:
000c92 931a      	ST   -Y,R17
                 _0x2080014:
000c93 81a9      	LDD  R26,Y+1
000c94 81ba      	LDD  R27,Y+1+1
000c95 91ed      	LD   R30,X+
000c96 83a9      	STD  Y+1,R26
000c97 83ba      	STD  Y+1+1,R27
000c98 2f1e      	MOV  R17,R30
000c99 30e0      	CPI  R30,0
000c9a f019      	BREQ _0x2080016
000c9b 931a      	ST   -Y,R17
000c9c dfd4      	RCALL _lcd_putchar
000c9d cff5      	RJMP _0x2080014
                 _0x2080016:
000c9e c00e      	RJMP _0x2120002
                 _lcd_putsf:
000c9f 931a      	ST   -Y,R17
                 _0x2080017:
000ca0 81e9      	LDD  R30,Y+1
000ca1 81fa      	LDD  R31,Y+1+1
000ca2 9631      	ADIW R30,1
000ca3 83e9      	STD  Y+1,R30
000ca4 83fa      	STD  Y+1+1,R31
000ca5 9731      	SBIW R30,1
000ca6 91e4      	LPM  R30,Z
000ca7 2f1e      	MOV  R17,R30
000ca8 30e0      	CPI  R30,0
000ca9 f019      	BREQ _0x2080019
000caa 931a      	ST   -Y,R17
000cab dfc5      	RCALL _lcd_putchar
000cac cff3      	RJMP _0x2080017
                 _0x2080019:
                 _0x2120002:
000cad 8118      	LDD  R17,Y+0
000cae 9623      	ADIW R28,3
000caf 9508      	RET
                 _lcd_init:
000cb0 9aa4      	SBI  0x14,4
000cb1 9aa5      	SBI  0x14,5
000cb2 9aa6      	SBI  0x14,6
000cb3 9aa7      	SBI  0x14,7
000cb4 9aa2      	SBI  0x14,2
000cb5 9aa0      	SBI  0x14,0
000cb6 9aa1      	SBI  0x14,1
000cb7 98aa      	CBI  0x15,2
000cb8 98a8      	CBI  0x15,0
000cb9 98a9      	CBI  0x15,1
000cba 81e8      	LD   R30,Y
000cbb 93e0 0640 	STS  __lcd_maxx,R30
000cbd 58e0      	SUBI R30,-LOW(128)
                +
000cbe 93e0 063c+STS __base_y_G104 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G104,2
000cc0 81e8      	LD   R30,Y
000cc1 54e0      	SUBI R30,-LOW(192)
                +
000cc2 93e0 063d+STS __base_y_G104 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G104,3
000cc4 e1e4      	LDI  R30,LOW(20)
000cc5 e0f0      	LDI  R31,HIGH(20)
000cc6 940e 0e24 	CALL SUBOPT_0x2E
000cc8 940e 0ed3 	CALL SUBOPT_0x4B
000cca 940e 0ed3 	CALL SUBOPT_0x4B
000ccc 940e 0ed3 	CALL SUBOPT_0x4B
000cce e2e0      	LDI  R30,LOW(32)
000ccf 93ea      	ST   -Y,R30
000cd0 df4e      	RCALL __lcd_write_nibble_G104
                +
000cd1 e980     +LDI R24 , LOW ( 400 )
000cd2 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000cd3 9701     +SBIW R24 , 1
000cd4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000cd5 e2e8      	LDI  R30,LOW(40)
000cd6 93ea      	ST   -Y,R30
000cd7 df6b      	RCALL __lcd_write_data
000cd8 e0e4      	LDI  R30,LOW(4)
000cd9 93ea      	ST   -Y,R30
000cda df68      	RCALL __lcd_write_data
000cdb e8e5      	LDI  R30,LOW(133)
000cdc 93ea      	ST   -Y,R30
000cdd df65      	RCALL __lcd_write_data
000cde e0e6      	LDI  R30,LOW(6)
000cdf 93ea      	ST   -Y,R30
000ce0 df62      	RCALL __lcd_write_data
000ce1 df80      	RCALL _lcd_clear
                 _0x2120001:
000ce2 9621      	ADIW R28,1
000ce3 9508      	RET
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _temp_voltage:
00055e           	.BYTE 0x2
                 _temp_current:
000560           	.BYTE 0x2
                 _set_voltage:
000562           	.BYTE 0x4
                 _set_current:
000566           	.BYTE 0x4
                 _actual_voltage_G000:
00056a           	.BYTE 0x2
                 _actual_btcurrentdp_G000:
00056c           	.BYTE 0x2
                 _actual_btcurrentip_G000:
00056e           	.BYTE 0x2
                 _actual_ipvoltage_G000:
000570           	.BYTE 0x2
                 _actual_opcurrentdp_G000:
000572           	.BYTE 0x2
                 _actual_opcurrentip_G000:
000574           	.BYTE 0x2
                 _set_flag:
000576           	.BYTE 0x2
                 _flag:
000578           	.BYTE 0x2
                 _n:
00057a           	.BYTE 0x2
                 _main_screen_trigger:
00057c           	.BYTE 0x2
                 _ms_update_flag:
00057e           	.BYTE 0x2
                 _current_mainscreen_flag:
000580           	.BYTE 0x2
                 _status:
000582           	.BYTE 0x2
                 _fault_flag:
000584           	.BYTE 0x2
                 _fltArray:
000586           	.BYTE 0x9
                 _disp_volt:
00058f           	.BYTE 0x3
                 _disp_current:
000592           	.BYTE 0x3
                 _disp_set_voltage:
000595           	.BYTE 0x3
                 _disp_set_btcurrent:
000598           	.BYTE 0x4
                 _disp_actual_voltage:
00059c           	.BYTE 0x3
                 _disp_actual_btcurrent:
00059f           	.BYTE 0x4
                 _disp_actual_ipvoltage:
0005a3           	.BYTE 0x3
                 _disp_actual_opcurrent:
0005a6           	.BYTE 0x4
                 _xmitMsg:
0005aa           	.BYTE 0x2
                 _rdataA:
0005ac           	.BYTE 0x14
                 _comStart:
0005c0           	.BYTE 0x2
                 _i:
0005c2           	.BYTE 0x2
                 _rx_buffer0:
0005c4           	.BYTE 0x20
                 _rx_wr_index0:
0005e4           	.BYTE 0x1
                 _rx_rd_index0:
0005e5           	.BYTE 0x1
                 _rx_counter0:
0005e6           	.BYTE 0x1
                 _tx_buffer0:
0005e7           	.BYTE 0x40
                 _tx_wr_index0:
000627           	.BYTE 0x1
                 _tx_rd_index0:
000628           	.BYTE 0x1
                 _tx_counter0:
000629           	.BYTE 0x1
                 _on_pressed:
00062a           	.BYTE 0x2
                 _off_pressed:
00062c           	.BYTE 0x2
                 _reset_pressed:
00062e           	.BYTE 0x2
                 _on_button_state:
000630           	.BYTE 0x2
                 _off_button_state:
000632           	.BYTE 0x2
                 _reset_button_state:
000634           	.BYTE 0x2
                 __seed_G101:
000636           	.BYTE 0x4
                 __base_y_G104:
00063a           	.BYTE 0x4
                 __lcd_x:
00063e           	.BYTE 0x1
                 __lcd_y:
00063f           	.BYTE 0x1
                 __lcd_maxx:
000640           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000ce4 01f8      	MOVW R30,R16
000ce5 81aa      	LDD  R26,Y+2
000ce6 81bb      	LDD  R27,Y+2+1
000ce7 0fea      	ADD  R30,R26
000ce8 1ffb      	ADC  R31,R27
000ce9 91e4      	LPM  R30,Z
000cea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000ceb 93fa      	ST   -Y,R31
000cec 93ea      	ST   -Y,R30
000ced 940c 018a 	JMP  _xmitString
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
000cef e0e1      	LDI  R30,LOW(1)
000cf0 e0f0      	LDI  R31,HIGH(1)
000cf1 93e0 0580 	STS  _current_mainscreen_flag,R30
000cf3 93f0 0581 	STS  _current_mainscreen_flag+1,R31
000cf5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
000cf6 940e 1142 	CALL __SAVELOCR4
000cf8 81ac      	LDD  R26,Y+4
000cf9 81bd      	LDD  R27,Y+4+1
000cfa e0ea      	LDI  R30,LOW(10)
000cfb e0f0      	LDI  R31,HIGH(10)
000cfc 940e 10ec 	CALL __MODW21
000cfe 018f      	MOVW R16,R30
000cff 81ac      	LDD  R26,Y+4
000d00 81bd      	LDD  R27,Y+4+1
000d01 e0ea      	LDI  R30,LOW(10)
000d02 e0f0      	LDI  R31,HIGH(10)
000d03 940e 10e7 	CALL __DIVW21
000d05 019f      	MOVW R18,R30
000d06 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
000d07 0fea      	ADD  R30,R26
000d08 1ffb      	ADC  R31,R27
000d09 010f      	MOVW R0,R30
000d0a 01fa      	MOVW R30,R20
000d0b 85ad      	LDD  R26,Y+13
000d0c 85be      	LDD  R27,Y+13+1
000d0d 0fae      	ADD  R26,R30
000d0e 1fbf      	ADC  R27,R31
000d0f 91ec      	LD   R30,X
000d10 01d0      	MOVW R26,R0
000d11 93ec      	ST   X,R30
000d12 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
000d13 e0f0      	LDI  R31,0
000d14 97f0      	SBIW R30,48
000d15 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000d16 e0aa      	LDI  R26,LOW(10)
000d17 e0b0      	LDI  R27,HIGH(10)
000d18 940e 10cf 	CALL __MULW12
                +
000d1a 0f6e     +ADD R22 , R30
000d1b 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000d1c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000d1d 50e1      	SUBI R30,LOW(1)
000d1e e0f0      	LDI  R31,0
000d1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000d20 e0e0      	LDI  R30,LOW(0)
000d21 93e0 05c2 	STS  _i,R30
000d23 93e0 05c3 	STS  _i+1,R30
000d25 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000d26 91e0 05c2 	LDS  R30,_i
000d28 91f0 05c3 	LDS  R31,_i+1
000d2a 55e4      	SUBI R30,LOW(-_rdataA)
000d2b 4ffa      	SBCI R31,HIGH(-_rdataA)
000d2c 8300      	ST   Z,R16
000d2d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000d2e 91ed      	LD   R30,X+
000d2f 91fd      	LD   R31,X+
000d30 9631      	ADIW R30,1
000d31 93fe      	ST   -X,R31
000d32 93ee      	ST   -X,R30
000d33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000d34 e0f0      	LDI  R31,0
000d35 68f0      	ORI  R31,HIGH(0x8000)
000d36 01df      	MOVW R26,R30
000d37 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000d38 0fee      	LSL  R30
000d39 1fff      	ROL  R31
000d3a 2bea      	OR   R30,R26
000d3b 2bfb      	OR   R31,R27
000d3c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
000d3d e0e0      	LDI  R30,LOW(0)
000d3e 93ea      	ST   -Y,R30
000d3f e0e2      	LDI  R30,LOW(2)
000d40 93ea      	ST   -Y,R30
000d41 940e 0c51 	CALL _lcd_gotoxy
                +
000d43 eee4     +LDI R30 , LOW ( 2 * _0x0 + ( 52 ) )
000d44 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 52 ) )
                 	__POINTW1FN _0x0,52
000d45 93fa      	ST   -Y,R31
000d46 93ea      	ST   -Y,R30
000d47 940c 0c9f 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xE:
000d49 93ea      	ST   -Y,R30
000d4a e0e2      	LDI  R30,LOW(2)
000d4b 93ea      	ST   -Y,R30
000d4c 940e 0c51 	CALL _lcd_gotoxy
                +
000d4e eee4     +LDI R30 , LOW ( 2 * _0x0 + ( 52 ) )
000d4f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 52 ) )
                 	__POINTW1FN _0x0,52
000d50 93fa      	ST   -Y,R31
000d51 93ea      	ST   -Y,R30
000d52 940c 0c9f 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xF:
000d54 e0e2      	LDI  R30,LOW(2)
000d55 93ea      	ST   -Y,R30
000d56 940c 0c51 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x10:
000d58 e0e0      	LDI  R30,LOW(0)
000d59 93ea      	ST   -Y,R30
000d5a 93ea      	ST   -Y,R30
000d5b 940c 0c51 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
                +
000d5d eee4     +LDI R30 , LOW ( 2 * _0x0 + ( 52 ) )
000d5e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 52 ) )
                 	__POINTW1FN _0x0,52
000d5f 93fa      	ST   -Y,R31
000d60 93ea      	ST   -Y,R30
000d61 940c 0c9f 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x12:
000d63 e0e0      	LDI  R30,LOW(0)
000d64 93ea      	ST   -Y,R30
000d65 e0e1      	LDI  R30,LOW(1)
000d66 93ea      	ST   -Y,R30
000d67 940c 0c51 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x13:
000d69 93ea      	ST   -Y,R30
000d6a e0e3      	LDI  R30,LOW(3)
000d6b 93ea      	ST   -Y,R30
000d6c 940c 0c51 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x14:
000d6e 93fa      	ST   -Y,R31
000d6f 93ea      	ST   -Y,R30
                +
000d70 eee8     +LDI R30 , LOW ( 2 * _0x0 + ( 56 ) )
000d71 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 56 ) )
                 	__POINTW1FN _0x0,56
000d72 93fa      	ST   -Y,R31
000d73 93ea      	ST   -Y,R30
000d74 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
000d75 91e0 055e 	LDS  R30,_temp_voltage
000d77 91f0 055f 	LDS  R31,_temp_voltage+1
000d79 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
000d7a 940e 10c2 	CALL __CWD1
000d7c 940e 111f 	CALL __PUTPARD1
000d7e e084      	LDI  R24,4
000d7f 940e 0a25 	CALL _sprintf
000d81 9628      	ADIW R28,8
000d82 cfe0      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
000d83 91e0 0560 	LDS  R30,_temp_current
000d85 91f0 0561 	LDS  R31,_temp_current+1
000d87 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x18:
000d88 e6e4      	LDI  R30,LOW(100)
000d89 e0f0      	LDI  R31,HIGH(100)
000d8a 93fa      	ST   -Y,R31
000d8b 93ea      	ST   -Y,R30
000d8c 940c 0edc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
000d8e e0e1      	LDI  R30,LOW(1)
000d8f e0f0      	LDI  R31,HIGH(1)
000d90 93e0 057c 	STS  _main_screen_trigger,R30
000d92 93f0 057d 	STS  _main_screen_trigger+1,R31
000d94 cf5a      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000d95 e6e4      	LDI  R30,LOW(100)
000d96 e0f0      	LDI  R31,HIGH(100)
000d97 15e4      	CP   R30,R4
000d98 05f5      	CPC  R31,R5
000d99 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1B:
000d9a 01d2      	MOVW R26,R4
000d9b e0ea      	LDI  R30,LOW(10)
000d9c e0f0      	LDI  R31,HIGH(10)
000d9d 940e 10e7 	CALL __DIVW21
000d9f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0x1C:
000da0 931a      	ST   -Y,R17
000da1 930a      	ST   -Y,R16
                +
000da2 e0e0     +LDI R30 , LOW ( 0x41200000 )
000da3 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000da4 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000da5 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000da6 940e 111f 	CALL __PUTPARD1
000da8 81ae      	LDD  R26,Y+6
000da9 81bf      	LDD  R27,Y+6+1
000daa 19a8      	SUB  R26,R8
000dab 09b9      	SBC  R27,R9
000dac e0e1      	LDI  R30,LOW(1)
000dad e0f0      	LDI  R31,HIGH(1)
000dae 940e 112a 	CALL __SWAPW12
000db0 1bea      	SUB  R30,R26
000db1 0bfb      	SBC  R31,R27
000db2 940e 10c2 	CALL __CWD1
000db4 940e 0f75 	CALL __CDF1
000db6 940e 111f 	CALL __PUTPARD1
000db8 940e 0bc0 	CALL _pow
000dba 940e 0f3c 	CALL __CFD1U
000dbc 018f      	MOVW R16,R30
000dbd 940e 042a 	CALL _pointer_display_horiz
000dbf cfc8      	RJMP SUBOPT_0x18
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1D:
000dc0 91a0 055e 	LDS  R26,_temp_voltage
000dc2 91b0 055f 	LDS  R27,_temp_voltage+1
000dc4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000dc5 dffa      	RCALL SUBOPT_0x1D
000dc6 eee8      	LDI  R30,LOW(1000)
000dc7 e0f3      	LDI  R31,HIGH(1000)
000dc8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1F:
000dc9 940e 10ec 	CALL __MODW21
000dcb 93e0 055e 	STS  _temp_voltage,R30
000dcd 93f0 055f 	STS  _temp_voltage+1,R31
000dcf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x20:
000dd0 01f4      	MOVW R30,R8
000dd1 9631      	ADIW R30,1
000dd2 014f      	MOVW R8,R30
000dd3 81ea      	LDD  R30,Y+2
000dd4 81fb      	LDD  R31,Y+2+1
000dd5 01d4      	MOVW R26,R8
000dd6 940e 10ec 	CALL __MODW21
000dd8 014f      	MOVW R8,R30
000dd9 940c 042a 	JMP  _pointer_display_horiz
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x21:
000ddb 940e 0c62 	CALL _lcd_clear
000ddd cf7a      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x22:
000dde 93fa      	ST   -Y,R31
000ddf 93ea      	ST   -Y,R30
000de0 940c 0c92 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x23:
000de2 93ea      	ST   -Y,R30
000de3 e0e1      	LDI  R30,LOW(1)
000de4 93ea      	ST   -Y,R30
000de5 940c 0c51 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0x24:
000de7 93fa      	ST   -Y,R31
000de8 93ea      	ST   -Y,R30
000de9 940c 0c9f 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
000deb 93e0 0562 	STS  _set_voltage,R30
000ded 93f0 0563 	STS  _set_voltage+1,R31
000def 9360 0564 	STS  _set_voltage+2,R22
000df1 9370 0565 	STS  _set_voltage+3,R23
000df3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x26:
000df4 e0eb      	LDI  R30,LOW(11)
000df5 e0f0      	LDI  R31,HIGH(11)
000df6 93e0 0578 	STS  _flag,R30
000df8 93f0 0579 	STS  _flag+1,R31
000dfa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x27:
000dfb 940e 10e7 	CALL __DIVW21
000dfd 5de0      	SUBI R30,-LOW(48)
000dfe 93ea      	ST   -Y,R30
000dff 940c 039e 	JMP  _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
000e01 e3ee      	LDI  R30,LOW(62)
000e02 93ea      	ST   -Y,R30
000e03 940e 039e 	CALL _putchar
000e05 efe4      	LDI  R30,LOW(500)
000e06 e0f1      	LDI  R31,HIGH(500)
000e07 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
000e08 e0e0      	LDI  R30,LOW(0)
000e09 93ea      	ST   -Y,R30
000e0a cf49      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2A:
000e0b 91a0 0560 	LDS  R26,_temp_current
000e0d 91b0 0561 	LDS  R27,_temp_current+1
000e0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2B:
000e10 dffa      	RCALL SUBOPT_0x2A
000e11 eee8      	LDI  R30,LOW(1000)
000e12 e0f3      	LDI  R31,HIGH(1000)
000e13 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2C:
000e14 940e 10ec 	CALL __MODW21
000e16 93e0 0560 	STS  _temp_current,R30
000e18 93f0 0561 	STS  _temp_current+1,R31
000e1a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
000e1b 93e0 0566 	STS  _set_current,R30
000e1d 93f0 0567 	STS  _set_current+1,R31
000e1f 9360 0568 	STS  _set_current+2,R22
000e21 9370 0569 	STS  _set_current+3,R23
000e23 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
000e24 93fa      	ST   -Y,R31
000e25 93ea      	ST   -Y,R30
000e26 940c 0edc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
000e28 e0e1      	LDI  R30,LOW(1)
000e29 93ea      	ST   -Y,R30
000e2a e0e0      	LDI  R30,LOW(0)
000e2b 93ea      	ST   -Y,R30
000e2c 940c 0c51 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
000e2e 93ea      	ST   -Y,R30
000e2f e0e0      	LDI  R30,LOW(0)
000e30 93ea      	ST   -Y,R30
000e31 940c 0c51 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x31:
000e33 940e 111f 	CALL __PUTPARD1
000e35 e084      	LDI  R24,4
000e36 940e 0a25 	CALL _sprintf
000e38 9628      	ADIW R28,8
000e39 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x32:
000e3a 91a0 0584 	LDS  R26,_fault_flag
000e3c 91b0 0585 	LDS  R27,_fault_flag+1
000e3e 9711      	SBIW R26,1
000e3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
000e40 e0e4      	LDI  R30,LOW(4)
000e41 93ea      	ST   -Y,R30
000e42 cf11      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
000e43 93fa      	ST   -Y,R31
000e44 93ea      	ST   -Y,R30
                +
000e45 e1e7     +LDI R30 , LOW ( 2 * _0x0 + ( 359 ) )
000e46 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 359 ) )
                 	__POINTW1FN _0x0,359
000e47 93fa      	ST   -Y,R31
000e48 93ea      	ST   -Y,R30
000e49 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x35:
000e4a 940e 10c2 	CALL __CWD1
000e4c 940e 111f 	CALL __PUTPARD1
000e4e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x36:
000e4f 932a      	ST   -Y,R18
000e50 85ed      	LDD  R30,Y+13
000e51 85fe      	LDD  R31,Y+13+1
000e52 93fa      	ST   -Y,R31
000e53 93ea      	ST   -Y,R30
000e54 89e9      	LDD  R30,Y+17
000e55 89fa      	LDD  R31,Y+17+1
000e56 9509      	ICALL
000e57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x37:
000e58 89e8      	LDD  R30,Y+16
000e59 89f9      	LDD  R31,Y+16+1
000e5a 9734      	SBIW R30,4
000e5b 8be8      	STD  Y+16,R30
000e5c 8bf9      	STD  Y+16+1,R31
000e5d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x38:
000e5e 85ed      	LDD  R30,Y+13
000e5f 85fe      	LDD  R31,Y+13+1
000e60 93fa      	ST   -Y,R31
000e61 93ea      	ST   -Y,R30
000e62 89e9      	LDD  R30,Y+17
000e63 89fa      	LDD  R31,Y+17+1
000e64 9509      	ICALL
000e65 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x39:
000e66 89a8      	LDD  R26,Y+16
000e67 89b9      	LDD  R27,Y+16+1
000e68 9614      	ADIW R26,4
000e69 940e 1108 	CALL __GETW1P
000e6b 83ee      	STD  Y+6,R30
000e6c 83ff      	STD  Y+6+1,R31
000e6d 93fa      	ST   -Y,R31
000e6e 93ea      	ST   -Y,R30
000e6f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3A:
000e70 89a8      	LDD  R26,Y+16
000e71 89b9      	LDD  R27,Y+16+1
000e72 9614      	ADIW R26,4
000e73 940e 1108 	CALL __GETW1P
000e75 87ea      	STD  Y+10,R30
000e76 87fb      	STD  Y+10+1,R31
000e77 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
000e78 01de      	MOVW R26,R28
000e79 961c      	ADIW R26,12
000e7a 940e 10b2 	CALL __ADDW2R15
000e7c 940e 1108 	CALL __GETW1P
000e7e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3C:
000e7f 940e 1115 	CALL __GETD1S0
000e81 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
                +
000e82 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000e83 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000e84 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000e85 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000e86 940e 0fa8 	CALL __SUBF12
000e88 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3E:
                +
000e89 81ae     +LDD R26 , Y + 6
000e8a 81bf     +LDD R27 , Y + 6 + 1
000e8b 8588     +LDD R24 , Y + 6 + 2
000e8c 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000e8d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3F:
                +
000e8e 81ee     +LDD R30 , Y + 6
000e8f 81ff     +LDD R31 , Y + 6 + 1
000e90 8568     +LDD R22 , Y + 6 + 2
000e91 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000e92 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x40:
                +
000e93 83ee     +STD Y + 6 , R30
000e94 83ff     +STD Y + 6 + 1 , R31
000e95 8768     +STD Y + 6 + 2 , R22
000e96 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000e97 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x41:
000e98 dff5      	RCALL SUBOPT_0x3F
000e99 cfef      	RJMP SUBOPT_0x3E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x42:
000e9a 940e 0fff 	CALL __MULF12
                +
000e9c 83ea     +STD Y + 2 , R30
000e9d 83fb     +STD Y + 2 + 1 , R31
000e9e 836c     +STD Y + 2 + 2 , R22
000e9f 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000ea0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x43:
000ea1 940e 1124 	CALL __SWAPD12
000ea3 940e 0fa8 	CALL __SUBF12
000ea5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x44:
                +
000ea6 81ea     +LDD R30 , Y + 2
000ea7 81fb     +LDD R31 , Y + 2 + 1
000ea8 816c     +LDD R22 , Y + 2 + 2
000ea9 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000eaa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x45:
                +
000eab 85aa     +LDD R26 , Y + 10
000eac 85bb     +LDD R27 , Y + 10 + 1
000ead 858c     +LDD R24 , Y + 10 + 2
000eae 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000eaf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x46:
                +
000eb0 e0e0     +LDI R30 , LOW ( 0x0 )
000eb1 e0f0     +LDI R31 , HIGH ( 0x0 )
000eb2 e060     +LDI R22 , BYTE3 ( 0x0 )
000eb3 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000eb4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x47:
                +
000eb5 85e8     +LDD R30 , Y + 8
000eb6 85f9     +LDD R31 , Y + 8 + 1
000eb7 856a     +LDD R22 , Y + 8 + 2
000eb8 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000eb9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x48:
                +
000eba 81ec     +LDD R30 , Y + 4
000ebb 81fd     +LDD R31 , Y + 4 + 1
000ebc 816e     +LDD R22 , Y + 4 + 2
000ebd 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000ebe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x49:
000ebf 940e 111f 	CALL __PUTPARD1
000ec1 940e 0a9d 	CALL _log
                +
000ec3 81ac     +LDD R26 , Y + 4
000ec4 81bd     +LDD R27 , Y + 4 + 1
000ec5 818e     +LDD R24 , Y + 4 + 2
000ec6 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000ec7 940e 0fff 	CALL __MULF12
000ec9 940e 111f 	CALL __PUTPARD1
000ecb 940c 0b25 	JMP  _exp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4A:
000ecd 93ea      	ST   -Y,R30
000ece 940e 0c43 	CALL __lcd_write_data
000ed0 e0e3      	LDI  R30,LOW(3)
000ed1 e0f0      	LDI  R31,HIGH(3)
000ed2 cf51      	RJMP SUBOPT_0x2E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4B:
000ed3 e3e0      	LDI  R30,LOW(48)
000ed4 93ea      	ST   -Y,R30
000ed5 940e 0c1f 	CALL __lcd_write_nibble_G104
                +
000ed7 e980     +LDI R24 , LOW ( 400 )
000ed8 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000ed9 9701     +SBIW R24 , 1
000eda f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000edb 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000edc 91e9      	ld   r30,y+
000edd 91f9      	ld   r31,y+
000ede 9630      	adiw r30,0
000edf f039      	breq __delay_ms1
                 __delay_ms0:
                +
000ee0 ea80     +LDI R24 , LOW ( 0xFA0 )
000ee1 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000ee2 9701     +SBIW R24 , 1
000ee3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000ee4 95a8      	wdr
000ee5 9731      	sbiw r30,1
000ee6 f7c9      	brne __delay_ms0
                 __delay_ms1:
000ee7 9508      	ret
                 
                 _frexp:
000ee8 91a9      	LD   R26,Y+
000ee9 91b9      	LD   R27,Y+
000eea 91e9      	LD   R30,Y+
000eeb 91f9      	LD   R31,Y+
000eec 9169      	LD   R22,Y+
000eed 9179      	LD   R23,Y+
000eee fb77      	BST  R23,7
000eef 0f66      	LSL  R22
000ef0 1f77      	ROL  R23
000ef1 2788      	CLR  R24
000ef2 577e      	SUBI R23,0x7E
000ef3 0b88      	SBC  R24,R24
000ef4 937d      	ST   X+,R23
000ef5 938c      	ST   X,R24
000ef6 e77e      	LDI  R23,0x7E
000ef7 9576      	LSR  R23
000ef8 9567      	ROR  R22
000ef9 f07e      	BRTS __ANEGF1
000efa 9508      	RET
                 
                 _ldexp:
000efb 91a9      	LD   R26,Y+
000efc 91b9      	LD   R27,Y+
000efd 91e9      	LD   R30,Y+
000efe 91f9      	LD   R31,Y+
000eff 9169      	LD   R22,Y+
000f00 9179      	LD   R23,Y+
000f01 fb77      	BST  R23,7
000f02 0f66      	LSL  R22
000f03 1f77      	ROL  R23
000f04 0f7a      	ADD  R23,R26
000f05 9576      	LSR  R23
000f06 9567      	ROR  R22
000f07 f00e      	BRTS __ANEGF1
000f08 9508      	RET
                 
                 __ANEGF1:
000f09 9730      	SBIW R30,0
000f0a 4060      	SBCI R22,0
000f0b 4070      	SBCI R23,0
000f0c f009      	BREQ __ANEGF10
000f0d 5870      	SUBI R23,0x80
                 __ANEGF10:
000f0e 9508      	RET
                 
                 __ROUND_REPACK:
000f0f 2355      	TST  R21
000f10 f442      	BRPL __REPACK
000f11 3850      	CPI  R21,0x80
000f12 f411      	BRNE __ROUND_REPACK0
000f13 ffe0      	SBRS R30,0
000f14 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000f15 9631      	ADIW R30,1
000f16 1f69      	ADC  R22,R25
000f17 1f79      	ADC  R23,R25
000f18 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000f19 e850      	LDI  R21,0x80
000f1a 2757      	EOR  R21,R23
000f1b f411      	BRNE __REPACK0
000f1c 935f      	PUSH R21
000f1d c0cf      	RJMP __ZERORES
                 __REPACK0:
000f1e 3f5f      	CPI  R21,0xFF
000f1f f031      	BREQ __REPACK1
000f20 0f66      	LSL  R22
000f21 0c00      	LSL  R0
000f22 9557      	ROR  R21
000f23 9567      	ROR  R22
000f24 2f75      	MOV  R23,R21
000f25 9508      	RET
                 __REPACK1:
000f26 935f      	PUSH R21
000f27 2000      	TST  R0
000f28 f00a      	BRMI __REPACK2
000f29 c0cf      	RJMP __MAXRES
                 __REPACK2:
000f2a c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000f2b e850      	LDI  R21,0x80
000f2c 2e19      	MOV  R1,R25
000f2d 2215      	AND  R1,R21
000f2e 0f88      	LSL  R24
000f2f 1f99      	ROL  R25
000f30 2795      	EOR  R25,R21
000f31 0f55      	LSL  R21
000f32 9587      	ROR  R24
                 
                 __UNPACK1:
000f33 e850      	LDI  R21,0x80
000f34 2e07      	MOV  R0,R23
000f35 2205      	AND  R0,R21
000f36 0f66      	LSL  R22
000f37 1f77      	ROL  R23
000f38 2775      	EOR  R23,R21
000f39 0f55      	LSL  R21
000f3a 9567      	ROR  R22
000f3b 9508      	RET
                 
                 __CFD1U:
000f3c 9468      	SET
000f3d c001      	RJMP __CFD1U0
                 __CFD1:
000f3e 94e8      	CLT
                 __CFD1U0:
000f3f 935f      	PUSH R21
000f40 dff2      	RCALL __UNPACK1
000f41 3870      	CPI  R23,0x80
000f42 f018      	BRLO __CFD10
000f43 3f7f      	CPI  R23,0xFF
000f44 f408      	BRCC __CFD10
000f45 c0a7      	RJMP __ZERORES
                 __CFD10:
000f46 e156      	LDI  R21,22
000f47 1b57      	SUB  R21,R23
000f48 f4aa      	BRPL __CFD11
000f49 9551      	NEG  R21
000f4a 3058      	CPI  R21,8
000f4b f40e      	BRTC __CFD19
000f4c 3059      	CPI  R21,9
                 __CFD19:
000f4d f030      	BRLO __CFD17
000f4e efef      	SER  R30
000f4f efff      	SER  R31
000f50 ef6f      	SER  R22
000f51 e77f      	LDI  R23,0x7F
000f52 f977      	BLD  R23,7
000f53 c01a      	RJMP __CFD15
                 __CFD17:
000f54 2777      	CLR  R23
000f55 2355      	TST  R21
000f56 f0b9      	BREQ __CFD15
                 __CFD18:
000f57 0fee      	LSL  R30
000f58 1fff      	ROL  R31
000f59 1f66      	ROL  R22
000f5a 1f77      	ROL  R23
000f5b 955a      	DEC  R21
000f5c f7d1      	BRNE __CFD18
000f5d c010      	RJMP __CFD15
                 __CFD11:
000f5e 2777      	CLR  R23
                 __CFD12:
000f5f 3058      	CPI  R21,8
000f60 f028      	BRLO __CFD13
000f61 2fef      	MOV  R30,R31
000f62 2ff6      	MOV  R31,R22
000f63 2f67      	MOV  R22,R23
000f64 5058      	SUBI R21,8
000f65 cff9      	RJMP __CFD12
                 __CFD13:
000f66 2355      	TST  R21
000f67 f031      	BREQ __CFD15
                 __CFD14:
000f68 9576      	LSR  R23
000f69 9567      	ROR  R22
000f6a 95f7      	ROR  R31
000f6b 95e7      	ROR  R30
000f6c 955a      	DEC  R21
000f6d f7d1      	BRNE __CFD14
                 __CFD15:
000f6e 2000      	TST  R0
000f6f f40a      	BRPL __CFD16
000f70 d149      	RCALL __ANEGD1
                 __CFD16:
000f71 915f      	POP  R21
000f72 9508      	RET
                 
                 __CDF1U:
000f73 9468      	SET
000f74 c001      	RJMP __CDF1U0
                 __CDF1:
000f75 94e8      	CLT
                 __CDF1U0:
000f76 9730      	SBIW R30,0
000f77 4060      	SBCI R22,0
000f78 4070      	SBCI R23,0
000f79 f0b1      	BREQ __CDF10
000f7a 2400      	CLR  R0
000f7b f026      	BRTS __CDF11
000f7c 2377      	TST  R23
000f7d f412      	BRPL __CDF11
000f7e 9400      	COM  R0
000f7f d13a      	RCALL __ANEGD1
                 __CDF11:
000f80 2e17      	MOV  R1,R23
000f81 e17e      	LDI  R23,30
000f82 2011      	TST  R1
                 __CDF12:
000f83 f032      	BRMI __CDF13
000f84 957a      	DEC  R23
000f85 0fee      	LSL  R30
000f86 1fff      	ROL  R31
000f87 1f66      	ROL  R22
000f88 1c11      	ROL  R1
000f89 cff9      	RJMP __CDF12
                 __CDF13:
000f8a 2fef      	MOV  R30,R31
000f8b 2ff6      	MOV  R31,R22
000f8c 2d61      	MOV  R22,R1
000f8d 935f      	PUSH R21
000f8e df8a      	RCALL __REPACK
000f8f 915f      	POP  R21
                 __CDF10:
000f90 9508      	RET
                 
                 __SWAPACC:
000f91 934f      	PUSH R20
000f92 01af      	MOVW R20,R30
000f93 01fd      	MOVW R30,R26
000f94 01da      	MOVW R26,R20
000f95 01ab      	MOVW R20,R22
000f96 01bc      	MOVW R22,R24
000f97 01ca      	MOVW R24,R20
000f98 2d40      	MOV  R20,R0
000f99 2c01      	MOV  R0,R1
000f9a 2e14      	MOV  R1,R20
000f9b 914f      	POP  R20
000f9c 9508      	RET
                 
                 __UADD12:
000f9d 0fea      	ADD  R30,R26
000f9e 1ffb      	ADC  R31,R27
000f9f 1f68      	ADC  R22,R24
000fa0 9508      	RET
                 
                 __NEGMAN1:
000fa1 95e0      	COM  R30
000fa2 95f0      	COM  R31
000fa3 9560      	COM  R22
000fa4 5fef      	SUBI R30,-1
000fa5 4fff      	SBCI R31,-1
000fa6 4f6f      	SBCI R22,-1
000fa7 9508      	RET
                 
                 __SUBF12:
000fa8 935f      	PUSH R21
000fa9 df81      	RCALL __UNPACK
000faa 3890      	CPI  R25,0x80
000fab f171      	BREQ __ADDF129
000fac e850      	LDI  R21,0x80
000fad 2615      	EOR  R1,R21
                 
000fae c004      	RJMP __ADDF120
                 
                 __ADDF12:
000faf 935f      	PUSH R21
000fb0 df7a      	RCALL __UNPACK
000fb1 3890      	CPI  R25,0x80
000fb2 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000fb3 3870      	CPI  R23,0x80
000fb4 f121      	BREQ __ADDF128
                 __ADDF121:
000fb5 2f57      	MOV  R21,R23
000fb6 1b59      	SUB  R21,R25
000fb7 f12b      	BRVS __ADDF1211
000fb8 f412      	BRPL __ADDF122
000fb9 dfd7      	RCALL __SWAPACC
000fba cffa      	RJMP __ADDF121
                 __ADDF122:
000fbb 3158      	CPI  R21,24
000fbc f018      	BRLO __ADDF123
000fbd 27aa      	CLR  R26
000fbe 27bb      	CLR  R27
000fbf 2788      	CLR  R24
                 __ADDF123:
000fc0 3058      	CPI  R21,8
000fc1 f028      	BRLO __ADDF124
000fc2 2fab      	MOV  R26,R27
000fc3 2fb8      	MOV  R27,R24
000fc4 2788      	CLR  R24
000fc5 5058      	SUBI R21,8
000fc6 cff9      	RJMP __ADDF123
                 __ADDF124:
000fc7 2355      	TST  R21
000fc8 f029      	BREQ __ADDF126
                 __ADDF125:
000fc9 9586      	LSR  R24
000fca 95b7      	ROR  R27
000fcb 95a7      	ROR  R26
000fcc 955a      	DEC  R21
000fcd f7d9      	BRNE __ADDF125
                 __ADDF126:
000fce 2d50      	MOV  R21,R0
000fcf 2551      	EOR  R21,R1
000fd0 f072      	BRMI __ADDF127
000fd1 dfcb      	RCALL __UADD12
000fd2 f438      	BRCC __ADDF129
000fd3 9567      	ROR  R22
000fd4 95f7      	ROR  R31
000fd5 95e7      	ROR  R30
000fd6 9573      	INC  R23
000fd7 f413      	BRVC __ADDF129
000fd8 c020      	RJMP __MAXRES
                 __ADDF128:
000fd9 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000fda df3e      	RCALL __REPACK
000fdb 915f      	POP  R21
000fdc 9508      	RET
                 __ADDF1211:
000fdd f7d8      	BRCC __ADDF128
000fde cffb      	RJMP __ADDF129
                 __ADDF127:
000fdf 1bea      	SUB  R30,R26
000fe0 0bfb      	SBC  R31,R27
000fe1 0b68      	SBC  R22,R24
000fe2 f051      	BREQ __ZERORES
000fe3 f410      	BRCC __ADDF1210
000fe4 9400      	COM  R0
000fe5 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000fe6 2366      	TST  R22
000fe7 f392      	BRMI __ADDF129
000fe8 0fee      	LSL  R30
000fe9 1fff      	ROL  R31
000fea 1f66      	ROL  R22
000feb 957a      	DEC  R23
000fec f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000fed 27ee      	CLR  R30
000fee 27ff      	CLR  R31
000fef 2766      	CLR  R22
000ff0 2777      	CLR  R23
000ff1 915f      	POP  R21
000ff2 9508      	RET
                 
                 __MINRES:
000ff3 efef      	SER  R30
000ff4 efff      	SER  R31
000ff5 e76f      	LDI  R22,0x7F
000ff6 ef7f      	SER  R23
000ff7 915f      	POP  R21
000ff8 9508      	RET
                 
                 __MAXRES:
000ff9 efef      	SER  R30
000ffa efff      	SER  R31
000ffb e76f      	LDI  R22,0x7F
000ffc e77f      	LDI  R23,0x7F
000ffd 915f      	POP  R21
000ffe 9508      	RET
                 
                 __MULF12:
000fff 935f      	PUSH R21
001000 df2a      	RCALL __UNPACK
001001 3870      	CPI  R23,0x80
001002 f351      	BREQ __ZERORES
001003 3890      	CPI  R25,0x80
001004 f341      	BREQ __ZERORES
001005 2401      	EOR  R0,R1
001006 9408      	SEC
001007 1f79      	ADC  R23,R25
001008 f423      	BRVC __MULF124
001009 f31c      	BRLT __ZERORES
                 __MULF125:
00100a 2000      	TST  R0
00100b f33a      	BRMI __MINRES
00100c cfec      	RJMP __MAXRES
                 __MULF124:
00100d 920f      	PUSH R0
00100e 931f      	PUSH R17
00100f 932f      	PUSH R18
001010 933f      	PUSH R19
001011 934f      	PUSH R20
001012 2711      	CLR  R17
001013 2722      	CLR  R18
001014 2799      	CLR  R25
001015 9f68      	MUL  R22,R24
001016 01a0      	MOVW R20,R0
001017 9f8f      	MUL  R24,R31
001018 2d30      	MOV  R19,R0
001019 0d41      	ADD  R20,R1
00101a 1f59      	ADC  R21,R25
00101b 9f6b      	MUL  R22,R27
00101c 0d30      	ADD  R19,R0
00101d 1d41      	ADC  R20,R1
00101e 1f59      	ADC  R21,R25
00101f 9f8e      	MUL  R24,R30
001020 d027      	RCALL __MULF126
001021 9fbf      	MUL  R27,R31
001022 d025      	RCALL __MULF126
001023 9f6a      	MUL  R22,R26
001024 d023      	RCALL __MULF126
001025 9fbe      	MUL  R27,R30
001026 d01d      	RCALL __MULF127
001027 9faf      	MUL  R26,R31
001028 d01b      	RCALL __MULF127
001029 9fae      	MUL  R26,R30
00102a 0d11      	ADD  R17,R1
00102b 1f29      	ADC  R18,R25
00102c 1f39      	ADC  R19,R25
00102d 1f49      	ADC  R20,R25
00102e 1f59      	ADC  R21,R25
00102f 2fe3      	MOV  R30,R19
001030 2ff4      	MOV  R31,R20
001031 2f65      	MOV  R22,R21
001032 2f52      	MOV  R21,R18
001033 914f      	POP  R20
001034 913f      	POP  R19
001035 912f      	POP  R18
001036 911f      	POP  R17
001037 900f      	POP  R0
001038 2366      	TST  R22
001039 f02a      	BRMI __MULF122
00103a 0f55      	LSL  R21
00103b 1fee      	ROL  R30
00103c 1fff      	ROL  R31
00103d 1f66      	ROL  R22
00103e c002      	RJMP __MULF123
                 __MULF122:
00103f 9573      	INC  R23
001040 f24b      	BRVS __MULF125
                 __MULF123:
001041 decd      	RCALL __ROUND_REPACK
001042 915f      	POP  R21
001043 9508      	RET
                 
                 __MULF127:
001044 0d10      	ADD  R17,R0
001045 1d21      	ADC  R18,R1
001046 1f39      	ADC  R19,R25
001047 c002      	RJMP __MULF128
                 __MULF126:
001048 0d20      	ADD  R18,R0
001049 1d31      	ADC  R19,R1
                 __MULF128:
00104a 1f49      	ADC  R20,R25
00104b 1f59      	ADC  R21,R25
00104c 9508      	RET
                 
                 __DIVF21:
00104d 935f      	PUSH R21
00104e dedc      	RCALL __UNPACK
00104f 3870      	CPI  R23,0x80
001050 f421      	BRNE __DIVF210
001051 2011      	TST  R1
                 __DIVF211:
001052 f40a      	BRPL __DIVF219
001053 cf9f      	RJMP __MINRES
                 __DIVF219:
001054 cfa4      	RJMP __MAXRES
                 __DIVF210:
001055 3890      	CPI  R25,0x80
001056 f409      	BRNE __DIVF218
                 __DIVF217:
001057 cf95      	RJMP __ZERORES
                 __DIVF218:
001058 2401      	EOR  R0,R1
001059 9408      	SEC
00105a 0b97      	SBC  R25,R23
00105b f41b      	BRVC __DIVF216
00105c f3d4      	BRLT __DIVF217
00105d 2000      	TST  R0
00105e cff3      	RJMP __DIVF211
                 __DIVF216:
00105f 2f79      	MOV  R23,R25
001060 931f      	PUSH R17
001061 932f      	PUSH R18
001062 933f      	PUSH R19
001063 934f      	PUSH R20
001064 2411      	CLR  R1
001065 2711      	CLR  R17
001066 2722      	CLR  R18
001067 2733      	CLR  R19
001068 2744      	CLR  R20
001069 2755      	CLR  R21
00106a e290      	LDI  R25,32
                 __DIVF212:
00106b 17ae      	CP   R26,R30
00106c 07bf      	CPC  R27,R31
00106d 0786      	CPC  R24,R22
00106e 0741      	CPC  R20,R17
00106f f030      	BRLO __DIVF213
001070 1bae      	SUB  R26,R30
001071 0bbf      	SBC  R27,R31
001072 0b86      	SBC  R24,R22
001073 0b41      	SBC  R20,R17
001074 9408      	SEC
001075 c001      	RJMP __DIVF214
                 __DIVF213:
001076 9488      	CLC
                 __DIVF214:
001077 1f55      	ROL  R21
001078 1f22      	ROL  R18
001079 1f33      	ROL  R19
00107a 1c11      	ROL  R1
00107b 1faa      	ROL  R26
00107c 1fbb      	ROL  R27
00107d 1f88      	ROL  R24
00107e 1f44      	ROL  R20
00107f 959a      	DEC  R25
001080 f751      	BRNE __DIVF212
001081 01f9      	MOVW R30,R18
001082 2d61      	MOV  R22,R1
001083 914f      	POP  R20
001084 913f      	POP  R19
001085 912f      	POP  R18
001086 911f      	POP  R17
001087 2366      	TST  R22
001088 f032      	BRMI __DIVF215
001089 0f55      	LSL  R21
00108a 1fee      	ROL  R30
00108b 1fff      	ROL  R31
00108c 1f66      	ROL  R22
00108d 957a      	DEC  R23
00108e f243      	BRVS __DIVF217
                 __DIVF215:
00108f de7f      	RCALL __ROUND_REPACK
001090 915f      	POP  R21
001091 9508      	RET
                 
                 __CMPF12:
001092 2399      	TST  R25
001093 f09a      	BRMI __CMPF120
001094 2377      	TST  R23
001095 f042      	BRMI __CMPF121
001096 1797      	CP   R25,R23
001097 f048      	BRLO __CMPF122
001098 f429      	BRNE __CMPF121
001099 17ae      	CP   R26,R30
00109a 07bf      	CPC  R27,R31
00109b 0786      	CPC  R24,R22
00109c f020      	BRLO __CMPF122
00109d f031      	BREQ __CMPF123
                 __CMPF121:
00109e 9498      	CLZ
00109f 9488      	CLC
0010a0 9508      	RET
                 __CMPF122:
0010a1 9498      	CLZ
0010a2 9408      	SEC
0010a3 9508      	RET
                 __CMPF123:
0010a4 9418      	SEZ
0010a5 9488      	CLC
0010a6 9508      	RET
                 __CMPF120:
0010a7 2377      	TST  R23
0010a8 f7c2      	BRPL __CMPF122
0010a9 1797      	CP   R25,R23
0010aa f398      	BRLO __CMPF121
0010ab f7a9      	BRNE __CMPF122
0010ac 17ea      	CP   R30,R26
0010ad 07fb      	CPC  R31,R27
0010ae 0768      	CPC  R22,R24
0010af f388      	BRLO __CMPF122
0010b0 f399      	BREQ __CMPF123
0010b1 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
0010b2 2400      	CLR  R0
0010b3 0daf      	ADD  R26,R15
0010b4 1db0      	ADC  R27,R0
0010b5 9508      	RET
                 
                 __ANEGW1:
0010b6 95f1      	NEG  R31
0010b7 95e1      	NEG  R30
0010b8 40f0      	SBCI R31,0
0010b9 9508      	RET
                 
                 __ANEGD1:
0010ba 95f0      	COM  R31
0010bb 9560      	COM  R22
0010bc 9570      	COM  R23
0010bd 95e1      	NEG  R30
0010be 4fff      	SBCI R31,-1
0010bf 4f6f      	SBCI R22,-1
0010c0 4f7f      	SBCI R23,-1
0010c1 9508      	RET
                 
                 __CWD1:
0010c2 2f6f      	MOV  R22,R31
0010c3 0f66      	ADD  R22,R22
0010c4 0b66      	SBC  R22,R22
0010c5 2f76      	MOV  R23,R22
0010c6 9508      	RET
                 
                 __MULW12U:
0010c7 9ffa      	MUL  R31,R26
0010c8 2df0      	MOV  R31,R0
0010c9 9feb      	MUL  R30,R27
0010ca 0df0      	ADD  R31,R0
0010cb 9fea      	MUL  R30,R26
0010cc 2de0      	MOV  R30,R0
0010cd 0df1      	ADD  R31,R1
0010ce 9508      	RET
                 
                 __MULW12:
0010cf d02a      	RCALL __CHKSIGNW
0010d0 dff6      	RCALL __MULW12U
0010d1 f40e      	BRTC __MULW121
0010d2 dfe3      	RCALL __ANEGW1
                 __MULW121:
0010d3 9508      	RET
                 
                 __DIVW21U:
0010d4 2400      	CLR  R0
0010d5 2411      	CLR  R1
0010d6 e190      	LDI  R25,16
                 __DIVW21U1:
0010d7 0faa      	LSL  R26
0010d8 1fbb      	ROL  R27
0010d9 1c00      	ROL  R0
0010da 1c11      	ROL  R1
0010db 1a0e      	SUB  R0,R30
0010dc 0a1f      	SBC  R1,R31
0010dd f418      	BRCC __DIVW21U2
0010de 0e0e      	ADD  R0,R30
0010df 1e1f      	ADC  R1,R31
0010e0 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0010e1 60a1      	SBR  R26,1
                 __DIVW21U3:
0010e2 959a      	DEC  R25
0010e3 f799      	BRNE __DIVW21U1
0010e4 01fd      	MOVW R30,R26
0010e5 01d0      	MOVW R26,R0
0010e6 9508      	RET
                 
                 __DIVW21:
0010e7 d012      	RCALL __CHKSIGNW
0010e8 dfeb      	RCALL __DIVW21U
0010e9 f40e      	BRTC __DIVW211
0010ea dfcb      	RCALL __ANEGW1
                 __DIVW211:
0010eb 9508      	RET
                 
                 __MODW21:
0010ec 94e8      	CLT
0010ed ffb7      	SBRS R27,7
0010ee c004      	RJMP __MODW211
0010ef 95a0      	COM  R26
0010f0 95b0      	COM  R27
0010f1 9611      	ADIW R26,1
0010f2 9468      	SET
                 __MODW211:
0010f3 fdf7      	SBRC R31,7
0010f4 dfc1      	RCALL __ANEGW1
0010f5 dfde      	RCALL __DIVW21U
0010f6 01fd      	MOVW R30,R26
0010f7 f40e      	BRTC __MODW212
0010f8 dfbd      	RCALL __ANEGW1
                 __MODW212:
0010f9 9508      	RET
                 
                 __CHKSIGNW:
0010fa 94e8      	CLT
0010fb fff7      	SBRS R31,7
0010fc c002      	RJMP __CHKSW1
0010fd dfb8      	RCALL __ANEGW1
0010fe 9468      	SET
                 __CHKSW1:
0010ff ffb7      	SBRS R27,7
001100 c006      	RJMP __CHKSW2
001101 95a0      	COM  R26
001102 95b0      	COM  R27
001103 9611      	ADIW R26,1
001104 f800      	BLD  R0,0
001105 9403      	INC  R0
001106 fa00      	BST  R0,0
                 __CHKSW2:
001107 9508      	RET
                 
                 __GETW1P:
001108 91ed      	LD   R30,X+
001109 91fc      	LD   R31,X
00110a 9711      	SBIW R26,1
00110b 9508      	RET
                 
                 __PUTDP1:
00110c 93ed      	ST   X+,R30
00110d 93fd      	ST   X+,R31
00110e 936d      	ST   X+,R22
00110f 937c      	ST   X,R23
001110 9508      	RET
                 
                 __GETW1PF:
001111 9005      	LPM  R0,Z+
001112 91f4      	LPM  R31,Z
001113 2de0      	MOV  R30,R0
001114 9508      	RET
                 
                 __GETD1S0:
001115 81e8      	LD   R30,Y
001116 81f9      	LDD  R31,Y+1
001117 816a      	LDD  R22,Y+2
001118 817b      	LDD  R23,Y+3
001119 9508      	RET
                 
                 __PUTD1S0:
00111a 83e8      	ST   Y,R30
00111b 83f9      	STD  Y+1,R31
00111c 836a      	STD  Y+2,R22
00111d 837b      	STD  Y+3,R23
00111e 9508      	RET
                 
                 __PUTPARD1:
00111f 937a      	ST   -Y,R23
001120 936a      	ST   -Y,R22
001121 93fa      	ST   -Y,R31
001122 93ea      	ST   -Y,R30
001123 9508      	RET
                 
                 __SWAPD12:
001124 2e18      	MOV  R1,R24
001125 2f86      	MOV  R24,R22
001126 2d61      	MOV  R22,R1
001127 2e19      	MOV  R1,R25
001128 2f97      	MOV  R25,R23
001129 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00112a 2e1b      	MOV  R1,R27
00112b 2fbf      	MOV  R27,R31
00112c 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00112d 2e1a      	MOV  R1,R26
00112e 2fae      	MOV  R26,R30
00112f 2de1      	MOV  R30,R1
001130 9508      	RET
                 
                 __CPD10:
001131 9730      	SBIW R30,0
001132 4060      	SBCI R22,0
001133 4070      	SBCI R23,0
001134 9508      	RET
                 
                 __CPD02:
001135 2400      	CLR  R0
001136 160a      	CP   R0,R26
001137 060b      	CPC  R0,R27
001138 0608      	CPC  R0,R24
001139 0609      	CPC  R0,R25
00113a 9508      	RET
                 
                 __CPD12:
00113b 17ea      	CP   R30,R26
00113c 07fb      	CPC  R31,R27
00113d 0768      	CPC  R22,R24
00113e 0779      	CPC  R23,R25
00113f 9508      	RET
                 
                 __SAVELOCR6:
001140 935a      	ST   -Y,R21
                 __SAVELOCR5:
001141 934a      	ST   -Y,R20
                 __SAVELOCR4:
001142 933a      	ST   -Y,R19
                 __SAVELOCR3:
001143 932a      	ST   -Y,R18
                 __SAVELOCR2:
001144 931a      	ST   -Y,R17
001145 930a      	ST   -Y,R16
001146 9508      	RET
                 
                 __LOADLOCR6:
001147 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001148 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001149 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00114a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00114b 8119      	LDD  R17,Y+1
00114c 8108      	LD   R16,Y
00114d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  56 r1 :  37 r2 :   1 r3 :   0 r4 :  23 r5 :  10 r6 :   4 r7 :   2 
r8 :   8 r9 :   3 r10:  10 r11:   3 r12:   6 r13:   1 r14:   0 r15:   6 
r16:  79 r17:  69 r18:  51 r19:  28 r20:  41 r21:  87 r22: 118 r23: 111 
r24:  81 r25:  67 r26: 244 r27: 123 r28:  35 r29:   1 r30: 872 r31: 399 
x  :  28 y  : 470 z  :  21 
Registers used: 33 out of 35 (94.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  32 add   :  27 
adiw  :  47 and   :   5 andi  :  11 asr   :   1 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   7 brcs  :   1 break :   0 breq  :  49 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  18 
brlt  :   7 brmi  :  10 brne  :  95 brpl  :   8 brsh  :   5 brtc  :   5 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   5 call  : 417 
cbi   :  10 cbr   :   1 clc   :   3 clh   :   0 cli   :   2 cln   :   0 
clr   :  49 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :  12 
cp    :  25 cpc   :  56 cpi   :  86 cpse  :   0 dec   :  13 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   7 inc   :   3 jmp   :  62 ld    :  80 ldd   : 161 
ldi   : 575 lds   :  89 lpm   :  18 lsl   :  16 lsr   :   5 mov   :  55 
movw  :  86 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   2 ori   :   8 out   :  27 pop   :  37 push  :  37 rcall : 102 
ret   : 124 reti  :   3 rjmp  : 190 rol   :  30 ror   :  18 sbc   :  13 
sbci  :  23 sbi   :  14 sbic  :  14 sbis  :  15 sbiw  :  54 sbr   :   3 
sbrc  :   4 sbrs  :  14 sec   :   5 seh   :   0 sei   :   2 sen   :   0 
ser   :   8 ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 195 std   :  69 sts   : 139 sub   :   9 subi  :  45 
swap  :   1 tst   :  21 wdr   :   1 
Instructions used: 84 out of 117 (71.8%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00229c   8314    546   8860  131072   6.8%
[.dseg] 0x000100 0x000641      0    321    321    4351   7.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
