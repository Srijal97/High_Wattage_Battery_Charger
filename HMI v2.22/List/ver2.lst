
AVRASM ver. 2.1.30  E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm Wed Feb 12 13:11:16 2020

E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1090): warning: Register r4 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1091): warning: Register r5 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1092): warning: Register r6 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1093): warning: Register r7 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1094): warning: Register r8 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1095): warning: Register r9 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1096): warning: Register r10 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1097): warning: Register r11 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1098): warning: Register r12 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1099): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Screen=R4
                 	.DEF _Screen_msb=R5
                 	.DEF _Current_Screen=R6
                 	.DEF _Current_Screen_msb=R7
                 	.DEF _Pointer_horiz=R8
                 	.DEF _Pointer_horiz_msb=R9
                 	.DEF _Pointer_vert=R10
                 	.DEF _Pointer_vert_msb=R11
                 	.DEF _Pt=R12
                 	.DEF _Pt_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0148 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0314 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0383 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 03d0 	JMP  _timer3_ovf_isr
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00004f 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000050 0001
000051 0000      	.DB  0x1,0x0,0x0,0x0
000052 0000
000053 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000054 3030
000055 3030
000056 3030
000057 3030      	.DB  0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30
                 _0x0:
000058 303c
000059 3130
00005a 003e
00005b 303c      	.DB  0x3C,0x30,0x30,0x31,0x3E,0x0,0x3C,0x30
00005c 3230
00005d 003e
00005e 303c
00005f 3330      	.DB  0x30,0x32,0x3E,0x0,0x3C,0x30,0x30,0x33
000060 003e
000061 303c
000062 3031
000063 003e      	.DB  0x3E,0x0,0x3C,0x30,0x31,0x30,0x3E,0x0
000064 303c
000065 3131
000066 003e
000067 303c      	.DB  0x3C,0x30,0x31,0x31,0x3E,0x0,0x3C,0x30
000068 3431
000069 252d
00006a 3430
00006b 3e64      	.DB  0x31,0x34,0x2D,0x25,0x30,0x34,0x64,0x3E
00006c 3c00
00006d 3130
00006e 2d35
00006f 3025      	.DB  0x0,0x3C,0x30,0x31,0x35,0x2D,0x25,0x30
000070 6434
000071 003e
000072 6e49
000073 6176      	.DB  0x34,0x64,0x3E,0x0,0x49,0x6E,0x76,0x61
000074 696c
000075 2064
000076 6f63
000077 6d6d      	.DB  0x6C,0x69,0x64,0x20,0x63,0x6F,0x6D,0x6D
000078 6e61
000079 2064
00007a 6572
00007b 6563      	.DB  0x61,0x6E,0x64,0x20,0x72,0x65,0x63,0x65
00007c 7669
00007d 6465
00007e 2000
00007f 5e00      	.DB  0x69,0x76,0x65,0x64,0x0,0x20,0x0,0x5E
000080 2500
000081 3330
000082 0064
000083 3025      	.DB  0x0,0x25,0x30,0x33,0x64,0x0,0x25,0x30
000084 6432
000085 4d00
000086 6961
000087 206e      	.DB  0x32,0x64,0x0,0x4D,0x61,0x69,0x6E,0x20
000088 6353
000089 6572
00008a 6e65
00008b 5600      	.DB  0x53,0x63,0x72,0x65,0x65,0x6E,0x0,0x56
00008c 6c6f
00008d 6174
00008e 6567
00008f 7320      	.DB  0x6F,0x6C,0x74,0x61,0x67,0x65,0x20,0x73
000090 7465
000091 7420
000092 3a6f
000093 5600      	.DB  0x65,0x74,0x20,0x74,0x6F,0x3A,0x0,0x56
000094 5300
000095 7465
000096 7620
000097 6c61      	.DB  0x0,0x53,0x65,0x74,0x20,0x76,0x61,0x6C
000098 6575
000099 7320
00009a 6f68
00009b 6c75      	.DB  0x75,0x65,0x20,0x73,0x68,0x6F,0x75,0x6C
00009c 0064
00009d 6562
00009e 6220
00009f 7465      	.DB  0x64,0x0,0x62,0x65,0x20,0x62,0x65,0x74
0000a0 6577
0000a1 6e65
0000a2 3120
0000a3 3031      	.DB  0x77,0x65,0x65,0x6E,0x20,0x31,0x31,0x30
0000a4 002d
0000a5 3331
0000a6 2035
0000a7 6f76      	.DB  0x2D,0x0,0x31,0x33,0x35,0x20,0x76,0x6F
0000a8 746c
0000a9 0073
0000aa 7543
0000ab 7272      	.DB  0x6C,0x74,0x73,0x0,0x43,0x75,0x72,0x72
0000ac 6e65
0000ad 2074
0000ae 6573
0000af 2074      	.DB  0x65,0x6E,0x74,0x20,0x73,0x65,0x74,0x20
0000b0 6f74
0000b1 003a
0000b2 0041
0000b3 6562      	.DB  0x74,0x6F,0x3A,0x0,0x41,0x0,0x62,0x65
0000b4 6220
0000b5 7465
0000b6 6577
0000b7 6e65      	.DB  0x20,0x62,0x65,0x74,0x77,0x65,0x65,0x6E
0000b8 3120
0000b9 2d30
0000ba 3200
0000bb 2030      	.DB  0x20,0x31,0x30,0x2D,0x0,0x32,0x30,0x20
0000bc 6d61
0000bd 7370
0000be 5700
0000bf 6c65      	.DB  0x61,0x6D,0x70,0x73,0x0,0x57,0x65,0x6C
0000c0 6f63
0000c1 656d
0000c2 7420
0000c3 206f      	.DB  0x63,0x6F,0x6D,0x65,0x20,0x74,0x6F,0x20
0000c4 4d48
0000c5 0049
0000c6 6553
0000c7 2074      	.DB  0x48,0x4D,0x49,0x0,0x53,0x65,0x74,0x20
0000c8 6150
0000c9 6172
0000ca 656d
0000cb 6574      	.DB  0x50,0x61,0x72,0x61,0x6D,0x65,0x74,0x65
0000cc 7372
0000cd 5000
0000ce 5241
0000cf 4d41      	.DB  0x72,0x73,0x0,0x50,0x41,0x52,0x41,0x4D
0000d0 5445
0000d1 5245
0000d2 0053
0000d3 6f56      	.DB  0x45,0x54,0x45,0x52,0x53,0x0,0x56,0x6F
0000d4 746c
0000d5 6761
0000d6 2065
0000d7 5628      	.DB  0x6C,0x74,0x61,0x67,0x65,0x20,0x28,0x56
0000d8 4c4f
0000d9 5354
0000da 0029
0000db 7543      	.DB  0x4F,0x4C,0x54,0x53,0x29,0x0,0x43,0x75
0000dc 7272
0000dd 6e65
0000de 2074
0000df 4128      	.DB  0x72,0x72,0x65,0x6E,0x74,0x20,0x28,0x41
0000e0 504d
0000e1 2953
0000e2 5300
0000e3 7465      	.DB  0x4D,0x50,0x53,0x29,0x0,0x53,0x65,0x74
0000e4 7620
0000e5 6c6f
0000e6 6174
0000e7 6567      	.DB  0x20,0x76,0x6F,0x6C,0x74,0x61,0x67,0x65
0000e8 003a
0000e9 6553
0000ea 2074
0000eb 7563      	.DB  0x3A,0x0,0x53,0x65,0x74,0x20,0x63,0x75
0000ec 7272
0000ed 6e65
0000ee 3a74
0000ef 5300      	.DB  0x72,0x72,0x65,0x6E,0x74,0x3A,0x0,0x53
0000f0 3a56
0000f1 5300
0000f2 4342
0000f3 003a      	.DB  0x56,0x3A,0x0,0x53,0x42,0x43,0x3A,0x0
0000f4 5641
0000f5 003a
0000f6 4241
0000f7 3a43      	.DB  0x41,0x56,0x3A,0x0,0x41,0x42,0x43,0x3A
0000f8 4100
0000f9 5649
0000fa 003a
0000fb 4f41      	.DB  0x0,0x41,0x49,0x56,0x3A,0x0,0x41,0x4F
0000fc 3a43
0000fd 4600
0000fe 7561
0000ff 746c      	.DB  0x43,0x3A,0x0,0x46,0x61,0x75,0x6C,0x74
000100 4920
000101 3a44
000102 3000
000103 3030      	.DB  0x20,0x49,0x44,0x3A,0x0,0x30,0x30,0x30
000104 4d00
000105 6361
000106 6968
000107 656e      	.DB  0x0,0x4D,0x61,0x63,0x68,0x69,0x6E,0x65
000108 3a20
000109 4f20
00010a 204e
00010b 4d00      	.DB  0x20,0x3A,0x20,0x4F,0x4E,0x20,0x0,0x4D
00010c 6361
00010d 6968
00010e 656e
00010f 3a20      	.DB  0x61,0x63,0x68,0x69,0x6E,0x65,0x20,0x3A
000110 4f20
000111 4646
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1208): warning: .cseg .db misalignment - padding zero byte
000112 0000      	.DB  0x20,0x4F,0x46,0x46,0x0
                 _0x2020060:
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1210): warning: .cseg .db misalignment - padding zero byte
000113 0001      	.DB  0x1
                 _0x2020000:
000114 4e2d
000115 4e41
000116 4900
000117 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\PDC- Battery Charger\HMI v2.22\List\ver2.asm(1213): warning: .cseg .db misalignment - padding zero byte
000118 0000      	.DB  0x0
                 _0x2080003:
000119 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00011a 0001      	.DW  0x01
00011b 0002      	.DW  0x02
00011c 009e      	.DW  __REG_BIT_VARS*2
                 
00011d 0008      	.DW  0x08
00011e 0004      	.DW  0x04
00011f 00a0      	.DW  __REG_VARS*2
                 
000120 0008      	.DW  0x08
000121 056b      	.DW  _fltArray
000122 00a8      	.DW  _0x3*2
                 
000123 0001      	.DW  0x01
000124 0500      	.DW  _0xA
000125 00b5      	.DW  _0x0*2+5
                 
000126 0001      	.DW  0x01
000127 0501      	.DW  _0xB
000128 00b5      	.DW  _0x0*2+5
                 
000129 0010      	.DW  0x10
00012a 0502      	.DW  _0x73
00012b 0117      	.DW  _0x0*2+103
                 
00012c 0010      	.DW  0x10
00012d 0512      	.DW  _0x8C
00012e 0154      	.DW  _0x0*2+164
                 
00012f 000f      	.DW  0x0F
000130 0522      	.DW  _0x94
000131 017d      	.DW  _0x0*2+205
                 
000132 000a      	.DW  0x0A
000133 0531      	.DW  _0xAA
000134 01fb      	.DW  _0x0*2+331
                 
000135 0004      	.DW  0x04
000136 053b      	.DW  _0xAA+10
000137 0205      	.DW  _0x0*2+341
                 
000138 0004      	.DW  0x04
000139 053f      	.DW  _0xAA+14
00013a 0205      	.DW  _0x0*2+341
                 
00013b 0004      	.DW  0x04
00013c 0543      	.DW  _0xAA+18
00013d 0205      	.DW  _0x0*2+341
                 
00013e 0004      	.DW  0x04
00013f 0547      	.DW  _0xAA+22
000140 0205      	.DW  _0x0*2+341
                 
000141 0001      	.DW  0x01
000142 061b      	.DW  __seed_G101
000143 0226      	.DW  _0x2020060*2
                 
000144 0002      	.DW  0x02
000145 061f      	.DW  __base_y_G104
000146 0232      	.DW  _0x2080003*2
                 
                 _0xFFFFFFFF:
000147 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000148 94f8      	CLI
000149 27ee      	CLR  R30
00014a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00014b e0f1      	LDI  R31,1
00014c bff5      	OUT  MCUCR,R31
00014d bfe5      	OUT  MCUCR,R30
00014e 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000150 e1f8      	LDI  R31,0x18
000151 bdf1      	OUT  WDTCR,R31
000152 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000153 e08d      	LDI  R24,(14-2)+1
000154 e0a2      	LDI  R26,2
000155 27bb      	CLR  R27
                 __CLEAR_REG:
000156 93ed      	ST   X+,R30
000157 958a      	DEC  R24
000158 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000159 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00015a e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00015b e0a0      	LDI  R26,LOW(__SRAM_START)
00015c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00015d 93ed      	ST   X+,R30
00015e 9701      	SBIW R24,1
00015f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000160 e3e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000161 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000162 9185      	LPM  R24,Z+
000163 9195      	LPM  R25,Z+
000164 9700      	SBIW R24,0
000165 f061      	BREQ __GLOBAL_INI_END
000166 91a5      	LPM  R26,Z+
000167 91b5      	LPM  R27,Z+
000168 9005      	LPM  R0,Z+
000169 9015      	LPM  R1,Z+
00016a 01bf      	MOVW R22,R30
00016b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00016c 9005      	LPM  R0,Z+
00016d 920d      	ST   X+,R0
00016e 9701      	SBIW R24,1
00016f f7e1      	BRNE __GLOBAL_INI_LOOP
000170 01fb      	MOVW R30,R22
000171 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000172 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000173 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000174 bfed      	OUT  SPL,R30
000175 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000176 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000177 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000178 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000179 940c 070f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ;PORTE.5 == KEYPAD 2
                 ;PORTE.7 == KEYPAD 1
                 ;PORTD.2 == KEYPAD 4
                 ;PORTB.3 == KEYPAD 3
                 ;*/
                 ;
                 ;
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <Math.h>
                 ;#include <String.h>
                 ;#include "commands.c"
                 ;/*
                 ; * commands.c
                 ; *
                 ; *  Created on: Jan 10, 2020
                 ; *      Author: Mr.Yash
                 ; */
                 ;
                 ;//#include <Serial.h>
                 ;#include <commands.h>
                 ;#include <alcd.h>
                 ;#include <ver1.h>
                 ;//#include <variables.h>
                 ;
                 ;int Screen = 1;
                 ;int Current_Screen = 0;
                 ;int Pointer_horiz = 0, Pointer_vert = 0, Pt;
                 ;
                 ;
                 ;long set_voltage = 000;
                 ;long set_current = 000;
                 ;static int actual_voltage = 000;
                 ;static int actual_btcurrent = 000;
                 ;static int actual_ipvoltage = 000;
                 ;static int actual_opcurrent = 000;
                 ;
                 ;int set_flag=0;
                 ;int flag = 0;
                 ;
                 ;int n=0;                    //Input function parameter in screen functions
                 ;int main_screen_trigger;  //to return to main screen
                 ;int ms_update_flag = 0;
                 ;int current_mainscreen_flag = 0;
                 ;int status = 0;
                 ;int fault_flag = 0;
                 ;
                 ;
                 ;flash char* txVoltCom;
                 ;flash char* txAmpCom;
                 ;
                 ;char fltArray[9] = {'0','0','0','0','0','0','0','0','\0'};
                 
                 	.DSEG
                 ;char disp_volt[3];
                 ;char disp_current[3];
                 ;char disp_set_voltage[3];
                 ;char disp_set_btcurrent[4];
                 ;char disp_actual_voltage[3];
                 ;char disp_actual_btcurrent[4];
                 ;char disp_actual_ipvoltage[3];
                 ;char disp_actual_opcurrent[4];
                 ;char disp_fault[];
                 ;flash char *msg;
                 ;flash char *xmitMsg;
                 ;flash char *rec;
                 ;flash char *rdata;
                 ;//char sdataA[20];    // Send data for SCI-A
                 ;char rdataA[20]; // Received data for SCI-A
                 ;int comStart;
                 ;
                 ;int i = 0;
                 ;
                 ;    //commands will be given a 3 digit numeric code based on the button pressed;
                 ;    //Stored values for the particular option-
                 ;
                 ;    //    000-  noOp
                 ;    //    001-  mainOn
                 ;    //    002-  mainOff
                 ;    //    003-  resetFault
                 ;    //    004-  faultDetect
                 ;    //    005-  txSetVoltage
                 ;    //    006-  txSetCurrent
                 ;    //    007-
                 ;    //    008-
                 ;    //    009-
                 ;    //    010-  read output voltage
                 ;    //    011-  read battery current
                 ;    //    012-  read input voltage
                 ;    //    013-  read output current
                 ;    //    014-  set output voltage
                 ;    //    015-  set battery current
                 ;    //    016-
                 ;    //    017-
                 ;    //    018-
                 ;    //    019-
                 ;    //    020-
                 ;    //    021-
                 ;    //    022-
                 ;    //    023-
                 ;    //    024-
                 ;    //    025-
                 ;    //    026-
                 ;    //    027-
                 ;    //    028-
                 ;    //    029-
                 ;    //    030-
                 ;    //    031-
                 ;    //    032-
                 ;    //    033-
                 ;    //    034-
                 ;    //    035-
                 ;    //    036-
                 ;    //    037-
                 ;    //    038-
                 ;    //    039-
                 ;
                 ;void xmitString(flash char * xmitMsg)
                 ; 0000 0010 {
                 
                 	.CSEG
                 _xmitString:
                 ; .FSTART _xmitString
                 ;    int i =0;
                 ;    for(i = 0;*(xmitMsg+i)!= '\0';i++)
00017b 940e 0c53 	CALL SUBOPT_0x0
                 ;	*xmitMsg -> Y+2
                 ;	i -> R16,R17
                 _0x5:
00017d 01f8      	MOVW R30,R16
00017e 81aa      	LDD  R26,Y+2
00017f 81bb      	LDD  R27,Y+2+1
000180 0fea      	ADD  R30,R26
000181 1ffb      	ADC  R31,R27
000182 91e4      	LPM  R30,Z
000183 30e0      	CPI  R30,0
000184 f041      	BREQ _0x6
                 ;    {
                 ;         putchar(xmitMsg[i]);
000185 01f8      	MOVW R30,R16
000186 0fea      	ADD  R30,R26
000187 1ffb      	ADC  R31,R27
000188 91a4      	LPM  R26,Z
000189 d21d      	RCALL _putchar
                 ;
                 ;    }
                +
00018a 5f0f     +SUBI R16 , LOW ( - 1 )
00018b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00018c cff0      	RJMP _0x5
                 _0x6:
                 ;
                 ;
                 ;
                 ;}
00018d c014      	RJMP _0x212000F
                 ; .FEND
                 ;
                 ;void xmitStringnf(char * xmitMsgnf)
                 ;{
                 _xmitStringnf:
                 ; .FSTART _xmitStringnf
                 ;    int i =0;
                 ;    for(i = 0;*(xmitMsgnf+i)!= '\0';i++)
00018e 940e 0c53 	CALL SUBOPT_0x0
                 ;	*xmitMsgnf -> Y+2
                 ;	i -> R16,R17
                 _0x8:
000190 01f8      	MOVW R30,R16
000191 81aa      	LDD  R26,Y+2
000192 81bb      	LDD  R27,Y+2+1
000193 0fae      	ADD  R26,R30
000194 1fbf      	ADC  R27,R31
000195 91ec      	LD   R30,X
000196 30e0      	CPI  R30,0
000197 f051      	BREQ _0x9
                 ;    {
                 ;         putchar(xmitMsgnf[i]);
000198 01f8      	MOVW R30,R16
000199 81aa      	LDD  R26,Y+2
00019a 81bb      	LDD  R27,Y+2+1
00019b 0fae      	ADD  R26,R30
00019c 1fbf      	ADC  R27,R31
00019d 91ac      	LD   R26,X
00019e d208      	RCALL _putchar
                 ;
                 ;    }
                +
00019f 5f0f     +SUBI R16 , LOW ( - 1 )
0001a0 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001a1 cfee      	RJMP _0x8
                 _0x9:
                 ;
                 ;
                 ;
                 ;}
                 _0x212000F:
0001a2 8119      	LDD  R17,Y+1
0001a3 8108      	LDD  R16,Y+0
0001a4 9624      	ADIW R28,4
0001a5 9508      	RET
                 ; .FEND
                 ;
                 ;void noOp()
                 ;{
                 _noOp:
                 ; .FSTART _noOp
                 ;
                 ;}
0001a6 9508      	RET
                 ; .FEND
                 ;
                 ;void mainOn()
                 ;{
                 _mainOn:
                 ; .FSTART _mainOn
                 ;
                 ;    xmitMsg ="<001>";
                +
0001a7 ebe0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001a8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001a9 c005      	RJMP _0x212000E
                 ;    xmitString(xmitMsg);
                 ;
                 ;}
                 ; .FEND
                 ;
                 ;void mainOff()
                 ;{
                 _mainOff:
                 ; .FSTART _mainOff
                 ;
                 ;    xmitMsg = "<002>";
                +
0001aa ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
0001ab e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
0001ac c002      	RJMP _0x212000E
                 ;    xmitString(xmitMsg);
                 ;
                 ;}
                 ; .FEND
                 ;
                 ;void resetFault()
                 ;{
                 _resetFault:
                 ; .FSTART _resetFault
                 ;    xmitMsg = "<003>";
                +
0001ad ebec     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0001ae e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
                 _0x212000E:
0001af 93e0 058f 	STS  _xmitMsg,R30
0001b1 93f0 0590 	STS  _xmitMsg+1,R31
                 ;    xmitString(xmitMsg);
0001b3 91a0 058f 	LDS  R26,_xmitMsg
0001b5 91b0 0590 	LDS  R27,_xmitMsg+1
0001b7 dfc3      	RCALL _xmitString
                 ;}
0001b8 9508      	RET
                 ; .FEND
                 ;
                 ;void readOutputVolt()
                 ;{
                 ;    xmitMsg = "<010>";
                 ;    xmitString(xmitMsg);
                 ;
                 ;}
                 ;
                 ;void readBatteryAmp()
                 ;{
                 ;    xmitMsg = "<011>";
                 ;    xmitString(xmitMsg);
                 ;
                 ;}
                 ;
                 ;void txSetVoltage(int setVoltVal)
                 ;{
                 _txSetVoltage:
                 ; .FSTART _txSetVoltage
                 ;    int cpyVolt = setVoltVal;
                 ;    char* msg1 = "";
                 ;    sprintf(msg1,"<014-%04d>",cpyVolt);
0001b9 940e 0c5c 	CALL SUBOPT_0x1
                 ;	setVoltVal -> Y+4
                 ;	cpyVolt -> R16,R17
                 ;	*msg1 -> R18,R19
                +
0001bb e020     +LDI R18 , LOW ( _0xA + ( 0 ) )
0001bc e035     +LDI R19 , HIGH ( _0xA + ( 0 ) )
                 	__POINTWRMN 18,19,_0xA,0
0001bd 933a      	ST   -Y,R19
0001be 932a      	ST   -Y,R18
                +
0001bf ecee     +LDI R30 , LOW ( 2 * _0x0 + ( 30 ) )
0001c0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 30 ) )
                 	__POINTW1FN _0x0,30
0001c1 c008      	RJMP _0x212000D
                 ;    xmitStringnf(msg1);
                 ;}
                 ; .FEND
                 
                 	.DSEG
                 _0xA:
000500           	.BYTE 0x1
                 ;
                 ;void txSetCurrent(int setAmpVal)
                 ;{
                 
                 	.CSEG
                 _txSetCurrent:
                 ; .FSTART _txSetCurrent
                 ;    int cpyAmp = setAmpVal;
                 ;    char*msg1 = "";
                 ;    sprintf(msg1,"<015-%04d>",cpyAmp);
0001c2 940e 0c5c 	CALL SUBOPT_0x1
                 ;	setAmpVal -> Y+4
                 ;	cpyAmp -> R16,R17
                 ;	*msg1 -> R18,R19
                +
0001c4 e021     +LDI R18 , LOW ( _0xB + ( 0 ) )
0001c5 e035     +LDI R19 , HIGH ( _0xB + ( 0 ) )
                 	__POINTWRMN 18,19,_0xB,0
0001c6 933a      	ST   -Y,R19
0001c7 932a      	ST   -Y,R18
                +
0001c8 ede9     +LDI R30 , LOW ( 2 * _0x0 + ( 41 ) )
0001c9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 41 ) )
                 	__POINTW1FN _0x0,41
                 _0x212000D:
0001ca 93fa      	ST   -Y,R31
0001cb 93ea      	ST   -Y,R30
0001cc 01f8      	MOVW R30,R16
0001cd 940e 0c63 	CALL SUBOPT_0x2
                 ;    xmitStringnf(msg1);
0001cf 01d9      	MOVW R26,R18
0001d0 dfbd      	RCALL _xmitStringnf
                 ;
                 ;}
0001d1 940e 10f6 	CALL __LOADLOCR4
0001d3 9626      	ADIW R28,6
0001d4 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xB:
000501           	.BYTE 0x1
                 ;/*static void (*tx_function[100])() = {
                 ;    noOp,  // 0
                 ;    mainOn,  // 1
                 ;    mainOff,  // 2
                 ;    resetFault,  // 3
                 ;    faultDetect, //4
                 ;    noOp,
                 ;    noOp,
                 ;    noOp,
                 ;    noOp,
                 ;    noOp,
                 ;    readOutputVolt,//10
                 ;    readBatteryAmp,//11
                 ;    //readInputVolt,//12
                 ;    //xreadOutputCurrent,//13
                 ;};*/
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;//On receiving response from the TMS, further actions are taken by recFunc array
                 ;
                 ;
                 ;
                 ;
                 ;void rxnoOp()
                 ;{
                 
                 	.CSEG
                 ;}
                 ;
                 ;
                 ;void rxmainOn()
                 ;{
                 _rxmainOn:
                 ; .FSTART _rxmainOn
                 ;    current_mainscreen_flag = 1;
0001d5 940e 0c6c 	CALL SUBOPT_0x3
                 ;    PORTC.3 = 0;
0001d7 98ab      	CBI  0x15,3
                 ;    status = 1;
0001d8 e0e1      	LDI  R30,LOW(1)
0001d9 e0f0      	LDI  R31,HIGH(1)
0001da 93e0 0567 	STS  _status,R30
0001dc 93f0 0568 	STS  _status+1,R31
                 ;}
0001de 9508      	RET
                 ; .FEND
                 ;
                 ;void rxmainOff()
                 ;{
                 _rxmainOff:
                 ; .FSTART _rxmainOff
                 ;    current_mainscreen_flag = 1;
0001df 940e 0c6c 	CALL SUBOPT_0x3
                 ;    status = 0;
0001e1 e0e0      	LDI  R30,LOW(0)
0001e2 93e0 0567 	STS  _status,R30
0001e4 93e0 0568 	STS  _status+1,R30
                 ;    PORTC.3 = 1;
0001e6 9aab      	SBI  0x15,3
                 ;
                 ;}
0001e7 9508      	RET
                 ; .FEND
                 ;
                 ;void rxresetFault()
                 ;{
                 _rxresetFault:
                 ; .FSTART _rxresetFault
                 ;   fault_flag = 0;
0001e8 e0e0      	LDI  R30,LOW(0)
0001e9 93e0 0569 	STS  _fault_flag,R30
0001eb 93e0 056a 	STS  _fault_flag+1,R30
                 ;   current_mainscreen_flag = 1;
0001ed c41f      	RJMP _0x212000A
                 ;}
                 ; .FEND
                 ;
                 ;void rxfaultDetect(int val)
                 ;{
                 _rxfaultDetect:
                 ; .FSTART _rxfaultDetect
                 ;    int i = 0,j,k=0;
                 ;    int fault = 0, cpyFault;
                 ;    int fltBit[8],tmpBit[8];
                 ;    fault = val;
0001ee 93ba      	ST   -Y,R27
0001ef 93aa      	ST   -Y,R26
0001f0 97a4      	SBIW R28,36
0001f1 e0e0      	LDI  R30,LOW(0)
0001f2 a3ea      	STD  Y+34,R30
0001f3 a3eb      	STD  Y+35,R30
0001f4 940e 10ed 	CALL __SAVELOCR6
                 ;	val -> Y+42
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	k -> R20,R21
                 ;	fault -> Y+40
                 ;	cpyFault -> Y+38
                 ;	fltBit -> Y+22
                 ;	tmpBit -> Y+6
                +
0001f6 e000     +LDI R16 , LOW ( 0 )
0001f7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001f8 e040     +LDI R20 , LOW ( 0 )
0001f9 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0001fa a5ea      	LDD  R30,Y+42
0001fb a5fb      	LDD  R31,Y+42+1
0001fc a7e8      	STD  Y+40,R30
0001fd a7f9      	STD  Y+40+1,R31
                 ;
                 ;    if(fault!=0)
0001fe 9730      	SBIW R30,0
0001ff f061      	BREQ _0x10
                 ;    {
                 ;        PORTF &= ~0x40;
000200 91e0 0062 	LDS  R30,98
000202 7bef      	ANDI R30,0xBF
000203 93e0 0062 	STS  98,R30
                 ;        fault_flag = 1;
000205 e0e1      	LDI  R30,LOW(1)
000206 e0f0      	LDI  R31,HIGH(1)
000207 93e0 0569 	STS  _fault_flag,R30
000209 93f0 056a 	STS  _fault_flag+1,R31
                 ;        mainOff();
00020b df9e      	RCALL _mainOff
                 ;
                 ;    }
                 ;    for(i=0;i<8;i++)
                 _0x10:
                +
00020c e000     +LDI R16 , LOW ( 0 )
00020d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x12:
                +
00020e 3008     +CPI R16 , LOW ( 8 )
00020f e0e0     +LDI R30 , HIGH ( 8 )
000210 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000211 f4cc      	BRGE _0x13
                 ;    {
                 ;        fltArray[7-i] = fault%2 + 48;
000212 e0e7      	LDI  R30,LOW(7)
000213 e0f0      	LDI  R31,HIGH(7)
000214 1be0      	SUB  R30,R16
000215 0bf1      	SBC  R31,R17
000216 59e5      	SUBI R30,LOW(-_fltArray)
000217 4ffa      	SBCI R31,HIGH(-_fltArray)
000218 010f      	MOVW R0,R30
000219 a5e8      	LDD  R30,Y+40
00021a a5f9      	LDD  R31,Y+40+1
00021b e0a1      	LDI  R26,LOW(1)
00021c e0b0      	LDI  R27,HIGH(1)
00021d 940e 107f 	CALL __MANDW12
00021f 5de0      	SUBI R30,-LOW(48)
000220 01d0      	MOVW R26,R0
000221 93ec      	ST   X,R30
                 ;        fault = fault >> 1;
000222 a5e8      	LDD  R30,Y+40
000223 a5f9      	LDD  R31,Y+40+1
000224 95f5      	ASR  R31
000225 95e7      	ROR  R30
000226 a7e8      	STD  Y+40,R30
000227 a7f9      	STD  Y+40+1,R31
                 ;
                 ;    }
                +
000228 5f0f     +SUBI R16 , LOW ( - 1 )
000229 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00022a cfe3      	RJMP _0x12
                 _0x13:
                 ;
                 ;//    numFlt = fltBit[0]+(fltBit[1]*10)+(fltBit[2]*100)
                 ;//    +(fltBit[3]*1000)+(fltBit[4]*10000)+(fltBit[5]*100000)+(fltBit[1]*1000000)+(fltBit[1]*10000000);
                 ;
                 ;//    if(fltBit[0] == 1)PORTC.3 = 0;
                 ;//    if(fltBit[1] == 1)PORTC.3 = 1;
                 ;//    if(fltBit[2] == 1)PORTF &= ~0x80;;
                 ;//    if(fltBit[3] == 1)PORTC.3 = 1  ;
                 ;//    if(fltBit[4] == 1)PORTC.3 = 1   ;
                 ;//    if(fltBit[5] == 1)PORTC.3 = 1    ;
                 ;//    if(fltBit[6] == 1)PORTC.3 = 1     ;
                 ;//    if(fltBit[7] == 1)PORTC.3 = 1      ;
                 ;//
                 ;
                 ;
                 ;
                 ;}
00022b 940e 10f4 	CALL __LOADLOCR6
00022d 96ac      	ADIW R28,44
00022e 9508      	RET
                 ; .FEND
                 ;
                 ;void rxreadOutputVolt(int val)
                 ;{
                 _rxreadOutputVolt:
                 ; .FSTART _rxreadOutputVolt
                 ;    actual_voltage = val;
00022f 940e 0c73 	CALL SUBOPT_0x4
                 ;	val -> Y+0
000231 93e0 0553 	STS  _actual_voltage_G000,R30
000233 93f0 0554 	STS  _actual_voltage_G000+1,R31
                 ;}
000235 c2ac      	RJMP _0x212000B
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void rxreadBatteryAmp(int val)
                 ;{
                 _rxreadBatteryAmp:
                 ; .FSTART _rxreadBatteryAmp
                 ;    actual_btcurrent = val;
000236 940e 0c73 	CALL SUBOPT_0x4
                 ;	val -> Y+0
000238 93e0 0555 	STS  _actual_btcurrent_G000,R30
00023a 93f0 0556 	STS  _actual_btcurrent_G000+1,R31
                 ;}
00023c c2a5      	RJMP _0x212000B
                 ; .FEND
                 ;
                 ;void rxreadInputVolt(int val)
                 ;{
                 _rxreadInputVolt:
                 ; .FSTART _rxreadInputVolt
                 ;    actual_ipvoltage = val;
00023d 940e 0c73 	CALL SUBOPT_0x4
                 ;	val -> Y+0
00023f 93e0 0557 	STS  _actual_ipvoltage_G000,R30
000241 93f0 0558 	STS  _actual_ipvoltage_G000+1,R31
                 ;}
000243 c29e      	RJMP _0x212000B
                 ; .FEND
                 ;
                 ;void rxreadOutputCurrent(int val)
                 ;{
                 _rxreadOutputCurrent:
                 ; .FSTART _rxreadOutputCurrent
                 ;    actual_opcurrent = val;
000244 940e 0c73 	CALL SUBOPT_0x4
                 ;	val -> Y+0
000246 93e0 0559 	STS  _actual_opcurrent_G000,R30
000248 93f0 055a 	STS  _actual_opcurrent_G000+1,R31
                 ;}
00024a c297      	RJMP _0x212000B
                 ; .FEND
                 ;
                 ;
                 ;/*static void (*rx_function[100])() = {
                 ;    rxnoOp,  // 0
                 ;    rxmainOn,  // 1
                 ;    rxmainOff,  // 2
                 ;    rxresetFault,  // 3
                 ;    rxfaultDetect, //4
                 ;    rxnoOp,
                 ;    rxnoOp,
                 ;    rxnoOp,
                 ;    rxnoOp,
                 ;    rxnoOp,
                 ;    rxreadOutputVolt,//10
                 ;    rxreadBatteryAmp,//11
                 ;    rxreadInputVolt,//12
                 ;    rexreadOutputCurrent,//13
                 ;};*/
                 ;
                 ;
                 ;
                 ;void comDecode(char * rec)
                 ;{
                 _comDecode:
                 ; .FSTART _comDecode
                 ;
                 ;    char cmd[3] = {'0','0','0'};
                 ;    char data[4] = {'0','0','0','0'};
                 ;    int icmd = 0;
                 ;    int idata = 0;
                 ;    int i;
                 ;
                 ;    for(i = 1; i < 4; i++)
00024b 93ba      	ST   -Y,R27
00024c 93aa      	ST   -Y,R26
00024d 9727      	SBIW R28,7
00024e e3e0      	LDI  R30,LOW(48)
00024f 83e8      	ST   Y,R30
000250 83e9      	STD  Y+1,R30
000251 83ea      	STD  Y+2,R30
000252 83eb      	STD  Y+3,R30
000253 83ec      	STD  Y+4,R30
000254 83ed      	STD  Y+5,R30
000255 83ee      	STD  Y+6,R30
000256 940e 10ed 	CALL __SAVELOCR6
                 ;	*rec -> Y+13
                 ;	cmd -> Y+10
                 ;	data -> Y+6
                 ;	icmd -> R16,R17
                 ;	idata -> R18,R19
                 ;	i -> R20,R21
                +
000258 e000     +LDI R16 , LOW ( 0 )
000259 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00025a e020     +LDI R18 , LOW ( 0 )
00025b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00025c e041     +LDI R20 , LOW ( 1 )
00025d e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 _0x15:
                +
00025e 3044     +CPI R20 , LOW ( 4 )
00025f e0e0     +LDI R30 , HIGH ( 4 )
000260 075e     +CPC R21 , R30
                 	__CPWRN 20,21,4
000261 f44c      	BRGE _0x16
                 ;    {
                 ;       cmd[i-1] = rec[i];
000262 01fa      	MOVW R30,R20
000263 9731      	SBIW R30,1
000264 01de      	MOVW R26,R28
000265 961a      	ADIW R26,10
000266 940e 0c78 	CALL SUBOPT_0x5
                 ;    }
                +
000268 5f4f     +SUBI R20 , LOW ( - 1 )
000269 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00026a cff3      	RJMP _0x15
                 _0x16:
                 ;
                 ;    for(i = 5; i < 9; i++)
                +
00026b e045     +LDI R20 , LOW ( 5 )
00026c e050     +LDI R21 , HIGH ( 5 )
                 	__GETWRN 20,21,5
                 _0x18:
                +
00026d 3049     +CPI R20 , LOW ( 9 )
00026e e0e0     +LDI R30 , HIGH ( 9 )
00026f 075e     +CPC R21 , R30
                 	__CPWRN 20,21,9
000270 f44c      	BRGE _0x19
                 ;    {
                 ;       data[i-5] = rec[i];
000271 01fa      	MOVW R30,R20
000272 9735      	SBIW R30,5
000273 01de      	MOVW R26,R28
000274 9616      	ADIW R26,6
000275 940e 0c78 	CALL SUBOPT_0x5
                 ;    }
                +
000277 5f4f     +SUBI R20 , LOW ( - 1 )
000278 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000279 cff3      	RJMP _0x18
                 _0x19:
                 ;
                 ;
                 ;    icmd = (cmd[2]-'0') + ((cmd[1] - '0')*10) + ((cmd[0]-'0')*100);
00027a 85ec      	LDD  R30,Y+12
00027b e0f0      	LDI  R31,0
00027c 97f0      	SBIW R30,48
00027d 01bf      	MOVW R22,R30
00027e 85eb      	LDD  R30,Y+11
00027f 940e 0c84 	CALL SUBOPT_0x6
000281 85ea      	LDD  R30,Y+10
000282 940e 0c8d 	CALL SUBOPT_0x7
000284 0fe6      	ADD  R30,R22
000285 1ff7      	ADC  R31,R23
000286 018f      	MOVW R16,R30
                 ;    idata = (data[3]-'0') + ((data[2] - '0')*10) + ((data[1]-'0')*100) + ((data[0]-'0')*1000);
000287 85e9      	LDD  R30,Y+9
000288 e0f0      	LDI  R31,0
000289 97f0      	SBIW R30,48
00028a 01bf      	MOVW R22,R30
00028b 85e8      	LDD  R30,Y+8
00028c 940e 0c84 	CALL SUBOPT_0x6
00028e 81ef      	LDD  R30,Y+7
00028f 940e 0c8d 	CALL SUBOPT_0x7
                +
000291 0f6e     +ADD R22 , R30
000292 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000293 81ee      	LDD  R30,Y+6
000294 e0f0      	LDI  R31,0
000295 97f0      	SBIW R30,48
000296 eea8      	LDI  R26,LOW(1000)
000297 e0b3      	LDI  R27,HIGH(1000)
000298 940e 102f 	CALL __MULW12
00029a 0fe6      	ADD  R30,R22
00029b 1ff7      	ADC  R31,R23
00029c 019f      	MOVW R18,R30
                 ;
                 ;   //rx_function[icmd]();
                 ;   switch(icmd)
00029d 01f8      	MOVW R30,R16
                 ;   {
                 ;        case 0:  noOp();                    break;
00029e 9730      	SBIW R30,0
00029f f411      	BRNE _0x1D
0002a0 df05      	RCALL _noOp
0002a1 c06e      	RJMP _0x1C
                 ;        case 1:  rxmainOn();                break;
                 _0x1D:
0002a2 30e1      	CPI  R30,LOW(0x1)
0002a3 e0a0      	LDI  R26,HIGH(0x1)
0002a4 07fa      	CPC  R31,R26
0002a5 f411      	BRNE _0x1E
0002a6 df2e      	RCALL _rxmainOn
0002a7 c068      	RJMP _0x1C
                 ;        case 2:  rxmainOff();               break;
                 _0x1E:
0002a8 30e2      	CPI  R30,LOW(0x2)
0002a9 e0a0      	LDI  R26,HIGH(0x2)
0002aa 07fa      	CPC  R31,R26
0002ab f411      	BRNE _0x1F
0002ac df32      	RCALL _rxmainOff
0002ad c062      	RJMP _0x1C
                 ;        case 3:  rxresetFault();            break;
                 _0x1F:
0002ae 30e3      	CPI  R30,LOW(0x3)
0002af e0a0      	LDI  R26,HIGH(0x3)
0002b0 07fa      	CPC  R31,R26
0002b1 f411      	BRNE _0x20
0002b2 df35      	RCALL _rxresetFault
0002b3 c05c      	RJMP _0x1C
                 ;        case 4:  rxfaultDetect(idata);      break;
                 _0x20:
0002b4 30e4      	CPI  R30,LOW(0x4)
0002b5 e0a0      	LDI  R26,HIGH(0x4)
0002b6 07fa      	CPC  R31,R26
0002b7 f419      	BRNE _0x21
0002b8 01d9      	MOVW R26,R18
0002b9 df34      	RCALL _rxfaultDetect
0002ba c055      	RJMP _0x1C
                 ;        case 5:  noOp();                    break;
                 _0x21:
0002bb 30e5      	CPI  R30,LOW(0x5)
0002bc e0a0      	LDI  R26,HIGH(0x5)
0002bd 07fa      	CPC  R31,R26
0002be f411      	BRNE _0x22
0002bf dee6      	RCALL _noOp
0002c0 c04f      	RJMP _0x1C
                 ;        case 6:  noOp();                    break;
                 _0x22:
0002c1 30e6      	CPI  R30,LOW(0x6)
0002c2 e0a0      	LDI  R26,HIGH(0x6)
0002c3 07fa      	CPC  R31,R26
0002c4 f411      	BRNE _0x23
0002c5 dee0      	RCALL _noOp
0002c6 c049      	RJMP _0x1C
                 ;        case 7:  noOp();                    break;
                 _0x23:
0002c7 30e7      	CPI  R30,LOW(0x7)
0002c8 e0a0      	LDI  R26,HIGH(0x7)
0002c9 07fa      	CPC  R31,R26
0002ca f411      	BRNE _0x24
0002cb deda      	RCALL _noOp
0002cc c043      	RJMP _0x1C
                 ;        case 8:  noOp();                    break;
                 _0x24:
0002cd 30e8      	CPI  R30,LOW(0x8)
0002ce e0a0      	LDI  R26,HIGH(0x8)
0002cf 07fa      	CPC  R31,R26
0002d0 f411      	BRNE _0x25
0002d1 ded4      	RCALL _noOp
0002d2 c03d      	RJMP _0x1C
                 ;        case 9:  noOp();                    break;
                 _0x25:
0002d3 30e9      	CPI  R30,LOW(0x9)
0002d4 e0a0      	LDI  R26,HIGH(0x9)
0002d5 07fa      	CPC  R31,R26
0002d6 f411      	BRNE _0x26
0002d7 dece      	RCALL _noOp
0002d8 c037      	RJMP _0x1C
                 ;        case 10: rxreadOutputVolt(idata);   break;
                 _0x26:
0002d9 30ea      	CPI  R30,LOW(0xA)
0002da e0a0      	LDI  R26,HIGH(0xA)
0002db 07fa      	CPC  R31,R26
0002dc f419      	BRNE _0x27
0002dd 01d9      	MOVW R26,R18
0002de df50      	RCALL _rxreadOutputVolt
0002df c030      	RJMP _0x1C
                 ;        case 11: rxreadBatteryAmp(idata);   break;
                 _0x27:
0002e0 30eb      	CPI  R30,LOW(0xB)
0002e1 e0a0      	LDI  R26,HIGH(0xB)
0002e2 07fa      	CPC  R31,R26
0002e3 f419      	BRNE _0x28
0002e4 01d9      	MOVW R26,R18
0002e5 df50      	RCALL _rxreadBatteryAmp
0002e6 c029      	RJMP _0x1C
                 ;        case 12: rxreadInputVolt(idata);    break;
                 _0x28:
0002e7 30ec      	CPI  R30,LOW(0xC)
0002e8 e0a0      	LDI  R26,HIGH(0xC)
0002e9 07fa      	CPC  R31,R26
0002ea f419      	BRNE _0x29
0002eb 01d9      	MOVW R26,R18
0002ec df50      	RCALL _rxreadInputVolt
0002ed c022      	RJMP _0x1C
                 ;        case 13: rxreadOutputCurrent(idata);break;
                 _0x29:
0002ee 30ed      	CPI  R30,LOW(0xD)
0002ef e0a0      	LDI  R26,HIGH(0xD)
0002f0 07fa      	CPC  R31,R26
0002f1 f419      	BRNE _0x2A
0002f2 01d9      	MOVW R26,R18
0002f3 df50      	RCALL _rxreadOutputCurrent
0002f4 c01b      	RJMP _0x1C
                 ;        case 14: noOp();                    break;
                 _0x2A:
0002f5 30ee      	CPI  R30,LOW(0xE)
0002f6 e0a0      	LDI  R26,HIGH(0xE)
0002f7 07fa      	CPC  R31,R26
0002f8 f411      	BRNE _0x2B
0002f9 deac      	RCALL _noOp
0002fa c015      	RJMP _0x1C
                 ;        case 15: noOp();                    break;
                 _0x2B:
0002fb 30ef      	CPI  R30,LOW(0xF)
0002fc e0a0      	LDI  R26,HIGH(0xF)
0002fd 07fa      	CPC  R31,R26
0002fe f411      	BRNE _0x2C
0002ff dea6      	RCALL _noOp
000300 c00f      	RJMP _0x1C
                 ;        case 16: noOp();                    break;
                 _0x2C:
000301 31e0      	CPI  R30,LOW(0x10)
000302 e0a0      	LDI  R26,HIGH(0x10)
000303 07fa      	CPC  R31,R26
000304 f411      	BRNE _0x2D
000305 dea0      	RCALL _noOp
000306 c009      	RJMP _0x1C
                 ;        case 17: noOp();                    break;
                 _0x2D:
000307 31e1      	CPI  R30,LOW(0x11)
000308 e0a0      	LDI  R26,HIGH(0x11)
000309 07fa      	CPC  R31,R26
00030a f411      	BRNE _0x2F
00030b de9a      	RCALL _noOp
00030c c003      	RJMP _0x1C
                 ;        default: xmitString("Invalid command received");
                 _0x2F:
                +
00030d eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 52 ) )
00030e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 52 ) )
                 	__POINTW2FN _0x0,52
00030f de6b      	RCALL _xmitString
                 ;   }
                 _0x1C:
                 ;
                 ;//    if (icmd == 1) {  // <001>
                 ;//        rxmainOn();
                 ;//    }
                 ;//    else if (icmd == 2) {
                 ;//        rxmainOff();
                 ;//    }
                 ;//    else if (icmd == 3 ) {
                 ;//        rxresetFault();
                 ;//
                 ;//    }
                 ;//    else if (icmd == 4) {
                 ;//       rxfaultDetect(idata);
                 ;//    }
                 ;//
                 ;//    else if (icmd == 10 ){
                 ;//        rxreadOutputVolt(idata);
                 ;//
                 ;//    }
                 ;//    else if (icmd == 11 ){
                 ;//        rxreadBatteryAmp(idata);
                 ;//    }
                 ;//    else if (icmd == 12 ){
                 ;//        rxreadInputVolt(idata);
                 ;//    }
                 ;//    else if (icmd == 13 ){
                 ;//        rxreadOutputCurrent(idata);
                 ;//    }
                 ;
                 ;
                 ;}
000310 940e 10f4 	CALL __LOADLOCR6
000312 962f      	ADIW R28,15
000313 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#include <alcd.h>
                 ;
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;
                 ;int data_received = 0;
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 32
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 005D {
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
000314 920a      	ST   -Y,R0
000315 921a      	ST   -Y,R1
000316 92fa      	ST   -Y,R15
000317 936a      	ST   -Y,R22
000318 937a      	ST   -Y,R23
000319 938a      	ST   -Y,R24
00031a 939a      	ST   -Y,R25
00031b 93aa      	ST   -Y,R26
00031c 93ba      	ST   -Y,R27
00031d 93ea      	ST   -Y,R30
00031e 93fa      	ST   -Y,R31
00031f b7ef      	IN   R30,SREG
000320 93ea      	ST   -Y,R30
                 ; 0000 005E char status,data;
                 ; 0000 005F status=UCSR0A;
000321 931a      	ST   -Y,R17
000322 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000323 b11b      	IN   R17,11
                 ; 0000 0060 data=UDR0;
000324 b10c      	IN   R16,12
                 ; 0000 0061 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000325 2fe1      	MOV  R30,R17
000326 71ec      	ANDI R30,LOW(0x1C)
000327 f009      	BREQ PC+2
000328 c04a      	RJMP _0x30
                 ; 0000 0062    {
                 ; 0000 0063    rx_buffer0[rx_wr_index0++]=data;
000329 91e0 05c9 	LDS  R30,_rx_wr_index0
00032b 5fef      	SUBI R30,-LOW(1)
00032c 93e0 05c9 	STS  _rx_wr_index0,R30
00032e 50e1      	SUBI R30,LOW(1)
00032f e0f0      	LDI  R31,0
000330 55e7      	SUBI R30,LOW(-_rx_buffer0)
000331 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
000332 8300      	ST   Z,R16
                 ; 0000 0064      if(data == '<') {
000333 330c      	CPI  R16,60
000334 f449      	BRNE _0x31
                 ; 0000 0065         comStart = 1;
000335 e0e1      	LDI  R30,LOW(1)
000336 e0f0      	LDI  R31,HIGH(1)
000337 93e0 05a5 	STS  _comStart,R30
000339 93f0 05a6 	STS  _comStart+1,R31
                 ; 0000 0066         i = 0;
00033b 940e 0c94 	CALL SUBOPT_0x8
                 ; 0000 0067 
                 ; 0000 0068     }
                 ; 0000 0069     else if(data == '>') {
00033d c00e      	RJMP _0x32
                 _0x31:
00033e 330e      	CPI  R16,62
00033f f461      	BRNE _0x33
                 ; 0000 006A             *(rdataA+i) = data;
000340 940e 0c9a 	CALL SUBOPT_0x9
                 ; 0000 006B             comStart = 0;
000342 e0e0      	LDI  R30,LOW(0)
000343 93e0 05a5 	STS  _comStart,R30
000345 93e0 05a6 	STS  _comStart+1,R30
                 ; 0000 006C             i = 0;
000347 940e 0c94 	CALL SUBOPT_0x8
                 ; 0000 006D             comDecode(rdataA);
000349 e9a1      	LDI  R26,LOW(_rdataA)
00034a e0b5      	LDI  R27,HIGH(_rdataA)
00034b deff      	RCALL _comDecode
                 ; 0000 006E     }
                 ; 0000 006F     if (comStart == 1) {
                 _0x33:
                 _0x32:
00034c 91a0 05a5 	LDS  R26,_comStart
00034e 91b0 05a6 	LDS  R27,_comStart+1
000350 9711      	SBIW R26,1
000351 f471      	BRNE _0x34
                 ; 0000 0070             *(rdataA+i) = data;  // Read data
000352 940e 0c9a 	CALL SUBOPT_0x9
                 ; 0000 0071             i++;
000354 eaa7      	LDI  R26,LOW(_i)
000355 e0b5      	LDI  R27,HIGH(_i)
000356 940e 0ca2 	CALL SUBOPT_0xA
                 ; 0000 0072             if(i==9){i=0;}
000358 91a0 05a7 	LDS  R26,_i
00035a 91b0 05a8 	LDS  R27,_i+1
00035c 9719      	SBIW R26,9
00035d f411      	BRNE _0x35
00035e 940e 0c94 	CALL SUBOPT_0x8
                 ; 0000 0073     }
                 _0x35:
                 ; 0000 0074 
                 ; 0000 0075 
                 ; 0000 0076 //#if RX_BUFFER_SIZE0 == 256
                 ; 0000 0077 //   // special case for receiver buffer size=256
                 ; 0000 0078 //   if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0079 //#else
                 ; 0000 007A    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
                 _0x34:
000360 91a0 05c9 	LDS  R26,_rx_wr_index0
000362 32a0      	CPI  R26,LOW(0x20)
000363 f419      	BRNE _0x36
000364 e0e0      	LDI  R30,LOW(0)
000365 93e0 05c9 	STS  _rx_wr_index0,R30
                 ; 0000 007B    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x36:
000367 91a0 05cb 	LDS  R26,_rx_counter0
000369 5faf      	SUBI R26,-LOW(1)
00036a 93a0 05cb 	STS  _rx_counter0,R26
00036c 32a0      	CPI  R26,LOW(0x20)
00036d f429      	BRNE _0x37
                 ; 0000 007C       {
                 ; 0000 007D       rx_counter0=0;
00036e e0e0      	LDI  R30,LOW(0)
00036f 93e0 05cb 	STS  _rx_counter0,R30
                 ; 0000 007E       rx_buffer_overflow0=1;
000371 9468      	SET
000372 f820      	BLD  R2,0
                 ; 0000 007F       }
                 ; 0000 0080 //#endif
                 ; 0000 0081    }//data_received = 1;
                 _0x37:
                 ; 0000 0082 }
                 _0x30:
000373 9109      	LD   R16,Y+
000374 9119      	LD   R17,Y+
000375 91e9      	LD   R30,Y+
000376 bfef      	OUT  SREG,R30
000377 91f9      	LD   R31,Y+
000378 91e9      	LD   R30,Y+
000379 91b9      	LD   R27,Y+
00037a 91a9      	LD   R26,Y+
00037b 9199      	LD   R25,Y+
00037c 9189      	LD   R24,Y+
00037d 9179      	LD   R23,Y+
00037e 9169      	LD   R22,Y+
00037f 90f9      	LD   R15,Y+
000380 9019      	LD   R1,Y+
000381 9009      	LD   R0,Y+
000382 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;
                 ;
                 ;
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 008C {
                 ; 0000 008D char data;
                 ; 0000 008E while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 008F data=rx_buffer0[rx_rd_index0++];
                 ; 0000 0090 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0091 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0092 #endif
                 ; 0000 0093 #asm("cli")
                 ; 0000 0094 --rx_counter0;
                 ; 0000 0095 #asm("sei")
                 ; 0000 0096 return data;
                 ; 0000 0097 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 64
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 00AD {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
000383 93aa      	ST   -Y,R26
000384 93ea      	ST   -Y,R30
000385 93fa      	ST   -Y,R31
000386 b7ef      	IN   R30,SREG
000387 93ea      	ST   -Y,R30
                 ; 0000 00AE if (tx_counter0)
000388 91e0 060e 	LDS  R30,_tx_counter0
00038a 30e0      	CPI  R30,0
00038b f0a9      	BREQ _0x3C
                 ; 0000 00AF    {
                 ; 0000 00B0    --tx_counter0;
00038c 50e1      	SUBI R30,LOW(1)
00038d 93e0 060e 	STS  _tx_counter0,R30
                 ; 0000 00B1    UDR0=tx_buffer0[tx_rd_index0++];
00038f 91e0 060d 	LDS  R30,_tx_rd_index0
000391 5fef      	SUBI R30,-LOW(1)
000392 93e0 060d 	STS  _tx_rd_index0,R30
000394 50e1      	SUBI R30,LOW(1)
000395 e0f0      	LDI  R31,0
000396 53e4      	SUBI R30,LOW(-_tx_buffer0)
000397 4ffa      	SBCI R31,HIGH(-_tx_buffer0)
000398 81e0      	LD   R30,Z
000399 b9ec      	OUT  0xC,R30
                 ; 0000 00B2 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00B3    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
00039a 91a0 060d 	LDS  R26,_tx_rd_index0
00039c 34a0      	CPI  R26,LOW(0x40)
00039d f419      	BRNE _0x3D
00039e e0e0      	LDI  R30,LOW(0)
00039f 93e0 060d 	STS  _tx_rd_index0,R30
                 ; 0000 00B4 #endif
                 ; 0000 00B5    }
                 _0x3D:
                 ; 0000 00B6 }
                 _0x3C:
0003a1 91e9      	LD   R30,Y+
0003a2 bfef      	OUT  SREG,R30
0003a3 91f9      	LD   R31,Y+
0003a4 91e9      	LD   R30,Y+
0003a5 91a9      	LD   R26,Y+
0003a6 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 00BF {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 00C0 while (tx_counter0 == TX_BUFFER_SIZE0);
0003a7 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x3E:
0003a8 91a0 060e 	LDS  R26,_tx_counter0
0003aa 34a0      	CPI  R26,LOW(0x40)
0003ab f3e1      	BREQ _0x3E
                 ; 0000 00C1 #asm("cli")
0003ac 94f8      	cli
                 ; 0000 00C2 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
0003ad 91e0 060e 	LDS  R30,_tx_counter0
0003af 30e0      	CPI  R30,0
0003b0 f411      	BRNE _0x42
0003b1 995d      	SBIC 0xB,5
0003b2 c018      	RJMP _0x41
                 _0x42:
                 ; 0000 00C3    {
                 ; 0000 00C4    tx_buffer0[tx_wr_index0++]=c;
0003b3 91e0 060c 	LDS  R30,_tx_wr_index0
0003b5 5fef      	SUBI R30,-LOW(1)
0003b6 93e0 060c 	STS  _tx_wr_index0,R30
0003b8 50e1      	SUBI R30,LOW(1)
0003b9 e0f0      	LDI  R31,0
0003ba 53e4      	SUBI R30,LOW(-_tx_buffer0)
0003bb 4ffa      	SBCI R31,HIGH(-_tx_buffer0)
0003bc 81a8      	LD   R26,Y
0003bd 83a0      	STD  Z+0,R26
                 ; 0000 00C5 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00C6    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
0003be 91a0 060c 	LDS  R26,_tx_wr_index0
0003c0 34a0      	CPI  R26,LOW(0x40)
0003c1 f419      	BRNE _0x44
0003c2 e0e0      	LDI  R30,LOW(0)
0003c3 93e0 060c 	STS  _tx_wr_index0,R30
                 ; 0000 00C7 #endif
                 ; 0000 00C8    ++tx_counter0;
                 _0x44:
0003c5 91e0 060e 	LDS  R30,_tx_counter0
0003c7 5fef      	SUBI R30,-LOW(1)
0003c8 93e0 060e 	STS  _tx_counter0,R30
                 ; 0000 00C9    }
                 ; 0000 00CA else
0003ca c002      	RJMP _0x45
                 _0x41:
                 ; 0000 00CB    UDR0=c;
0003cb 81e8      	LD   R30,Y
0003cc b9ec      	OUT  0xC,R30
                 ; 0000 00CC #asm("sei")
                 _0x45:
0003cd 9478      	sei
                 ; 0000 00CD }
0003ce 9621      	ADIW R28,1
0003cf 9508      	RET
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;int on_pressed = 0;
                 ;int off_pressed = 0;
                 ;int reset_pressed = 0;
                 ;short int on_button_state = 0x0000;
                 ;short int off_button_state = 0x0000;
                 ;short int reset_button_state = 0x0000;
                 ;
                 ;// Timer3 overflow interrupt service routine
                 ;interrupt[TIM3_OVF] void timer3_ovf_isr(void) {
                 ; 0000 00D9 interrupt[30] void timer3_ovf_isr(void) {
                 _timer3_ovf_isr:
                 ; .FSTART _timer3_ovf_isr
0003d0 93aa      	ST   -Y,R26
0003d1 93ba      	ST   -Y,R27
0003d2 93ea      	ST   -Y,R30
0003d3 93fa      	ST   -Y,R31
0003d4 b7ef      	IN   R30,SREG
0003d5 93ea      	ST   -Y,R30
                 ; 0000 00DA 
                 ; 0000 00DB     // ISR called every 8.595 msec when TCCRB = 0x09, and OCR3A = 0xFFFF
                 ; 0000 00DC 
                 ; 0000 00DD     // switch debounce logic. refer: https://www.embedded.com/electronics-blogs/break-points/4024981/My-favorite-softwar ...
                 ; 0000 00DE     // 16 bit shifts = approx 130msec debounce delay
                 ; 0000 00DF on_button_state = (0x8000 | !PINE.4) | (on_button_state << 1);
0003d6 e0e0      	LDI  R30,0
0003d7 9b0c      	SBIS 0x1,4
0003d8 e0e1      	LDI  R30,1
0003d9 e0f0      	LDI  R31,0
0003da 68f0      	ORI  R31,HIGH(0x8000)
0003db 01df      	MOVW R26,R30
0003dc 91e0 0615 	LDS  R30,_on_button_state
0003de 91f0 0616 	LDS  R31,_on_button_state+1
0003e0 940e 0ca8 	CALL SUBOPT_0xB
0003e2 93e0 0615 	STS  _on_button_state,R30
0003e4 93f0 0616 	STS  _on_button_state+1,R31
                 ; 0000 00E0     if(on_button_state == 0xC000) {
0003e6 91a0 0615 	LDS  R26,_on_button_state
0003e8 91b0 0616 	LDS  R27,_on_button_state+1
0003ea 30a0      	CPI  R26,LOW(0xC000)
0003eb ece0      	LDI  R30,HIGH(0xC000)
0003ec 07be      	CPC  R27,R30
0003ed f431      	BRNE _0x46
                 ; 0000 00E1        on_pressed = 1;
0003ee e0e1      	LDI  R30,LOW(1)
0003ef e0f0      	LDI  R31,HIGH(1)
0003f0 93e0 060f 	STS  _on_pressed,R30
0003f2 93f0 0610 	STS  _on_pressed+1,R31
                 ; 0000 00E2 
                 ; 0000 00E3     }
                 ; 0000 00E4 
                 ; 0000 00E5     off_button_state = (0x8000 | !PINE.6) | (off_button_state << 1);
                 _0x46:
0003f4 e0e0      	LDI  R30,0
0003f5 9b0e      	SBIS 0x1,6
0003f6 e0e1      	LDI  R30,1
0003f7 e0f0      	LDI  R31,0
0003f8 68f0      	ORI  R31,HIGH(0x8000)
0003f9 01df      	MOVW R26,R30
0003fa 91e0 0617 	LDS  R30,_off_button_state
0003fc 91f0 0618 	LDS  R31,_off_button_state+1
0003fe 940e 0ca8 	CALL SUBOPT_0xB
000400 93e0 0617 	STS  _off_button_state,R30
000402 93f0 0618 	STS  _off_button_state+1,R31
                 ; 0000 00E6     if(off_button_state == 0xC000 ) {
000404 91a0 0617 	LDS  R26,_off_button_state
000406 91b0 0618 	LDS  R27,_off_button_state+1
000408 30a0      	CPI  R26,LOW(0xC000)
000409 ece0      	LDI  R30,HIGH(0xC000)
00040a 07be      	CPC  R27,R30
00040b f431      	BRNE _0x47
                 ; 0000 00E7         off_pressed = 1;
00040c e0e1      	LDI  R30,LOW(1)
00040d e0f0      	LDI  R31,HIGH(1)
00040e 93e0 0611 	STS  _off_pressed,R30
000410 93f0 0612 	STS  _off_pressed+1,R31
                 ; 0000 00E8     }
                 ; 0000 00E9 
                 ; 0000 00EA     reset_button_state = (0x8000 | !PIND.4) | (reset_button_state << 1);
                 _0x47:
000412 e0e0      	LDI  R30,0
000413 9b84      	SBIS 0x10,4
000414 e0e1      	LDI  R30,1
000415 e0f0      	LDI  R31,0
000416 68f0      	ORI  R31,HIGH(0x8000)
000417 01df      	MOVW R26,R30
000418 91e0 0619 	LDS  R30,_reset_button_state
00041a 91f0 061a 	LDS  R31,_reset_button_state+1
00041c 940e 0ca8 	CALL SUBOPT_0xB
00041e 93e0 0619 	STS  _reset_button_state,R30
000420 93f0 061a 	STS  _reset_button_state+1,R31
                 ; 0000 00EB     if(reset_button_state == 0xC000 ) {
000422 91a0 0619 	LDS  R26,_reset_button_state
000424 91b0 061a 	LDS  R27,_reset_button_state+1
000426 30a0      	CPI  R26,LOW(0xC000)
000427 ece0      	LDI  R30,HIGH(0xC000)
000428 07be      	CPC  R27,R30
000429 f431      	BRNE _0x48
                 ; 0000 00EC         reset_pressed = 1;
00042a e0e1      	LDI  R30,LOW(1)
00042b e0f0      	LDI  R31,HIGH(1)
00042c 93e0 0613 	STS  _reset_pressed,R30
00042e 93f0 0614 	STS  _reset_pressed+1,R31
                 ; 0000 00ED     }
                 ; 0000 00EE 
                 ; 0000 00EF }
                 _0x48:
000430 91e9      	LD   R30,Y+
000431 bfef      	OUT  SREG,R30
000432 91f9      	LD   R31,Y+
000433 91e9      	LD   R30,Y+
000434 91b9      	LD   R27,Y+
000435 91a9      	LD   R26,Y+
000436 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;// SPI functions
                 ;#include <spi.h>
                 ;//---------------THERMOCOUPLE------------
                 ;#include "Thermocouple.c"
                 ;//ThermoInit(void);
                 ;/*
                 ;/*
                 ; *  Define literals for the SPI port accesses and the thermocouple chip
                 ; *  select line.
                 ; */
                 ;#define  PORT_THERMO_CS           PORTE
                 ;#define  DDR_THERMO_CS            DDRE
                 ;#define  BIT_THERMO_CS            3
                 ;#define  MASK_THERMO_CS           (1<<BIT_THERMO_CS)
                 ;
                 ;#define  PORT_SPI                 PORTB
                 ;#define  DDR_SPI                  DDRB
                 ;#define  BIT_SPI_SCK              1
                 ;#define  MASK_SPI_SCK             (1<<BIT_SPI_SCK)
                 ;#define  BIT_SPI_SS               0
                 ;#define  MASK_SPI_SS              (1<<BIT_SPI_SS)
                 ;#define  BIT_SPI_MISO             3
                 ;#define  MASK_SPI_MISO            (1<<BIT_SPI_MISO)
                 ;
                 ;/*
                 ; *  ThermoInit      set up hardware for using the MAX31855
                 ; *
                 ; *  This routine configures the SPI as a master for exchanging
                 ; *  data with the MAX31855 thermocouple converter.  All pins
                 ; *  and registers for accessing the various port lines are
                 ; *  defined at the top of this code as named literals.
                 ; */
                 ;/*
                 ;void  ThermoInit(void)
                 ;{
                 ;    PORT_THERMO_CS |= MASK_THERMO_CS;        // start with CS high
                 ;    DDR_THERMO_CS |= MASK_THERMO_CS;         // now make that line an output
                 ;
                 ;    PORT_SPI |= MASK_SPI_SS;                 // SS* is not used but must be driven high
                 ;    DDR_SPI |= MASK_SPI_SS;                  // SS* is not used but must be driven high
                 ;    PORT_SPI &= ~MASK_SPI_SCK;               // drive SCK low
                 ;    DDR_SPI |= MASK_SPI_SCK;                 // now make SCK an output
                 ;
                 ;    SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0) | (1<<SPR1) | (1<<CPHA);
                 ;                                             // enable SPI as master, slowest clock,
                 ;                                             // data active on trailing edge of SCK
                 ;}
                 ;
                 ;
                 ;/*
                 ; *  ThermoReadRaw      return 32-bit raw value from MAX31855
                 ; *
                 ; *  This routine uses a four-byte SPI exchange to collect a
                 ; *  raw reading from the MAX31855 thermocouple converter.  That
                 ; *  value is returned unprocessed to the calling routine.
                 ; *
                 ; *  Note that this routine does NO processing.  It does not
                 ; *  check for error flags or reasonable data ranges.
                 ;
                 ;//  d = 0x01900000;            // thermocouple = +25C, reference = 0C, no faults
                 ;//  d = 0xfff00000;            // thermocouple = -1C, reference = 0C, no faults
                 ;//  d = 0xf0600000;            // thermocouple = -250C, reference = 0C, no faults
                 ;//  d = 0x00010001;            // thermocouple = N/A, reference = N/A, open fault
                 ;//  d = 0x00010002;            // thermocouple = N/A, reference = N/A, short to GND
                 ;//  d = 0x00010004;            // thermocouple = N/A, refernece = N/A, short to VCC
                 ;*/
                 ;
                 ;/*
                 ;signed int  ThermoReadRaw (void)
                 ;{
                 ;    signed int                   d;
                 ;    unsigned char                n;
                 ;
                 ;    PORT_THERMO_CS &= ~MASK_THERMO_CS;    // pull thermo CS low
                 ;    d = 0;                                // start with nothing
                 ;    for (n=3; n!=0xff; n--)
                 ;    {
                 ;        SPDR = 0;                         // send a null byte
                 ;        while ((SPSR & (1<<SPIF)) == 0)  ;    // wait until transfer ends
                 ;        d = (d<<8) + SPDR;                // add next byte, starting with MSB
                 ;    }
                 ;    PORT_THERMO_CS |= MASK_THERMO_CS;     // done, pull CS high
                 ;    return  d;
                 ;}
                 ;
                 ;/*
                 ; *  ThermoReadC      return thermocouple temperature in degrees C
                 ; *
                 ; *  This routine takes a raw reading from the thermocouple converter
                 ; *  and translates that value into a temperature in degrees C.  That
                 ; *  value is returned to the calling routine as an integer value,
                 ; *  rounded.
                 ; *
                 ; *  The thermocouple value is stored in bits 31-18 as a signed 14-bit
                 ; *  value, where the LSB represents 0.25 degC.  To convert to an
                 ; *  integer value with no intermediate float operations, this code
                 ; *  shifts the value 20 places right, rather than 18, effectively
                 ; *  dividing the raw value by 4 and scaling it to unit degrees.
                 ; *
                 ; *  Note that this routine does NOT check the error flags in the
                 ; *  raw value.  This would be a nice thing to add later, when I've
                 ; *  figured out how I want to propagate the error conditions...
                 ; */
                 ; /*
                 ;int  ThermoReadC(void)
                 ;{
                 ;    signed int d;
                 ;    int neg;
                 ;
                 ;
                 ;    neg = 0;                    // assume a positive raw value
                 ;    d = ThermoReadRaw();        // get a raw value
                 ;    d = ((d >> 10) & 0x3fff);   // leave only thermocouple value in d
                 ;    if (d & 0x2000)             // if thermocouple reading is negative...
                 ;    {
                 ;        d = -d & 0x3fff;        // always work with positive values
                 ;        neg = 1;                // but note original value was negative
                 ;    }
                 ;    d = d + 2;                  // round up by 0.5 degC (2 LSBs)
                 ;    d = d >> 2;                 // now convert from 0.25 degC units to degC
                 ;    if (neg)  d = -d;           // convert to negative if needed
                 ;    return  d;                  // return as integer
                 ;}
                 ;   */
                 ;
                 ;/*
                 ; *  ThermoReadF      return thermocouple temperature in degrees F
                 ; *
                 ; *  This routine takes a reading from the thermocouple converter in
                 ; *  degC and converts it to degF.
                 ; *
                 ; *  Note that this routine simply calls ThermoReadC and converts
                 ; *  from degC to degF using integer math.  This routine does not
                 ; *  see the raw converter value and cannot do any error checking.
                 ; */
                 ;/*int  ThermoReadF(void)
                 ;{
                 ;    int t;
                 ;
                 ;    t = ThermoReadC();           // get the value in degC
                 ;    t = ((t * 90) / 50) + 32;    // convert to degF
                 ;    return  t;                   // all done
                 ;}*/
                 ;
                 ;
                 ;//---------------Variables---------------
                 ;#include <variables.h>
                 ;//-------------Display Functions---------
                 ;#include "Display_functions.c"
                 ;//#include <variables.h>
                 ;
                 ;void pointer_display_horiz()                          //checks the cursor position.
                 ; 0000 00F9 {
                 _pointer_display_horiz:
                 ; .FSTART _pointer_display_horiz
                 ;    lcd_gotoxy(0,2);
000437 940e 0cad 	CALL SUBOPT_0xC
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(1,2);
000439 e0e1      	LDI  R30,LOW(1)
00043a 940e 0cb6 	CALL SUBOPT_0xD
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(2,2);
00043c e0e2      	LDI  R30,LOW(2)
00043d 940e 0cb6 	CALL SUBOPT_0xD
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(3,2);
00043f e0e3      	LDI  R30,LOW(3)
000440 940e 0cb6 	CALL SUBOPT_0xD
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(Pointer_horiz,2);                      //Pointer displays arrow at that position
000442 928a      	ST   -Y,R8
000443 e0a2      	LDI  R26,LOW(2)
000444 940e 0bc3 	CALL _lcd_gotoxy
                 ;    lcd_putsf("^");
                +
000446 efaf     +LDI R26 , LOW ( 2 * _0x0 + ( 79 ) )
000447 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 79 ) )
                 	__POINTW2FN _0x0,79
000448 c016      	RJMP _0x212000C
                 ;}
                 ; .FEND
                 ;
                 ;void pointer_display_vert()                          //checks the cursor position.
                 ;{
                 _pointer_display_vert:
                 ; .FSTART _pointer_display_vert
                 ;    lcd_gotoxy(0,0);
000449 940e 0cbe 	CALL SUBOPT_0xE
                 ;    lcd_putsf(" ");
00044b 940e 0cc3 	CALL SUBOPT_0xF
                 ;    lcd_gotoxy(0,1);
00044d 940e 0cc7 	CALL SUBOPT_0x10
                 ;    lcd_putsf(" ");
00044f 940e 0cc3 	CALL SUBOPT_0xF
                 ;    lcd_gotoxy(0,2);
000451 940e 0cad 	CALL SUBOPT_0xC
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(0,3);
000453 e0e0      	LDI  R30,LOW(0)
000454 940e 0ccc 	CALL SUBOPT_0x11
                 ;    lcd_putsf(" ");
000456 940e 0cc3 	CALL SUBOPT_0xF
                 ;    lcd_gotoxy(0,Pointer_vert);                      //Pointer displays arrow at that position
000458 e0e0      	LDI  R30,LOW(0)
000459 93ea      	ST   -Y,R30
00045a 2daa      	MOV  R26,R10
00045b 940e 0bc3 	CALL _lcd_gotoxy
                 ;    lcd_putsf(">");
                +
00045d eba4     +LDI R26 , LOW ( 2 * _0x0 + ( 4 ) )
00045e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW2FN _0x0,4
                 _0x212000C:
00045f 940e 0c11 	CALL _lcd_putsf
                 ;}
000461 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void show_volt()
                 ;{
                 _show_volt:
                 ; .FSTART _show_volt
                 ;    sprintf(disp_volt,"%03d",set_voltage);
000462 e7e4      	LDI  R30,LOW(_disp_volt)
000463 e0f5      	LDI  R31,HIGH(_disp_volt)
000464 940e 0cd0 	CALL SUBOPT_0x12
                 ;    lcd_gotoxy(0,1);
000466 940e 0cc7 	CALL SUBOPT_0x10
                 ;    lcd_puts(disp_volt);
000468 e7a4      	LDI  R26,LOW(_disp_volt)
000469 e0b5      	LDI  R27,HIGH(_disp_volt)
00046a c24d      	RJMP _0x2120008
                 ;}
                 ; .FEND
                 ;void show_current()
                 ;{
                 _show_current:
                 ; .FSTART _show_current
                 ;    sprintf(disp_current,"%02d",set_current);
00046b e7e7      	LDI  R30,LOW(_disp_current)
00046c e0f5      	LDI  R31,HIGH(_disp_current)
00046d 93fa      	ST   -Y,R31
00046e 93ea      	ST   -Y,R30
                +
00046f e0e6     +LDI R30 , LOW ( 2 * _0x0 + ( 86 ) )
000470 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 86 ) )
                 	__POINTW1FN _0x0,86
000471 940e 0ce5 	CALL SUBOPT_0x13
                 ;    lcd_gotoxy(0,1);
000473 940e 0cc7 	CALL SUBOPT_0x10
                 ;    lcd_puts(disp_current);
000475 e7a7      	LDI  R26,LOW(_disp_current)
000476 e0b5      	LDI  R27,HIGH(_disp_current)
000477 c240      	RJMP _0x2120008
                 ;}
                 ; .FEND
                 ;
                 ;//----Input and val change functions-----
                 ;#include "Change.c"
                 ;#include "Inputs.c"
                 ;//#include <variables.h>
                 ;
                 ;
                 ;
                 ;void input(int next)                         //next recieves value no of options we will have in the next menu
                 ; 0000 00FC {
                 _input:
                 ; .FSTART _input
                 ;    Pt = Pointer_vert;
000478 93ba      	ST   -Y,R27
000479 93aa      	ST   -Y,R26
                 ;	next -> Y+0
00047a 0165      	MOVW R12,R10
                 ;    pointer_display_vert();
00047b dfcd      	RCALL _pointer_display_vert
                 ;    delay_ms(100);
00047c 940e 0cf6 	CALL SUBOPT_0x14
                 ;    if (PINE.7 == 0)                                            //UP
00047e 990f      	SBIC 0x1,7
00047f c016      	RJMP _0x49
                 ;       {
                 ;        while(PINE.7 == 0);
                 _0x4A:
000480 9b0f      	SBIS 0x1,7
000481 cffe      	RJMP _0x4A
                 ;        Pt--;
000482 01f6      	MOVW R30,R12
000483 9731      	SBIW R30,1
000484 016f      	MOVW R12,R30
                 ;        Pointer_vert = ((Pt < 0) ? (next+Pt): Pt) % next;
000485 2400      	CLR  R0
000486 14c0      	CP   R12,R0
000487 04d0      	CPC  R13,R0
000488 f42c      	BRGE _0x4D
000489 81a8      	LD   R26,Y
00048a 81b9      	LDD  R27,Y+1
00048b 0fea      	ADD  R30,R26
00048c 1ffb      	ADC  R31,R27
00048d c001      	RJMP _0x4E
                 _0x4D:
00048e 01f6      	MOVW R30,R12
                 _0x4E:
00048f 01df      	MOVW R26,R30
000490 81e8      	LD   R30,Y
000491 81f9      	LDD  R31,Y+1
000492 940e 1071 	CALL __MODW21
000494 015f      	MOVW R10,R30
                 ;        pointer_display_vert();
000495 dfb3      	RCALL _pointer_display_vert
                 ;       }
                 ;
                 ;    if (PINE.5 == 0)                                            //DOWN
                 _0x49:
000496 990d      	SBIC 0x1,5
000497 c00c      	RJMP _0x50
                 ;       {
                 ;        while(PINE.5 == 0);
                 _0x51:
000498 9b0d      	SBIS 0x1,5
000499 cffe      	RJMP _0x51
                 ;        Pointer_vert++;
00049a 01f5      	MOVW R30,R10
00049b 9631      	ADIW R30,1
00049c 015f      	MOVW R10,R30
                 ;        Pointer_vert = Pointer_vert % next;
00049d 81e8      	LD   R30,Y
00049e 81f9      	LDD  R31,Y+1
00049f 01d5      	MOVW R26,R10
0004a0 940e 1071 	CALL __MODW21
0004a2 015f      	MOVW R10,R30
                 ;        pointer_display_vert();
0004a3 dfa5      	RCALL _pointer_display_vert
                 ;       }
                 ;
                 ;    if (PINB.3 == 0)                                            //ENTER
                 _0x50:
0004a4 99b3      	SBIC 0x16,3
0004a5 c012      	RJMP _0x54
                 ;       {
                 ;        while(PINB.3 == 0);
                 _0x55:
0004a6 9bb3      	SBIS 0x16,3
0004a7 cffe      	RJMP _0x55
                 ;        if(Screen < 10)
0004a8 e0ea      	LDI  R30,LOW(10)
0004a9 e0f0      	LDI  R31,HIGH(10)
0004aa 164e      	CP   R4,R30
0004ab 065f      	CPC  R5,R31
0004ac f41c      	BRGE _0x58
                 ;        {
                 ;            Screen = ((Screen+1)*10) + Pointer_vert;
0004ad 01f2      	MOVW R30,R4
0004ae 9631      	ADIW R30,1
0004af c001      	RJMP _0xBC
                 ;        }
                 ;        else
                 _0x58:
                 ;        {
                 ;            Screen = ((Screen)*10) + Pointer_vert;
0004b0 01f2      	MOVW R30,R4
                 _0xBC:
0004b1 e0aa      	LDI  R26,LOW(10)
0004b2 e0b0      	LDI  R27,HIGH(10)
0004b3 940e 102f 	CALL __MULW12
0004b5 0dea      	ADD  R30,R10
0004b6 1dfb      	ADC  R31,R11
0004b7 012f      	MOVW R4,R30
                 ;        }
                 ;
                 ;
                 ;       }
                 ;
                 ;    if (PIND.2 == 0)                                            //ESCAPE
                 _0x54:
0004b8 9982      	SBIC 0x10,2
0004b9 c028      	RJMP _0x5A
                 ;       {
                 ;        while(PIND.2 == 0);
                 _0x5B:
0004ba 9b82      	SBIS 0x10,2
0004bb cffe      	RJMP _0x5B
                 ;
                 ;            if (Screen == 2)
0004bc e0e2      	LDI  R30,LOW(2)
0004bd e0f0      	LDI  R31,HIGH(2)
0004be 15e4      	CP   R30,R4
0004bf 05f5      	CPC  R31,R5
0004c0 f4b9      	BRNE _0x5E
                 ;            {
                 ;              lcd_clear();
0004c1 940e 0cfa 	CALL SUBOPT_0x15
                 ;              lcd_gotoxy(0,0);
                 ;              lcd_putsf("Main Screen");
                +
0004c3 e0ab     +LDI R26 , LOW ( 2 * _0x0 + ( 91 ) )
0004c4 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 91 ) )
                 	__POINTW2FN _0x0,91
0004c5 940e 0c11 	CALL _lcd_putsf
                 ;              delay_ms(1000);
0004c7 eea8      	LDI  R26,LOW(1000)
0004c8 e0b3      	LDI  R27,HIGH(1000)
0004c9 940e 0e3d 	CALL _delay_ms
                 ;              main_screen_trigger = 1;
0004cb 940e 0cfd 	CALL SUBOPT_0x16
                 ;              current_mainscreen_flag = 1;
0004cd 940e 0c6c 	CALL SUBOPT_0x3
                 ;              Current_Screen = 0;
0004cf 2466      	CLR  R6
0004d0 2477      	CLR  R7
                 ;              set_flag = 1;
0004d1 e0e1      	LDI  R30,LOW(1)
0004d2 e0f0      	LDI  R31,HIGH(1)
0004d3 93e0 055b 	STS  _set_flag,R30
0004d5 93f0 055c 	STS  _set_flag+1,R31
                 ;
                 ;            }
                 ;            else if(Screen > 100)
0004d7 c00a      	RJMP _0x5F
                 _0x5E:
0004d8 940e 0d04 	CALL SUBOPT_0x17
0004da f41c      	BRGE _0x60
                 ;            {
                 ;                Screen = Screen/10;
0004db 940e 0d09 	CALL SUBOPT_0x18
0004dd c003      	RJMP _0xBD
                 ;            }
                 ;            else
                 _0x60:
                 ;            {
                 ;                Screen = (Screen/10)-1;
0004de 940e 0d09 	CALL SUBOPT_0x18
0004e0 9731      	SBIW R30,1
                 _0xBD:
0004e1 012f      	MOVW R4,R30
                 ;            }
                 _0x5F:
                 ;
                 ;
                 ;       }
                 ;
                 ;}
                 _0x5A:
                 _0x212000B:
0004e2 9622      	ADIW R28,2
0004e3 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void input_volt(int next)
                 ;{
                 _input_volt:
                 ; .FSTART _input_volt
                 ;    int change = pow(10,(next-Pointer_horiz-1));
                 ;    pointer_display_horiz();
0004e4 940e 0d0f 	CALL SUBOPT_0x19
                 ;	next -> Y+2
                 ;	change -> R16,R17
                 ;    delay_ms(100);
                 ;    if (PINE.7 == 0)                                            //UP     1
0004e6 990f      	SBIC 0x1,7
0004e7 c01d      	RJMP _0x62
                 ;       {
                 ;        while(PINE.7 == 0);
                 _0x63:
0004e8 9b0f      	SBIS 0x1,7
0004e9 cffe      	RJMP _0x63
                 ;        if(change == 1)
0004ea e0e1      	LDI  R30,LOW(1)
0004eb e0f0      	LDI  R31,HIGH(1)
0004ec 17e0      	CP   R30,R16
0004ed 07f1      	CPC  R31,R17
0004ee f421      	BRNE _0x66
                 ;        {set_voltage = set_voltage + (change);}
0004ef 01f8      	MOVW R30,R16
0004f0 940e 0d31 	CALL SUBOPT_0x1A
0004f2 c004      	RJMP _0xBE
                 ;        else
                 _0x66:
                 ;        {set_voltage = set_voltage + 1 + (change);}
0004f3 940e 0d3a 	CALL SUBOPT_0x1B
0004f5 940e 0d43 	CALL SUBOPT_0x1C
                 _0xBE:
0004f7 940e 1022 	CALL __CWD1
0004f9 940e 1011 	CALL __ADDD12
0004fb 940e 0d4b 	CALL SUBOPT_0x1D
                 ;        set_voltage = set_voltage % 1000;
0004fd 940e 0d31 	CALL SUBOPT_0x1A
0004ff 940e 0d54 	CALL SUBOPT_0x1E
000501 940e 0d4b 	CALL SUBOPT_0x1D
                 ;        show_volt();
000503 df5e      	RCALL _show_volt
                 ;        pointer_display_horiz();
000504 df32      	RCALL _pointer_display_horiz
                 ;       }
                 ;
                 ;    if (PINE.5 == 0)                                            //Next   2
                 _0x62:
000505 990d      	SBIC 0x1,5
000506 c004      	RJMP _0x68
                 ;       {
                 ;        while(PINE.5 == 0);
                 _0x69:
000507 9b0d      	SBIS 0x1,5
000508 cffe      	RJMP _0x69
                 ;        Pointer_horiz++;
000509 940e 0d5b 	CALL SUBOPT_0x1F
                 ;
                 ;        Pointer_horiz = Pointer_horiz % next;
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINB.3 == 0)                                             //ENTER 3
                 _0x68:
00050b 99b3      	SBIC 0x16,3
00050c c04e      	RJMP _0x6C
                 ;        {
                 ;         while(PINB.3 == 0);
                 _0x6D:
00050d 9bb3      	SBIS 0x16,3
00050e cffe      	RJMP _0x6D
                 ;         if(110 <= set_voltage && set_voltage <= 135)
00050f 940e 0d3a 	CALL SUBOPT_0x1B
                +
000511 36ee     +CPI R30 , LOW ( 0x6E )
000512 e0a0     +LDI R26 , HIGH ( 0x6E )
000513 07fa     +CPC R31 , R26
000514 e0a0     +LDI R26 , BYTE3 ( 0x6E )
000515 076a     +CPC R22 , R26
000516 e0a0     +LDI R26 , BYTE4 ( 0x6E )
000517 077a     +CPC R23 , R26
                 	__CPD1N 0x6E
000518 f054      	BRLT _0x71
000519 940e 0d31 	CALL SUBOPT_0x1A
                +
00051b 38a8     +CPI R26 , LOW ( 0x88 )
00051c e0e0     +LDI R30 , HIGH ( 0x88 )
00051d 07be     +CPC R27 , R30
00051e e0e0     +LDI R30 , BYTE3 ( 0x88 )
00051f 078e     +CPC R24 , R30
000520 e0e0     +LDI R30 , BYTE4 ( 0x88 )
000521 079e     +CPC R25 , R30
                 	__CPD2N 0x88
000522 f00c      	BRLT _0x72
                 _0x71:
000523 c019      	RJMP _0x70
                 _0x72:
                 ;         {
                 ;            lcd_clear();
000524 940e 0cfa 	CALL SUBOPT_0x15
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_puts("Voltage set to:");
                +
000526 e0a2     +LDI R26 , LOW ( _0x73 + ( 0 ) )
000527 e0b5     +LDI R27 , HIGH ( _0x73 + ( 0 ) )
                 	__POINTW2MN _0x73,0
000528 940e 0d66 	CALL SUBOPT_0x20
                 ;            lcd_gotoxy(4,1);
00052a e0a1      	LDI  R26,LOW(1)
00052b 940e 0bc3 	CALL _lcd_gotoxy
                 ;            lcd_putsf("V");
                +
00052d e2a7     +LDI R26 , LOW ( 2 * _0x0 + ( 119 ) )
00052e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 119 ) )
                 	__POINTW2FN _0x0,119
00052f 940e 0c11 	CALL _lcd_putsf
                 ;            show_volt();
000531 df30      	RCALL _show_volt
                 ;
                 ;            //Voltage = temp_volt;
                 ;            flag = 11;
000532 940e 0d6b 	CALL SUBOPT_0x21
                 ;            Screen = 30;
000534 e1ee      	LDI  R30,LOW(30)
000535 e0f0      	LDI  R31,HIGH(30)
000536 012f      	MOVW R4,R30
                 ;
                 ;
                 ;           // delay_ms(2000);
                 ;
                 ;            txSetVoltage(set_voltage);
000537 91a0 054b 	LDS  R26,_set_voltage
000539 91b0 054c 	LDS  R27,_set_voltage+1
00053b dc7d      	RCALL _txSetVoltage
                 ;         }
                 ;         else
00053c c01e      	RJMP _0x74
                 _0x70:
                 ;         {
                 ;            lcd_clear();
00053d 940e 0cfa 	CALL SUBOPT_0x15
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_putsf("Set value should");
00053f 940e 0d72 	CALL SUBOPT_0x22
                 ;            lcd_gotoxy(0,1);
                 ;            lcd_putsf("be between 110-");
                +
000541 e3aa     +LDI R26 , LOW ( 2 * _0x0 + ( 138 ) )
000542 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 138 ) )
                 	__POINTW2FN _0x0,138
000543 940e 0d77 	CALL SUBOPT_0x23
                 ;            lcd_gotoxy(0,2);
                 ;            lcd_putsf("135 volts");
                +
000545 e4aa     +LDI R26 , LOW ( 2 * _0x0 + ( 154 ) )
000546 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 154 ) )
                 	__POINTW2FN _0x0,154
000547 940e 0c11 	CALL _lcd_putsf
                 ;            set_voltage = 000;
000549 e0e0      	LDI  R30,LOW(0)
00054a 93e0 054b 	STS  _set_voltage,R30
00054c 93e0 054c 	STS  _set_voltage+1,R30
00054e 93e0 054d 	STS  _set_voltage+2,R30
000550 93e0 054e 	STS  _set_voltage+3,R30
                 ;            Screen = 30;
000552 e1ee      	LDI  R30,LOW(30)
000553 e0f0      	LDI  R31,HIGH(30)
000554 012f      	MOVW R4,R30
                 ;            flag = 11;
000555 940e 0d6b 	CALL SUBOPT_0x21
                 ;            delay_ms(2000);
000557 eda0      	LDI  R26,LOW(2000)
000558 e0b7      	LDI  R27,HIGH(2000)
000559 940e 0e3d 	CALL _delay_ms
                 ;         }
                 _0x74:
                 ;
                 ;        }
                 ;
                 ;    if (PIND.2 == 0)                                            //ESCAPE 4
                 _0x6C:
00055b 9982      	SBIC 0x10,2
00055c c00e      	RJMP _0x75
                 ;       {
                 ;        while(PIND.2 == 0);
                 _0x76:
00055d 9b82      	SBIS 0x10,2
00055e cffe      	RJMP _0x76
                 ;        flag = 11;
00055f 940e 0d6b 	CALL SUBOPT_0x21
                 ;        if(Screen > 100)
000561 940e 0d04 	CALL SUBOPT_0x17
000563 f41c      	BRGE _0x79
                 ;        {Screen = Screen/10;}
000564 940e 0d09 	CALL SUBOPT_0x18
000566 c003      	RJMP _0xBF
                 ;        else
                 _0x79:
                 ;        {Screen = (Screen/10)-1;}
000567 940e 0d09 	CALL SUBOPT_0x18
000569 9731      	SBIW R30,1
                 _0xBF:
00056a 012f      	MOVW R4,R30
                 ;        //flag = 1;
                 ;       }
                 ;}
                 _0x75:
00056b 8119      	LDD  R17,Y+1
00056c 8108      	LDD  R16,Y+0
00056d 940c 0a15 	JMP  _0x2120006
                 ; .FEND
                 
                 	.DSEG
                 _0x73:
000502           	.BYTE 0x10
                 ;
                 ;void input_current(int next)
                 ;{
                 
                 	.CSEG
                 _input_current:
                 ; .FSTART _input_current
                 ;    int change = pow(10,(next-Pointer_horiz-1));
                 ;    pointer_display_horiz();
00056f 940e 0d0f 	CALL SUBOPT_0x19
                 ;	next -> Y+2
                 ;	change -> R16,R17
                 ;    delay_ms(100);
                 ;    if (PINE.7 == 0)                                            //UP     1
000571 990f      	SBIC 0x1,7
000572 c01d      	RJMP _0x7B
                 ;       {
                 ;        while(PINE.7 == 0);
                 _0x7C:
000573 9b0f      	SBIS 0x1,7
000574 cffe      	RJMP _0x7C
                 ;        if(change == 1)
000575 e0e1      	LDI  R30,LOW(1)
000576 e0f0      	LDI  R31,HIGH(1)
000577 17e0      	CP   R30,R16
000578 07f1      	CPC  R31,R17
000579 f421      	BRNE _0x7F
                 ;        {set_current = set_current + (change);}
00057a 01f8      	MOVW R30,R16
00057b 940e 0d7e 	CALL SUBOPT_0x24
00057d c004      	RJMP _0xC0
                 ;        else
                 _0x7F:
                 ;        {set_current = set_current + 1 + (change);}
00057e 940e 0d87 	CALL SUBOPT_0x25
000580 940e 0d43 	CALL SUBOPT_0x1C
                 _0xC0:
000582 940e 1022 	CALL __CWD1
000584 940e 1011 	CALL __ADDD12
000586 940e 0d90 	CALL SUBOPT_0x26
                 ;        set_current = set_current % 1000;
000588 940e 0d7e 	CALL SUBOPT_0x24
00058a 940e 0d54 	CALL SUBOPT_0x1E
00058c 940e 0d90 	CALL SUBOPT_0x26
                 ;        show_current();
00058e dedc      	RCALL _show_current
                 ;        pointer_display_horiz();
00058f dea7      	RCALL _pointer_display_horiz
                 ;       }
                 ;
                 ;    if (PINE.5 == 0)                                            //Next   2
                 _0x7B:
000590 990d      	SBIC 0x1,5
000591 c004      	RJMP _0x81
                 ;       {
                 ;        while(PINE.5 == 0);
                 _0x82:
000592 9b0d      	SBIS 0x1,5
000593 cffe      	RJMP _0x82
                 ;        Pointer_horiz++;
000594 940e 0d5b 	CALL SUBOPT_0x1F
                 ;
                 ;        Pointer_horiz = Pointer_horiz % next;
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINB.3 == 0)                                             //ENTER 3
                 _0x81:
000596 99b3      	SBIC 0x16,3
000597 c04b      	RJMP _0x85
                 ;        {
                 ;         while(PINB.3 == 0);
                 _0x86:
000598 9bb3      	SBIS 0x16,3
000599 cffe      	RJMP _0x86
                 ;         if(10 <= set_current && set_current <= 20)
00059a 940e 0d87 	CALL SUBOPT_0x25
                +
00059c 30ea     +CPI R30 , LOW ( 0xA )
00059d e0a0     +LDI R26 , HIGH ( 0xA )
00059e 07fa     +CPC R31 , R26
00059f e0a0     +LDI R26 , BYTE3 ( 0xA )
0005a0 076a     +CPC R22 , R26
0005a1 e0a0     +LDI R26 , BYTE4 ( 0xA )
0005a2 077a     +CPC R23 , R26
                 	__CPD1N 0xA
0005a3 f054      	BRLT _0x8A
0005a4 940e 0d7e 	CALL SUBOPT_0x24
                +
0005a6 31a5     +CPI R26 , LOW ( 0x15 )
0005a7 e0e0     +LDI R30 , HIGH ( 0x15 )
0005a8 07be     +CPC R27 , R30
0005a9 e0e0     +LDI R30 , BYTE3 ( 0x15 )
0005aa 078e     +CPC R24 , R30
0005ab e0e0     +LDI R30 , BYTE4 ( 0x15 )
0005ac 079e     +CPC R25 , R30
                 	__CPD2N 0x15
0005ad f00c      	BRLT _0x8B
                 _0x8A:
0005ae c016      	RJMP _0x89
                 _0x8B:
                 ;         {
                 ;            lcd_clear();
0005af 940e 0cfa 	CALL SUBOPT_0x15
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_puts("Current set to:");
                +
0005b1 e1a2     +LDI R26 , LOW ( _0x8C + ( 0 ) )
0005b2 e0b5     +LDI R27 , HIGH ( _0x8C + ( 0 ) )
                 	__POINTW2MN _0x8C,0
0005b3 940e 0d99 	CALL SUBOPT_0x27
                 ;            lcd_gotoxy(3,1);
                 ;            lcd_putsf("A");
                +
0005b5 e6a4     +LDI R26 , LOW ( 2 * _0x0 + ( 180 ) )
0005b6 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 180 ) )
                 	__POINTW2FN _0x0,180
0005b7 940e 0c11 	CALL _lcd_putsf
                 ;            show_current();
0005b9 deb1      	RCALL _show_current
                 ;            flag = 11;
0005ba 940e 0d6b 	CALL SUBOPT_0x21
                 ;            Screen = 30;
0005bc e1ee      	LDI  R30,LOW(30)
0005bd e0f0      	LDI  R31,HIGH(30)
0005be 012f      	MOVW R4,R30
                 ;            txSetCurrent(set_current);
0005bf 91a0 054f 	LDS  R26,_set_current
0005c1 91b0 0550 	LDS  R27,_set_current+1
0005c3 dbfe      	RCALL _txSetCurrent
                 ;            delay_ms(2000);
0005c4 c01a      	RJMP _0xC1
                 ;
                 ;         }
                 ;         else
                 _0x89:
                 ;         {
                 ;            lcd_clear();
0005c5 940e 0cfa 	CALL SUBOPT_0x15
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_putsf("Set value should");
0005c7 940e 0d72 	CALL SUBOPT_0x22
                 ;            lcd_gotoxy(0,1);
                 ;            lcd_putsf("be between 10-");
                +
0005c9 e6a6     +LDI R26 , LOW ( 2 * _0x0 + ( 182 ) )
0005ca e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 182 ) )
                 	__POINTW2FN _0x0,182
0005cb 940e 0d77 	CALL SUBOPT_0x23
                 ;            lcd_gotoxy(0,2);
                 ;            lcd_putsf("20 amps");
                +
0005cd e7a5     +LDI R26 , LOW ( 2 * _0x0 + ( 197 ) )
0005ce e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 197 ) )
                 	__POINTW2FN _0x0,197
0005cf 940e 0c11 	CALL _lcd_putsf
                 ;            set_current = 000;
0005d1 e0e0      	LDI  R30,LOW(0)
0005d2 93e0 054f 	STS  _set_current,R30
0005d4 93e0 0550 	STS  _set_current+1,R30
0005d6 93e0 0551 	STS  _set_current+2,R30
0005d8 93e0 0552 	STS  _set_current+3,R30
                 ;            Screen = 30;
0005da e1ee      	LDI  R30,LOW(30)
0005db e0f0      	LDI  R31,HIGH(30)
0005dc 012f      	MOVW R4,R30
                 ;            flag = 11;
0005dd 940e 0d6b 	CALL SUBOPT_0x21
                 ;            delay_ms(2000);
                 _0xC1:
0005df eda0      	LDI  R26,LOW(2000)
0005e0 e0b7      	LDI  R27,HIGH(2000)
0005e1 940e 0e3d 	CALL _delay_ms
                 ;         }
                 ;        }
                 ;
                 ;    if (PIND.2 == 0)                                            //ESCAPE 4
                 _0x85:
0005e3 9982      	SBIC 0x10,2
0005e4 c00e      	RJMP _0x8E
                 ;       {
                 ;        while(PIND.2 == 0);
                 _0x8F:
0005e5 9b82      	SBIS 0x10,2
0005e6 cffe      	RJMP _0x8F
                 ;        flag = 11;
0005e7 940e 0d6b 	CALL SUBOPT_0x21
                 ;        if(Screen > 100)
0005e9 940e 0d04 	CALL SUBOPT_0x17
0005eb f41c      	BRGE _0x92
                 ;        {Screen = Screen/10;}
0005ec 940e 0d09 	CALL SUBOPT_0x18
0005ee c003      	RJMP _0xC2
                 ;        else
                 _0x92:
                 ;        {Screen = (Screen/10)-1;}
0005ef 940e 0d09 	CALL SUBOPT_0x18
0005f1 9731      	SBIW R30,1
                 _0xC2:
0005f2 012f      	MOVW R4,R30
                 ;        //flag = 1;
                 ;       }
                 ;
                 ;
                 ;}
                 _0x8E:
0005f3 8119      	LDD  R17,Y+1
0005f4 8108      	LDD  R16,Y+0
0005f5 940c 0a15 	JMP  _0x2120006
                 ; .FEND
                 
                 	.DSEG
                 _0x8C:
000512           	.BYTE 0x10
                 ;
                 ;
                 ;
                 ;
                 ;void Screen1()
                 ; 0000 0102 {
                 
                 	.CSEG
                 _Screen1:
                 ; .FSTART _Screen1
                 ; 0000 0103     //Screen = 1;
                 ; 0000 0104     Pointer_horiz = 0;
0005f7 2488      	CLR  R8
0005f8 2499      	CLR  R9
                 ; 0000 0105     Pointer_vert = 0;
0005f9 24aa      	CLR  R10
0005fa 24bb      	CLR  R11
                 ; 0000 0106     lcd_clear();
0005fb 940e 0cfa 	CALL SUBOPT_0x15
                 ; 0000 0107     lcd_gotoxy(0,0);
                 ; 0000 0108     lcd_puts("Welcome to HMI");
                +
0005fd e2a2     +LDI R26 , LOW ( _0x94 + ( 0 ) )
0005fe e0b5     +LDI R27 , HIGH ( _0x94 + ( 0 ) )
                 	__POINTW2MN _0x94,0
0005ff 940e 0c02 	CALL _lcd_puts
                 ; 0000 0109     delay_ms(1000);
000601 eea8      	LDI  R26,LOW(1000)
000602 e0b3      	LDI  R27,HIGH(1000)
000603 940e 0e3d 	CALL _delay_ms
                 ; 0000 010A     Screen = 2;
000605 e0e2      	LDI  R30,LOW(2)
000606 e0f0      	LDI  R31,HIGH(2)
000607 012f      	MOVW R4,R30
                 ; 0000 010B     Current_Screen = 1;
000608 e0e1      	LDI  R30,LOW(1)
000609 e0f0      	LDI  R31,HIGH(1)
00060a 013f      	MOVW R6,R30
                 ; 0000 010C     main_screen_trigger = 1;
00060b 940e 0cfd 	CALL SUBOPT_0x16
                 ; 0000 010D     current_mainscreen_flag = 1;
                 _0x212000A:
00060d e0e1      	LDI  R30,LOW(1)
00060e e0f0      	LDI  R31,HIGH(1)
00060f 93e0 0565 	STS  _current_mainscreen_flag,R30
000611 93f0 0566 	STS  _current_mainscreen_flag+1,R31
                 ; 0000 010E }
000613 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x94:
000522           	.BYTE 0xF
                 ;
                 ;void Screen2()
                 ; 0000 0111 {
                 
                 	.CSEG
                 _Screen2:
                 ; .FSTART _Screen2
                 ; 0000 0112     lcd_clear();
000614 940e 0bd4 	CALL _lcd_clear
                 ; 0000 0113     //Screen = 2;
                 ; 0000 0114     Pointer_vert = 0;
000616 24aa      	CLR  R10
000617 24bb      	CLR  R11
                 ; 0000 0115     Pointer_horiz= 0;
000618 2488      	CLR  R8
000619 2499      	CLR  R9
                 ; 0000 0116 
                 ; 0000 0117         lcd_gotoxy(1,0);
00061a e0e1      	LDI  R30,LOW(1)
00061b 940e 0da0 	CALL SUBOPT_0x28
                 ; 0000 0118         lcd_putsf("Set Parameters");
                +
00061d e8ac     +LDI R26 , LOW ( 2 * _0x0 + ( 220 ) )
00061e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 220 ) )
                 	__POINTW2FN _0x0,220
00061f 940e 0c11 	CALL _lcd_putsf
                 ; 0000 0119         n = 1;
000621 e0e1      	LDI  R30,LOW(1)
000622 e0f0      	LDI  R31,HIGH(1)
000623 93e0 055f 	STS  _n,R30
000625 93f0 0560 	STS  _n+1,R31
                 ; 0000 011A         Current_Screen = 2;
000627 e0e2      	LDI  R30,LOW(2)
000628 e0f0      	LDI  R31,HIGH(2)
000629 c051      	RJMP _0x2120009
                 ; 0000 011B }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void Screen30()
                 ; 0000 0120 {
                 _Screen30:
                 ; .FSTART _Screen30
                 ; 0000 0121     lcd_clear();
00062a 940e 0bd4 	CALL _lcd_clear
                 ; 0000 0122     lcd_gotoxy(3,3);
00062c e0e3      	LDI  R30,LOW(3)
00062d 940e 0ccc 	CALL SUBOPT_0x11
                 ; 0000 0123     lcd_putsf("PARAMETERS");
                +
00062f e9ab     +LDI R26 , LOW ( 2 * _0x0 + ( 235 ) )
000630 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 235 ) )
                 	__POINTW2FN _0x0,235
000631 940e 0c11 	CALL _lcd_putsf
                 ; 0000 0124     lcd_gotoxy(1,0);
000633 e0e1      	LDI  R30,LOW(1)
000634 940e 0da0 	CALL SUBOPT_0x28
                 ; 0000 0125     lcd_putsf("Voltage (VOLTS)");
                +
000636 eaa6     +LDI R26 , LOW ( 2 * _0x0 + ( 246 ) )
000637 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 246 ) )
                 	__POINTW2FN _0x0,246
000638 940e 0c11 	CALL _lcd_putsf
                 ; 0000 0126     lcd_gotoxy(1,1);
00063a e0e1      	LDI  R30,LOW(1)
00063b 940e 0da4 	CALL SUBOPT_0x29
                 ; 0000 0127     lcd_putsf("Current (AMPS)");
                +
00063d eba6     +LDI R26 , LOW ( 2 * _0x0 + ( 262 ) )
00063e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 262 ) )
                 	__POINTW2FN _0x0,262
00063f 940e 0c11 	CALL _lcd_putsf
                 ; 0000 0128     n = 2;
000641 e0e2      	LDI  R30,LOW(2)
000642 e0f0      	LDI  R31,HIGH(2)
000643 93e0 055f 	STS  _n,R30
000645 93f0 0560 	STS  _n+1,R31
                 ; 0000 0129     Current_Screen = 30;
000647 e1ee      	LDI  R30,LOW(30)
000648 e0f0      	LDI  R31,HIGH(30)
000649 c031      	RJMP _0x2120009
                 ; 0000 012A }
                 ; .FEND
                 ;
                 ;void Screen300()      //SET VOLTAGE
                 ; 0000 012D {
                 _Screen300:
                 ; .FSTART _Screen300
                 ; 0000 012E     lcd_clear();
00064a 940e 0cfa 	CALL SUBOPT_0x15
                 ; 0000 012F     lcd_gotoxy(0,0);
                 ; 0000 0130     lcd_putsf("Set voltage:");
                +
00064c eca5     +LDI R26 , LOW ( 2 * _0x0 + ( 277 ) )
00064d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 277 ) )
                 	__POINTW2FN _0x0,277
00064e 940e 0c11 	CALL _lcd_putsf
                 ; 0000 0131     show_volt();
000650 de11      	RCALL _show_volt
                 ; 0000 0132     while(flag != 11)
                 _0x95:
000651 91a0 055d 	LDS  R26,_flag
000653 91b0 055e 	LDS  R27,_flag+1
000655 971b      	SBIW R26,11
000656 f021      	BREQ _0x97
                 ; 0000 0133     {
                 ; 0000 0134         input_volt(3);
000657 e0a3      	LDI  R26,LOW(3)
000658 e0b0      	LDI  R27,0
000659 de8a      	RCALL _input_volt
                 ; 0000 0135     }
00065a cff6      	RJMP _0x95
                 _0x97:
                 ; 0000 0136     flag = 0;
00065b e0e0      	LDI  R30,LOW(0)
00065c 93e0 055d 	STS  _flag,R30
00065e 93e0 055e 	STS  _flag+1,R30
                 ; 0000 0137     Current_Screen = 300;
000660 e2ec      	LDI  R30,LOW(300)
000661 e0f1      	LDI  R31,HIGH(300)
000662 c018      	RJMP _0x2120009
                 ; 0000 0138 }
                 ; .FEND
                 ;void Screen301()     //SET CURRENT
                 ; 0000 013A {
                 _Screen301:
                 ; .FSTART _Screen301
                 ; 0000 013B 
                 ; 0000 013C     lcd_clear();
000663 940e 0cfa 	CALL SUBOPT_0x15
                 ; 0000 013D     lcd_gotoxy(0,0);
                 ; 0000 013E     lcd_putsf("Set current:");
                +
000665 eda2     +LDI R26 , LOW ( 2 * _0x0 + ( 290 ) )
000666 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 290 ) )
                 	__POINTW2FN _0x0,290
000667 940e 0c11 	CALL _lcd_putsf
                 ; 0000 013F     show_current();
000669 de01      	RCALL _show_current
                 ; 0000 0140     while(flag != 11)
                 _0x98:
00066a 91a0 055d 	LDS  R26,_flag
00066c 91b0 055e 	LDS  R27,_flag+1
00066e 971b      	SBIW R26,11
00066f f021      	BREQ _0x9A
                 ; 0000 0141     {
                 ; 0000 0142         input_current(2);
000670 e0a2      	LDI  R26,LOW(2)
000671 e0b0      	LDI  R27,0
000672 defc      	RCALL _input_current
                 ; 0000 0143     }
000673 cff6      	RJMP _0x98
                 _0x9A:
                 ; 0000 0144     flag = 0;
000674 e0e0      	LDI  R30,LOW(0)
000675 93e0 055d 	STS  _flag,R30
000677 93e0 055e 	STS  _flag+1,R30
                 ; 0000 0145     Current_Screen = 301;
000679 e2ed      	LDI  R30,LOW(301)
00067a e0f1      	LDI  R31,HIGH(301)
                 _0x2120009:
00067b 013f      	MOVW R6,R30
                 ; 0000 0146 }
00067c 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void Main_Screen()
                 ; 0000 014A {
                 _Main_Screen:
                 ; .FSTART _Main_Screen
                 ; 0000 014B     lcd_clear();
00067d 940e 0cfa 	CALL SUBOPT_0x15
                 ; 0000 014C 
                 ; 0000 014D     lcd_gotoxy(0,0);
                 ; 0000 014E     lcd_putsf("SV:");
                +
00067f edaf     +LDI R26 , LOW ( 2 * _0x0 + ( 303 ) )
000680 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 303 ) )
                 	__POINTW2FN _0x0,303
000681 940e 0c11 	CALL _lcd_putsf
                 ; 0000 014F 
                 ; 0000 0150     lcd_gotoxy(8,0);
000683 e0e8      	LDI  R30,LOW(8)
000684 940e 0da0 	CALL SUBOPT_0x28
                 ; 0000 0151     lcd_putsf("SBC:");
                +
000686 eea3     +LDI R26 , LOW ( 2 * _0x0 + ( 307 ) )
000687 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 307 ) )
                 	__POINTW2FN _0x0,307
000688 940e 0c11 	CALL _lcd_putsf
                 ; 0000 0152 
                 ; 0000 0153     lcd_gotoxy(0,1);
00068a 940e 0cc7 	CALL SUBOPT_0x10
                 ; 0000 0154     lcd_putsf("AV:");
                +
00068c eea8     +LDI R26 , LOW ( 2 * _0x0 + ( 312 ) )
00068d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 312 ) )
                 	__POINTW2FN _0x0,312
00068e 940e 0c11 	CALL _lcd_putsf
                 ; 0000 0155 
                 ; 0000 0156     lcd_gotoxy(8,1);
000690 e0e8      	LDI  R30,LOW(8)
000691 940e 0da4 	CALL SUBOPT_0x29
                 ; 0000 0157     lcd_putsf("ABC:");
                +
000693 eeac     +LDI R26 , LOW ( 2 * _0x0 + ( 316 ) )
000694 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 316 ) )
                 	__POINTW2FN _0x0,316
000695 940e 0d77 	CALL SUBOPT_0x23
                 ; 0000 0158 
                 ; 0000 0159     lcd_gotoxy(0,2);
                 ; 0000 015A     lcd_putsf("AIV:");
                +
000697 efa1     +LDI R26 , LOW ( 2 * _0x0 + ( 321 ) )
000698 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 321 ) )
                 	__POINTW2FN _0x0,321
000699 940e 0c11 	CALL _lcd_putsf
                 ; 0000 015B 
                 ; 0000 015C     lcd_gotoxy(8,2);
00069b e0e8      	LDI  R30,LOW(8)
00069c 940e 0da8 	CALL SUBOPT_0x2A
                 ; 0000 015D     lcd_putsf("AOC:");
                +
00069e efa6     +LDI R26 , LOW ( 2 * _0x0 + ( 326 ) )
00069f e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 326 ) )
                 	__POINTW2FN _0x0,326
0006a0 940e 0c11 	CALL _lcd_putsf
                 ; 0000 015E 
                 ; 0000 015F     lcd_gotoxy(3,0);
0006a2 e0e3      	LDI  R30,LOW(3)
0006a3 940e 0da0 	CALL SUBOPT_0x28
                 ; 0000 0160     sprintf(disp_set_voltage,"%03d",set_voltage);
0006a5 e7ea      	LDI  R30,LOW(_disp_set_voltage)
0006a6 e0f5      	LDI  R31,HIGH(_disp_set_voltage)
0006a7 940e 0cd0 	CALL SUBOPT_0x12
                 ; 0000 0161     lcd_puts(disp_set_voltage);
0006a9 e7aa      	LDI  R26,LOW(_disp_set_voltage)
0006aa e0b5      	LDI  R27,HIGH(_disp_set_voltage)
0006ab 940e 0c02 	CALL _lcd_puts
                 ; 0000 0162 
                 ; 0000 0163     lcd_gotoxy(12,0);
0006ad e0ec      	LDI  R30,LOW(12)
0006ae 940e 0da0 	CALL SUBOPT_0x28
                 ; 0000 0164     sprintf(disp_set_btcurrent,"%03d",set_current);
0006b0 e7ed      	LDI  R30,LOW(_disp_set_btcurrent)
0006b1 e0f5      	LDI  R31,HIGH(_disp_set_btcurrent)
0006b2 940e 0dac 	CALL SUBOPT_0x2B
0006b4 940e 0ce5 	CALL SUBOPT_0x13
                 ; 0000 0165     lcd_puts(disp_set_btcurrent);
0006b6 e7ad      	LDI  R26,LOW(_disp_set_btcurrent)
0006b7 e0b5      	LDI  R27,HIGH(_disp_set_btcurrent)
                 _0x2120008:
0006b8 940e 0c02 	CALL _lcd_puts
                 ; 0000 0166 
                 ; 0000 0167    // current_mainscreen_flag = 0;
                 ; 0000 0168 
                 ; 0000 0169 
                 ; 0000 016A 
                 ; 0000 016B 
                 ; 0000 016C }
0006ba 9508      	RET
                 ; .FEND
                 ;
                 ;void Screen_sel()
                 ; 0000 016F {
                 _Screen_sel:
                 ; .FSTART _Screen_sel
                 ; 0000 0170 
                 ; 0000 0171     if (Screen == 1)
0006bb e0e1      	LDI  R30,LOW(1)
0006bc e0f0      	LDI  R31,HIGH(1)
0006bd 15e4      	CP   R30,R4
0006be 05f5      	CPC  R31,R5
0006bf f409      	BRNE _0x9B
                 ; 0000 0172     {
                 ; 0000 0173         Screen1();
0006c0 df36      	RCALL _Screen1
                 ; 0000 0174     }
                 ; 0000 0175     if (Screen == 2)
                 _0x9B:
0006c1 e0e2      	LDI  R30,LOW(2)
0006c2 e0f0      	LDI  R31,HIGH(2)
0006c3 15e4      	CP   R30,R4
0006c4 05f5      	CPC  R31,R5
0006c5 f409      	BRNE _0x9C
                 ; 0000 0176     {
                 ; 0000 0177         Screen2();
0006c6 df4d      	RCALL _Screen2
                 ; 0000 0178     }
                 ; 0000 0179     if (Screen == 30)
                 _0x9C:
0006c7 e1ee      	LDI  R30,LOW(30)
0006c8 e0f0      	LDI  R31,HIGH(30)
0006c9 15e4      	CP   R30,R4
0006ca 05f5      	CPC  R31,R5
0006cb f409      	BRNE _0x9D
                 ; 0000 017A     {
                 ; 0000 017B         Screen30();
0006cc df5d      	RCALL _Screen30
                 ; 0000 017C     }
                 ; 0000 017D     if (Screen == 300)
                 _0x9D:
0006cd e2ec      	LDI  R30,LOW(300)
0006ce e0f1      	LDI  R31,HIGH(300)
0006cf 15e4      	CP   R30,R4
0006d0 05f5      	CPC  R31,R5
0006d1 f409      	BRNE _0x9E
                 ; 0000 017E     {
                 ; 0000 017F         Screen300();
0006d2 df77      	RCALL _Screen300
                 ; 0000 0180     }
                 ; 0000 0181     if (Screen == 301)
                 _0x9E:
0006d3 e2ed      	LDI  R30,LOW(301)
0006d4 e0f1      	LDI  R31,HIGH(301)
0006d5 15e4      	CP   R30,R4
0006d6 05f5      	CPC  R31,R5
0006d7 f409      	BRNE _0x9F
                 ; 0000 0182     {
                 ; 0000 0183         Screen301();
0006d8 df8a      	RCALL _Screen301
                 ; 0000 0184     }
                 ; 0000 0185 
                 ; 0000 0186 }
                 _0x9F:
0006d9 9508      	RET
                 ; .FEND
                 ;
                 ;void machine_state()
                 ; 0000 0189 {
                 _machine_state:
                 ; .FSTART _machine_state
                 ; 0000 018A      if(fault_flag == 1)
0006da 940e 0db1 	CALL SUBOPT_0x2C
0006dc f439      	BRNE _0xA0
                 ; 0000 018B      {
                 ; 0000 018C         mainOff();
0006dd dacc      	RCALL _mainOff
                 ; 0000 018D         on_pressed = 0;
0006de e0e0      	LDI  R30,LOW(0)
0006df 93e0 060f 	STS  _on_pressed,R30
0006e1 93e0 0610 	STS  _on_pressed+1,R30
                 ; 0000 018E      }
                 ; 0000 018F      else
0006e3 c01e      	RJMP _0xA1
                 _0xA0:
                 ; 0000 0190      {
                 ; 0000 0191         PORTF |= 0x40;
0006e4 91e0 0062 	LDS  R30,98
0006e6 64e0      	ORI  R30,0x40
0006e7 93e0 0062 	STS  98,R30
                 ; 0000 0192 
                 ; 0000 0193         if(on_pressed == 1)
0006e9 91a0 060f 	LDS  R26,_on_pressed
0006eb 91b0 0610 	LDS  R27,_on_pressed+1
0006ed 9711      	SBIW R26,1
0006ee f439      	BRNE _0xA2
                 ; 0000 0194         {
                 ; 0000 0195             mainOn();
0006ef dab7      	RCALL _mainOn
                 ; 0000 0196             on_pressed = 0;
0006f0 e0e0      	LDI  R30,LOW(0)
0006f1 93e0 060f 	STS  _on_pressed,R30
0006f3 93e0 0610 	STS  _on_pressed+1,R30
                 ; 0000 0197             //status = 1;
                 ; 0000 0198         }
                 ; 0000 0199         else if(off_pressed == 1)
0006f5 c00c      	RJMP _0xA3
                 _0xA2:
0006f6 91a0 0611 	LDS  R26,_off_pressed
0006f8 91b0 0612 	LDS  R27,_off_pressed+1
0006fa 9711      	SBIW R26,1
0006fb f431      	BRNE _0xA4
                 ; 0000 019A         {
                 ; 0000 019B             mainOff();
0006fc daad      	RCALL _mainOff
                 ; 0000 019C             off_pressed = 0;
0006fd e0e0      	LDI  R30,LOW(0)
0006fe 93e0 0611 	STS  _off_pressed,R30
000700 93e0 0612 	STS  _off_pressed+1,R30
                 ; 0000 019D             //status = 0;
                 ; 0000 019E         }
                 ; 0000 019F      }
                 _0xA4:
                 _0xA3:
                 _0xA1:
                 ; 0000 01A0 
                 ; 0000 01A1 //    if(data_received == 1)
                 ; 0000 01A2 //    {
                 ; 0000 01A3 //        recOp();
                 ; 0000 01A4 //        data_received = 0;
                 ; 0000 01A5 //        ms_update_flag = 1;
                 ; 0000 01A6 //        //current_mainscreen_flag = 0;
                 ; 0000 01A7 //    }
                 ; 0000 01A8     if(reset_pressed == 1)
000702 91a0 0613 	LDS  R26,_reset_pressed
000704 91b0 0614 	LDS  R27,_reset_pressed+1
000706 9711      	SBIW R26,1
000707 f431      	BRNE _0xA5
                 ; 0000 01A9     {
                 ; 0000 01AA         resetFault();
000708 daa4      	RCALL _resetFault
                 ; 0000 01AB         reset_pressed = 0;
000709 e0e0      	LDI  R30,LOW(0)
00070a 93e0 0613 	STS  _reset_pressed,R30
00070c 93e0 0614 	STS  _reset_pressed+1,R30
                 ; 0000 01AC     }
                 ; 0000 01AD 
                 ; 0000 01AE 
                 ; 0000 01AF }
                 _0xA5:
00070e 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 01B2 {
                 _main:
                 ; .FSTART _main
                 ; 0000 01B3 PORTA=0x00;
00070f e0e0      	LDI  R30,LOW(0)
000710 bbeb      	OUT  0x1B,R30
                 ; 0000 01B4 DDRA=0x00;
000711 bbea      	OUT  0x1A,R30
                 ; 0000 01B5 
                 ; 0000 01B6 PORTB=0x08;
000712 e0e8      	LDI  R30,LOW(8)
000713 bbe8      	OUT  0x18,R30
                 ; 0000 01B7 DDRB=0x00;
000714 e0e0      	LDI  R30,LOW(0)
000715 bbe7      	OUT  0x17,R30
                 ; 0000 01B8 
                 ; 0000 01B9 PORTC=0x08;
000716 e0e8      	LDI  R30,LOW(8)
000717 bbe5      	OUT  0x15,R30
                 ; 0000 01BA DDRC=0x08;
000718 bbe4      	OUT  0x14,R30
                 ; 0000 01BB 
                 ; 0000 01BC PORTD=0xDC;
000719 edec      	LDI  R30,LOW(220)
00071a bbe2      	OUT  0x12,R30
                 ; 0000 01BD DDRD=0x08;
00071b e0e8      	LDI  R30,LOW(8)
00071c bbe1      	OUT  0x11,R30
                 ; 0000 01BE 
                 ; 0000 01BF PORTE=0xFF;
00071d efef      	LDI  R30,LOW(255)
00071e b9e3      	OUT  0x3,R30
                 ; 0000 01C0 DDRE=0x00;
00071f e0e0      	LDI  R30,LOW(0)
000720 b9e2      	OUT  0x2,R30
                 ; 0000 01C1 
                 ; 0000 01C2 PORTF=0xFF;
000721 efef      	LDI  R30,LOW(255)
000722 93e0 0062 	STS  98,R30
                 ; 0000 01C3 DDRF=0xFF;
000724 93e0 0061 	STS  97,R30
                 ; 0000 01C4 
                 ; 0000 01C5 PORTG=0x00;
000726 e0e0      	LDI  R30,LOW(0)
000727 93e0 0065 	STS  101,R30
                 ; 0000 01C6 DDRG=0x00;
000729 93e0 0064 	STS  100,R30
                 ; 0000 01C7 
                 ; 0000 01C8 TCCR3A=0x00;
00072b 93e0 008b 	STS  139,R30
                 ; 0000 01C9 TCCR3B=0x09;
00072d e0e9      	LDI  R30,LOW(9)
00072e 93e0 008a 	STS  138,R30
                 ; 0000 01CA TCNT3H=0x00;
000730 e0e0      	LDI  R30,LOW(0)
000731 93e0 0089 	STS  137,R30
                 ; 0000 01CB TCNT3L=0x00;
000733 93e0 0088 	STS  136,R30
                 ; 0000 01CC ICR3H=0x00;
000735 93e0 0081 	STS  129,R30
                 ; 0000 01CD ICR3L=0x00;
000737 93e0 0080 	STS  128,R30
                 ; 0000 01CE OCR3AH=0xFF;
000739 efef      	LDI  R30,LOW(255)
00073a 93e0 0087 	STS  135,R30
                 ; 0000 01CF OCR3AL=0xFF;
00073c 93e0 0086 	STS  134,R30
                 ; 0000 01D0 OCR3BH=0x00;
00073e e0e0      	LDI  R30,LOW(0)
00073f 93e0 0085 	STS  133,R30
                 ; 0000 01D1 OCR3BL=0x00;
000741 93e0 0084 	STS  132,R30
                 ; 0000 01D2 OCR3CH=0x00;
000743 93e0 0083 	STS  131,R30
                 ; 0000 01D3 OCR3CL=0x00;
000745 93e0 0082 	STS  130,R30
                 ; 0000 01D4 
                 ; 0000 01D5 // External Interrupt(s) initialization
                 ; 0000 01D6 //EICRA=0x00;
                 ; 0000 01D7 //EICRB=0xAA;
                 ; 0000 01D8 //EIMSK=0xF0;
                 ; 0000 01D9 //EIFR=0xF0;
                 ; 0000 01DA 
                 ; 0000 01DB // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01DC TIMSK=0x00;
000747 bfe7      	OUT  0x37,R30
                 ; 0000 01DD ETIMSK=0x04;
000748 e0e4      	LDI  R30,LOW(4)
000749 93e0 007d 	STS  125,R30
                 ; 0000 01DE 
                 ; 0000 01DF 
                 ; 0000 01E0 // USART0 initialization
                 ; 0000 01E1 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01E2 // USART0 Receiver: On
                 ; 0000 01E3 // USART0 Transmitter: On
                 ; 0000 01E4 // USART0 Mode: Asynchronous
                 ; 0000 01E5 // USART0 Baud Rate: 9600
                 ; 0000 01E6 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
00074b e0e0      	LDI  R30,LOW(0)
00074c b9eb      	OUT  0xB,R30
                 ; 0000 01E7 UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00074d ede8      	LDI  R30,LOW(216)
00074e b9ea      	OUT  0xA,R30
                 ; 0000 01E8 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
00074f e0e6      	LDI  R30,LOW(6)
000750 93e0 0095 	STS  149,R30
                 ; 0000 01E9 UBRR0H=0x00;
000752 e0e0      	LDI  R30,LOW(0)
000753 93e0 0090 	STS  144,R30
                 ; 0000 01EA UBRR0L=0x33;
000755 e3e3      	LDI  R30,LOW(51)
000756 b9e9      	OUT  0x9,R30
                 ; 0000 01EB 
                 ; 0000 01EC 
                 ; 0000 01ED 
                 ; 0000 01EE lcd_init(16);
000757 e1a0      	LDI  R26,LOW(16)
000758 940e 0c24 	CALL _lcd_init
                 ; 0000 01EF 
                 ; 0000 01F0 // Global enable interrupts
                 ; 0000 01F1 #asm("sei")
00075a 9478      	sei
                 ; 0000 01F2 
                 ; 0000 01F3 
                 ; 0000 01F4     while(1)
                 _0xA6:
                 ; 0000 01F5         {
                 ; 0000 01F6             if(fault_flag == 1)
00075b 940e 0db1 	CALL SUBOPT_0x2C
00075d f491      	BRNE _0xA9
                 ; 0000 01F7             {
                 ; 0000 01F8                 lcd_clear();
00075e 940e 0cfa 	CALL SUBOPT_0x15
                 ; 0000 01F9                 lcd_gotoxy(0,0);
                 ; 0000 01FA                 lcd_puts("Fault ID:");
                +
000760 e3a1     +LDI R26 , LOW ( _0xAA + ( 0 ) )
000761 e0b5     +LDI R27 , HIGH ( _0xAA + ( 0 ) )
                 	__POINTW2MN _0xAA,0
000762 940e 0d66 	CALL SUBOPT_0x20
                 ; 0000 01FB                 lcd_gotoxy(4,2);
000764 e0a2      	LDI  R26,LOW(2)
000765 940e 0bc3 	CALL _lcd_gotoxy
                 ; 0000 01FC 
                 ; 0000 01FD 
                 ; 0000 01FE                 lcd_puts(fltArray);
000767 e6ab      	LDI  R26,LOW(_fltArray)
000768 e0b5      	LDI  R27,HIGH(_fltArray)
000769 940e 0c02 	CALL _lcd_puts
                 ; 0000 01FF 
                 ; 0000 0200                 while(fault_flag == 1)machine_state();
                 _0xAB:
00076b 940e 0db1 	CALL SUBOPT_0x2C
00076d f411      	BRNE _0xAD
00076e df6b      	RCALL _machine_state
00076f cffb      	RJMP _0xAB
                 _0xAD:
                 ; 0000 0201 }
                 ; 0000 0202 
                 ; 0000 0203             if (Screen == 1)        //runs only at start
                 _0xA9:
000770 e0e1      	LDI  R30,LOW(1)
000771 e0f0      	LDI  R31,HIGH(1)
000772 15e4      	CP   R30,R4
000773 05f5      	CPC  R31,R5
000774 f409      	BRNE _0xAE
                 ; 0000 0204             {Screen1();}
000775 de81      	RCALL _Screen1
                 ; 0000 0205 
                 ; 0000 0206 
                 ; 0000 0207 
                 ; 0000 0208             if (main_screen_trigger == 1) //| ms_update_flag == 1)
                 _0xAE:
000776 91a0 0561 	LDS  R26,_main_screen_trigger
000778 91b0 0562 	LDS  R27,_main_screen_trigger+1
00077a 9711      	SBIW R26,1
00077b f009      	BREQ PC+2
00077c c08e      	RJMP _0xAF
                 ; 0000 0209             {
                 ; 0000 020A                 if(current_mainscreen_flag == 1)
00077d 91a0 0565 	LDS  R26,_current_mainscreen_flag
00077f 91b0 0566 	LDS  R27,_current_mainscreen_flag+1
000781 9711      	SBIW R26,1
000782 f409      	BRNE _0xB0
                 ; 0000 020B                 {Main_Screen();}      //Function to display all values
000783 def9      	RCALL _Main_Screen
                 ; 0000 020C 
                 ; 0000 020D                 lcd_gotoxy(3,1);
                 _0xB0:
000784 e0e3      	LDI  R30,LOW(3)
000785 940e 0da4 	CALL SUBOPT_0x29
                 ; 0000 020E                 sprintf(disp_actual_voltage,"%03d",actual_voltage);
000787 e8e1      	LDI  R30,LOW(_disp_actual_voltage)
000788 e0f5      	LDI  R31,HIGH(_disp_actual_voltage)
000789 940e 0dac 	CALL SUBOPT_0x2B
00078b 93fa      	ST   -Y,R31
00078c 93ea      	ST   -Y,R30
00078d 91e0 0553 	LDS  R30,_actual_voltage_G000
00078f 91f0 0554 	LDS  R31,_actual_voltage_G000+1
000791 940e 0c63 	CALL SUBOPT_0x2
                 ; 0000 020F                 lcd_puts("000");
                +
000793 e3ab     +LDI R26 , LOW ( _0xAA + ( 10 ) )
000794 e0b5     +LDI R27 , HIGH ( _0xAA + ( 10 ) )
                 	__POINTW2MN _0xAA,10
000795 940e 0d99 	CALL SUBOPT_0x27
                 ; 0000 0210                 lcd_gotoxy(3,1);
                 ; 0000 0211                 lcd_puts(disp_actual_voltage);
000797 e8a1      	LDI  R26,LOW(_disp_actual_voltage)
000798 e0b5      	LDI  R27,HIGH(_disp_actual_voltage)
000799 940e 0c02 	CALL _lcd_puts
                 ; 0000 0212 
                 ; 0000 0213                 lcd_gotoxy(12,1);
00079b e0ec      	LDI  R30,LOW(12)
00079c 940e 0da4 	CALL SUBOPT_0x29
                 ; 0000 0214                 sprintf(disp_actual_btcurrent,"%03d",actual_btcurrent);
00079e e8e4      	LDI  R30,LOW(_disp_actual_btcurrent)
00079f e0f5      	LDI  R31,HIGH(_disp_actual_btcurrent)
0007a0 940e 0dac 	CALL SUBOPT_0x2B
0007a2 93fa      	ST   -Y,R31
0007a3 93ea      	ST   -Y,R30
0007a4 91e0 0555 	LDS  R30,_actual_btcurrent_G000
0007a6 91f0 0556 	LDS  R31,_actual_btcurrent_G000+1
0007a8 940e 0c63 	CALL SUBOPT_0x2
                 ; 0000 0215                 lcd_puts("000");
                +
0007aa e3af     +LDI R26 , LOW ( _0xAA + ( 14 ) )
0007ab e0b5     +LDI R27 , HIGH ( _0xAA + ( 14 ) )
                 	__POINTW2MN _0xAA,14
0007ac 940e 0c02 	CALL _lcd_puts
                 ; 0000 0216                 lcd_gotoxy(12,1);
0007ae e0ec      	LDI  R30,LOW(12)
0007af 940e 0da4 	CALL SUBOPT_0x29
                 ; 0000 0217                 lcd_puts(disp_actual_btcurrent);
0007b1 e8a4      	LDI  R26,LOW(_disp_actual_btcurrent)
0007b2 e0b5      	LDI  R27,HIGH(_disp_actual_btcurrent)
0007b3 940e 0d66 	CALL SUBOPT_0x20
                 ; 0000 0218 
                 ; 0000 0219                 lcd_gotoxy(4,2);
0007b5 e0a2      	LDI  R26,LOW(2)
0007b6 940e 0bc3 	CALL _lcd_gotoxy
                 ; 0000 021A                 sprintf(disp_actual_ipvoltage,"%03d",actual_ipvoltage);
0007b8 e8e8      	LDI  R30,LOW(_disp_actual_ipvoltage)
0007b9 e0f5      	LDI  R31,HIGH(_disp_actual_ipvoltage)
0007ba 940e 0dac 	CALL SUBOPT_0x2B
0007bc 93fa      	ST   -Y,R31
0007bd 93ea      	ST   -Y,R30
0007be 91e0 0557 	LDS  R30,_actual_ipvoltage_G000
0007c0 91f0 0558 	LDS  R31,_actual_ipvoltage_G000+1
0007c2 940e 0c63 	CALL SUBOPT_0x2
                 ; 0000 021B                 lcd_puts("000");
                +
0007c4 e4a3     +LDI R26 , LOW ( _0xAA + ( 18 ) )
0007c5 e0b5     +LDI R27 , HIGH ( _0xAA + ( 18 ) )
                 	__POINTW2MN _0xAA,18
0007c6 940e 0d66 	CALL SUBOPT_0x20
                 ; 0000 021C                 lcd_gotoxy(4,2);
0007c8 e0a2      	LDI  R26,LOW(2)
0007c9 940e 0bc3 	CALL _lcd_gotoxy
                 ; 0000 021D                 lcd_puts(disp_actual_ipvoltage);
0007cb e8a8      	LDI  R26,LOW(_disp_actual_ipvoltage)
0007cc e0b5      	LDI  R27,HIGH(_disp_actual_ipvoltage)
0007cd 940e 0c02 	CALL _lcd_puts
                 ; 0000 021E 
                 ; 0000 021F                 lcd_gotoxy(12,2);
0007cf e0ec      	LDI  R30,LOW(12)
0007d0 940e 0da8 	CALL SUBOPT_0x2A
                 ; 0000 0220                 sprintf(disp_actual_opcurrent,"%03d",actual_opcurrent);
0007d2 e8eb      	LDI  R30,LOW(_disp_actual_opcurrent)
0007d3 e0f5      	LDI  R31,HIGH(_disp_actual_opcurrent)
0007d4 940e 0dac 	CALL SUBOPT_0x2B
0007d6 93fa      	ST   -Y,R31
0007d7 93ea      	ST   -Y,R30
0007d8 91e0 0559 	LDS  R30,_actual_opcurrent_G000
0007da 91f0 055a 	LDS  R31,_actual_opcurrent_G000+1
0007dc 940e 0c63 	CALL SUBOPT_0x2
                 ; 0000 0221                 lcd_puts("000");
                +
0007de e4a7     +LDI R26 , LOW ( _0xAA + ( 22 ) )
0007df e0b5     +LDI R27 , HIGH ( _0xAA + ( 22 ) )
                 	__POINTW2MN _0xAA,22
0007e0 940e 0c02 	CALL _lcd_puts
                 ; 0000 0222                 lcd_gotoxy(12,2);
0007e2 e0ec      	LDI  R30,LOW(12)
0007e3 940e 0da8 	CALL SUBOPT_0x2A
                 ; 0000 0223                 lcd_puts(disp_actual_opcurrent);
0007e5 e8ab      	LDI  R26,LOW(_disp_actual_opcurrent)
0007e6 e0b5      	LDI  R27,HIGH(_disp_actual_opcurrent)
0007e7 940e 0c02 	CALL _lcd_puts
                 ; 0000 0224                 if (status == 1)
0007e9 91a0 0567 	LDS  R26,_status
0007eb 91b0 0568 	LDS  R27,_status+1
0007ed 9711      	SBIW R26,1
0007ee f431      	BRNE _0xB1
                 ; 0000 0225                 {
                 ; 0000 0226                 lcd_gotoxy(1,3);
0007ef e0e1      	LDI  R30,LOW(1)
0007f0 940e 0ccc 	CALL SUBOPT_0x11
                 ; 0000 0227                 lcd_putsf("Machine : ON ");
                +
0007f2 e0a9     +LDI R26 , LOW ( 2 * _0x0 + ( 345 ) )
0007f3 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 345 ) )
                 	__POINTW2FN _0x0,345
0007f4 c00b      	RJMP _0xC3
                 ; 0000 0228                 }
                 ; 0000 0229                 else if (status == 0)
                 _0xB1:
0007f5 91e0 0567 	LDS  R30,_status
0007f7 91f0 0568 	LDS  R31,_status+1
0007f9 9730      	SBIW R30,0
0007fa f439      	BRNE _0xB3
                 ; 0000 022A                 {
                 ; 0000 022B                     lcd_gotoxy(1,3);
0007fb e0e1      	LDI  R30,LOW(1)
0007fc 940e 0ccc 	CALL SUBOPT_0x11
                 ; 0000 022C                     lcd_putsf("Machine : OFF");
                +
0007fe e1a7     +LDI R26 , LOW ( 2 * _0x0 + ( 359 ) )
0007ff e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 359 ) )
                 	__POINTW2FN _0x0,359
                 _0xC3:
000800 940e 0c11 	CALL _lcd_putsf
                 ; 0000 022D                 }
                 ; 0000 022E                 ms_update_flag = 0;
                 _0xB3:
000802 e0e0      	LDI  R30,LOW(0)
000803 93e0 0563 	STS  _ms_update_flag,R30
000805 93e0 0564 	STS  _ms_update_flag+1,R30
                 ; 0000 022F                 //main_screen_trigger = 0;
                 ; 0000 0230                 current_mainscreen_flag = 0;
000807 93e0 0565 	STS  _current_mainscreen_flag,R30
000809 93e0 0566 	STS  _current_mainscreen_flag+1,R30
                 ; 0000 0231             }
                 ; 0000 0232 
                 ; 0000 0233             machine_state();    //Check for ON,OFF,reset  button press
                 _0xAF:
00080b dece      	RCALL _machine_state
                 ; 0000 0234 
                 ; 0000 0235             if (PIND.2 == 0)    //When 4 pressed
00080c 9982      	SBIC 0x10,2
00080d c021      	RJMP _0xB4
                 ; 0000 0236             {
                 ; 0000 0237                 main_screen_trigger = 0;
00080e e0e0      	LDI  R30,LOW(0)
00080f 93e0 0561 	STS  _main_screen_trigger,R30
000811 93e0 0562 	STS  _main_screen_trigger+1,R30
                 ; 0000 0238                 while(set_flag != 1)
                 _0xB5:
000813 91a0 055b 	LDS  R26,_set_flag
000815 91b0 055c 	LDS  R27,_set_flag+1
000817 9711      	SBIW R26,1
000818 f061      	BREQ _0xB7
                 ; 0000 0239                 {
                 ; 0000 023A                 while(Screen != Current_Screen)
                 _0xB8:
                +
000819 1464     +CP R6 , R4
00081a 0475     +CPC R7 , R5
                 	__CPWRR 6,7,4,5
00081b f011      	BREQ _0xBA
                 ; 0000 023B                 {
                 ; 0000 023C                     Screen_sel();       //Screen selection
00081c de9e      	RCALL _Screen_sel
                 ; 0000 023D                 }
00081d cffb      	RJMP _0xB8
                 _0xBA:
                 ; 0000 023E                 input(n);
00081e 91a0 055f 	LDS  R26,_n
000820 91b0 0560 	LDS  R27,_n+1
000822 dc55      	RCALL _input
                 ; 0000 023F                 machine_state();
000823 deb6      	RCALL _machine_state
                 ; 0000 0240                 }
000824 cfee      	RJMP _0xB5
                 _0xB7:
                 ; 0000 0241                 set_flag = 0;
000825 e0e0      	LDI  R30,LOW(0)
000826 93e0 055b 	STS  _set_flag,R30
000828 93e0 055c 	STS  _set_flag+1,R30
                 ; 0000 0242                 Screen = 2;
00082a e0e2      	LDI  R30,LOW(2)
00082b e0f0      	LDI  R31,HIGH(2)
00082c 012f      	MOVW R4,R30
                 ; 0000 0243                 lcd_clear();
00082d 940e 0bd4 	CALL _lcd_clear
                 ; 0000 0244             }
                 ; 0000 0245 
                 ; 0000 0246 
                 ; 0000 0247         }
                 _0xB4:
00082f cf2b      	RJMP _0xA6
                 ; 0000 0248 
                 ; 0000 0249 }
                 _0xBB:
000830 cfff      	RJMP _0xBB
                 ; .FEND
                 
                 	.DSEG
                 _0xAA:
000531           	.BYTE 0x1A
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000831 93ba      	ST   -Y,R27
000832 93aa      	ST   -Y,R26
000833 931a      	ST   -Y,R17
000834 930a      	ST   -Y,R16
000835 81aa      	LDD  R26,Y+2
000836 81bb      	LDD  R27,Y+2+1
000837 9612      	ADIW R26,2
000838 940e 10ab 	CALL __GETW1P
00083a 9730      	SBIW R30,0
00083b f129      	BREQ _0x2000010
00083c 81aa      	LDD  R26,Y+2
00083d 81bb      	LDD  R27,Y+2+1
00083e 9614      	ADIW R26,4
00083f 940e 10ab 	CALL __GETW1P
000841 018f      	MOVW R16,R30
000842 9730      	SBIW R30,0
000843 f061      	BREQ _0x2000012
                +
000844 3002     +CPI R16 , LOW ( 2 )
000845 e0e0     +LDI R30 , HIGH ( 2 )
000846 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000847 f080      	BRLO _0x2000013
000848 01f8      	MOVW R30,R16
000849 9731      	SBIW R30,1
00084a 018f      	MOVW R16,R30
                +
00084b 81aa     +LDD R26 , Y + 2
00084c 81bb     +LDD R27 , Y + 2 + 1
00084d 9614     +ADIW R26 , 4
00084e 93ed     +ST X + , R30
00084f 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000850 81aa      	LDD  R26,Y+2
000851 81bb      	LDD  R27,Y+2+1
000852 9612      	ADIW R26,2
000853 940e 0ca2 	CALL SUBOPT_0xA
000855 9731      	SBIW R30,1
000856 81ac      	LDD  R26,Y+4
000857 83a0      	STD  Z+0,R26
                 _0x2000013:
000858 81aa      	LDD  R26,Y+2
000859 81bb      	LDD  R27,Y+2+1
00085a 940e 10ab 	CALL __GETW1P
00085c 23ff      	TST  R31
00085d f012      	BRMI _0x2000014
00085e 940e 0ca2 	CALL SUBOPT_0xA
                 _0x2000014:
000860 c006      	RJMP _0x2000015
                 _0x2000010:
000861 81aa      	LDD  R26,Y+2
000862 81bb      	LDD  R27,Y+2+1
000863 efef      	LDI  R30,LOW(65535)
000864 efff      	LDI  R31,HIGH(65535)
000865 93ed      	ST   X+,R30
000866 93fc      	ST   X,R31
                 _0x2000015:
000867 8119      	LDD  R17,Y+1
000868 8108      	LDD  R16,Y+0
000869 9625      	ADIW R28,5
00086a 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00086b 93ba      	ST   -Y,R27
00086c 93aa      	ST   -Y,R26
00086d 9726      	SBIW R28,6
00086e 940e 10ed 	CALL __SAVELOCR6
000870 e010      	LDI  R17,0
000871 85ac      	LDD  R26,Y+12
000872 85bd      	LDD  R27,Y+12+1
000873 e0e0      	LDI  R30,LOW(0)
000874 e0f0      	LDI  R31,HIGH(0)
000875 93ed      	ST   X+,R30
000876 93fc      	ST   X,R31
                 _0x2000016:
000877 89ea      	LDD  R30,Y+18
000878 89fb      	LDD  R31,Y+18+1
000879 9631      	ADIW R30,1
00087a 8bea      	STD  Y+18,R30
00087b 8bfb      	STD  Y+18+1,R31
00087c 9731      	SBIW R30,1
00087d 91e4      	LPM  R30,Z
00087e 2f2e      	MOV  R18,R30
00087f 30e0      	CPI  R30,0
000880 f409      	BRNE PC+2
000881 c115      	RJMP _0x2000018
000882 2fe1      	MOV  R30,R17
000883 30e0      	CPI  R30,0
000884 f439      	BRNE _0x200001C
000885 3225      	CPI  R18,37
000886 f411      	BRNE _0x200001D
000887 e011      	LDI  R17,LOW(1)
000888 c002      	RJMP _0x200001E
                 _0x200001D:
000889 940e 0db7 	CALL SUBOPT_0x2D
                 _0x200001E:
00088b c10a      	RJMP _0x200001B
                 _0x200001C:
00088c 30e1      	CPI  R30,LOW(0x1)
00088d f4a9      	BRNE _0x200001F
00088e 3225      	CPI  R18,37
00088f f419      	BRNE _0x2000020
000890 940e 0db7 	CALL SUBOPT_0x2D
000892 c102      	RJMP _0x20000CC
                 _0x2000020:
000893 e012      	LDI  R17,LOW(2)
000894 e040      	LDI  R20,LOW(0)
000895 e000      	LDI  R16,LOW(0)
000896 322d      	CPI  R18,45
000897 f411      	BRNE _0x2000021
000898 e001      	LDI  R16,LOW(1)
000899 c0fc      	RJMP _0x200001B
                 _0x2000021:
00089a 322b      	CPI  R18,43
00089b f411      	BRNE _0x2000022
00089c e24b      	LDI  R20,LOW(43)
00089d c0f8      	RJMP _0x200001B
                 _0x2000022:
00089e 3220      	CPI  R18,32
00089f f411      	BRNE _0x2000023
0008a0 e240      	LDI  R20,LOW(32)
0008a1 c0f4      	RJMP _0x200001B
                 _0x2000023:
0008a2 c002      	RJMP _0x2000024
                 _0x200001F:
0008a3 30e2      	CPI  R30,LOW(0x2)
0008a4 f439      	BRNE _0x2000025
                 _0x2000024:
0008a5 e050      	LDI  R21,LOW(0)
0008a6 e013      	LDI  R17,LOW(3)
0008a7 3320      	CPI  R18,48
0008a8 f411      	BRNE _0x2000026
0008a9 6800      	ORI  R16,LOW(128)
0008aa c0eb      	RJMP _0x200001B
                 _0x2000026:
0008ab c003      	RJMP _0x2000027
                 _0x2000025:
0008ac 30e3      	CPI  R30,LOW(0x3)
0008ad f009      	BREQ PC+2
0008ae c0e7      	RJMP _0x200001B
                 _0x2000027:
0008af 3320      	CPI  R18,48
0008b0 f010      	BRLO _0x200002A
0008b1 332a      	CPI  R18,58
0008b2 f008      	BRLO _0x200002B
                 _0x200002A:
0008b3 c007      	RJMP _0x2000029
                 _0x200002B:
0008b4 e0aa      	LDI  R26,LOW(10)
0008b5 9f5a      	MUL  R21,R26
0008b6 2d50      	MOV  R21,R0
0008b7 2fe2      	MOV  R30,R18
0008b8 53e0      	SUBI R30,LOW(48)
0008b9 0f5e      	ADD  R21,R30
0008ba c0db      	RJMP _0x200001B
                 _0x2000029:
0008bb 2fe2      	MOV  R30,R18
0008bc 36e3      	CPI  R30,LOW(0x63)
0008bd f449      	BRNE _0x200002F
0008be 940e 0dbe 	CALL SUBOPT_0x2E
0008c0 89e8      	LDD  R30,Y+16
0008c1 89f9      	LDD  R31,Y+16+1
0008c2 81a4      	LDD  R26,Z+4
0008c3 93aa      	ST   -Y,R26
0008c4 940e 0dc4 	CALL SUBOPT_0x2F
0008c6 c0ce      	RJMP _0x2000030
                 _0x200002F:
0008c7 37e3      	CPI  R30,LOW(0x73)
0008c8 f441      	BRNE _0x2000032
0008c9 940e 0dbe 	CALL SUBOPT_0x2E
0008cb 940e 0dca 	CALL SUBOPT_0x30
0008cd 940e 0b89 	CALL _strlen
0008cf 2f1e      	MOV  R17,R30
0008d0 c00a      	RJMP _0x2000033
                 _0x2000032:
0008d1 37e0      	CPI  R30,LOW(0x70)
0008d2 f461      	BRNE _0x2000035
0008d3 940e 0dbe 	CALL SUBOPT_0x2E
0008d5 940e 0dca 	CALL SUBOPT_0x30
0008d7 940e 0b95 	CALL _strlenf
0008d9 2f1e      	MOV  R17,R30
0008da 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0008db 6002      	ORI  R16,LOW(2)
0008dc 770f      	ANDI R16,LOW(127)
0008dd e030      	LDI  R19,LOW(0)
0008de c034      	RJMP _0x2000036
                 _0x2000035:
0008df 36e4      	CPI  R30,LOW(0x64)
0008e0 f011      	BREQ _0x2000039
0008e1 36e9      	CPI  R30,LOW(0x69)
0008e2 f411      	BRNE _0x200003A
                 _0x2000039:
0008e3 6004      	ORI  R16,LOW(4)
0008e4 c002      	RJMP _0x200003B
                 _0x200003A:
0008e5 37e5      	CPI  R30,LOW(0x75)
0008e6 f431      	BRNE _0x200003C
                 _0x200003B:
0008e7 e8ec      	LDI  R30,LOW(_tbl10_G100*2)
0008e8 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0008e9 83ee      	STD  Y+6,R30
0008ea 83ff      	STD  Y+6+1,R31
0008eb e015      	LDI  R17,LOW(5)
0008ec c00c      	RJMP _0x200003D
                 _0x200003C:
0008ed 35e8      	CPI  R30,LOW(0x58)
0008ee f411      	BRNE _0x200003F
0008ef 6008      	ORI  R16,LOW(8)
0008f0 c003      	RJMP _0x2000040
                 _0x200003F:
0008f1 37e8      	CPI  R30,LOW(0x78)
0008f2 f009      	BREQ PC+2
0008f3 c0a1      	RJMP _0x2000071
                 _0x2000040:
0008f4 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
0008f5 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0008f6 83ee      	STD  Y+6,R30
0008f7 83ff      	STD  Y+6+1,R31
0008f8 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0008f9 ff02      	SBRS R16,2
0008fa c014      	RJMP _0x2000042
0008fb 940e 0dbe 	CALL SUBOPT_0x2E
0008fd 940e 0dd4 	CALL SUBOPT_0x31
0008ff 85ab      	LDD  R26,Y+11
000900 23aa      	TST  R26
000901 f43a      	BRPL _0x2000043
000902 85ea      	LDD  R30,Y+10
000903 85fb      	LDD  R31,Y+10+1
000904 940e 1016 	CALL __ANEGW1
000906 87ea      	STD  Y+10,R30
000907 87fb      	STD  Y+10+1,R31
000908 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000909 3040      	CPI  R20,0
00090a f011      	BREQ _0x2000044
00090b 5f1f      	SUBI R17,-LOW(1)
00090c c001      	RJMP _0x2000045
                 _0x2000044:
00090d 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
00090e c004      	RJMP _0x2000046
                 _0x2000042:
00090f 940e 0dbe 	CALL SUBOPT_0x2E
000911 940e 0dd4 	CALL SUBOPT_0x31
                 _0x2000046:
                 _0x2000036:
000913 fd00      	SBRC R16,0
000914 c011      	RJMP _0x2000047
                 _0x2000048:
000915 1715      	CP   R17,R21
000916 f478      	BRSH _0x200004A
000917 ff07      	SBRS R16,7
000918 c008      	RJMP _0x200004B
000919 ff02      	SBRS R16,2
00091a c004      	RJMP _0x200004C
00091b 7f0b      	ANDI R16,LOW(251)
00091c 2f24      	MOV  R18,R20
00091d 5011      	SUBI R17,LOW(1)
00091e c001      	RJMP _0x200004D
                 _0x200004C:
00091f e320      	LDI  R18,LOW(48)
                 _0x200004D:
000920 c001      	RJMP _0x200004E
                 _0x200004B:
000921 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000922 940e 0db7 	CALL SUBOPT_0x2D
000924 5051      	SUBI R21,LOW(1)
000925 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000926 2f31      	MOV  R19,R17
000927 ff01      	SBRS R16,1
000928 c017      	RJMP _0x200004F
                 _0x2000050:
000929 3030      	CPI  R19,0
00092a f0a1      	BREQ _0x2000052
00092b ff03      	SBRS R16,3
00092c c006      	RJMP _0x2000053
00092d 81ee      	LDD  R30,Y+6
00092e 81ff      	LDD  R31,Y+6+1
00092f 9125      	LPM  R18,Z+
000930 83ee      	STD  Y+6,R30
000931 83ff      	STD  Y+6+1,R31
000932 c005      	RJMP _0x2000054
                 _0x2000053:
000933 81ae      	LDD  R26,Y+6
000934 81bf      	LDD  R27,Y+6+1
000935 912d      	LD   R18,X+
000936 83ae      	STD  Y+6,R26
000937 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000938 940e 0db7 	CALL SUBOPT_0x2D
00093a 3050      	CPI  R21,0
00093b f009      	BREQ _0x2000055
00093c 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00093d 5031      	SUBI R19,LOW(1)
00093e cfea      	RJMP _0x2000050
                 _0x2000052:
00093f c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000940 e320      	LDI  R18,LOW(48)
000941 81ee      	LDD  R30,Y+6
000942 81ff      	LDD  R31,Y+6+1
000943 940e 10b4 	CALL __GETW1PF
000945 87e8      	STD  Y+8,R30
000946 87f9      	STD  Y+8+1,R31
000947 81ee      	LDD  R30,Y+6
000948 81ff      	LDD  R31,Y+6+1
000949 9632      	ADIW R30,2
00094a 83ee      	STD  Y+6,R30
00094b 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00094c 85e8      	LDD  R30,Y+8
00094d 85f9      	LDD  R31,Y+8+1
00094e 85aa      	LDD  R26,Y+10
00094f 85bb      	LDD  R27,Y+10+1
000950 17ae      	CP   R26,R30
000951 07bf      	CPC  R27,R31
000952 f050      	BRLO _0x200005C
000953 5f2f      	SUBI R18,-LOW(1)
000954 85a8      	LDD  R26,Y+8
000955 85b9      	LDD  R27,Y+8+1
000956 85ea      	LDD  R30,Y+10
000957 85fb      	LDD  R31,Y+10+1
000958 1bea      	SUB  R30,R26
000959 0bfb      	SBC  R31,R27
00095a 87ea      	STD  Y+10,R30
00095b 87fb      	STD  Y+10+1,R31
00095c cfef      	RJMP _0x200005A
                 _0x200005C:
00095d 332a      	CPI  R18,58
00095e f028      	BRLO _0x200005D
00095f ff03      	SBRS R16,3
000960 c002      	RJMP _0x200005E
000961 5f29      	SUBI R18,-LOW(7)
000962 c001      	RJMP _0x200005F
                 _0x200005E:
000963 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000964 fd04      	SBRC R16,4
000965 c01a      	RJMP _0x2000061
000966 3321      	CPI  R18,49
000967 f420      	BRSH _0x2000063
000968 85a8      	LDD  R26,Y+8
000969 85b9      	LDD  R27,Y+8+1
00096a 9711      	SBIW R26,1
00096b f409      	BRNE _0x2000062
                 _0x2000063:
00096c c009      	RJMP _0x20000CD
                 _0x2000062:
00096d 1753      	CP   R21,R19
00096e f010      	BRLO _0x2000067
00096f ff00      	SBRS R16,0
000970 c001      	RJMP _0x2000068
                 _0x2000067:
000971 c013      	RJMP _0x2000066
                 _0x2000068:
000972 e220      	LDI  R18,LOW(32)
000973 ff07      	SBRS R16,7
000974 c00b      	RJMP _0x2000069
000975 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000976 6100      	ORI  R16,LOW(16)
000977 ff02      	SBRS R16,2
000978 c007      	RJMP _0x200006A
000979 7f0b      	ANDI R16,LOW(251)
00097a 934a      	ST   -Y,R20
00097b 940e 0dc4 	CALL SUBOPT_0x2F
00097d 3050      	CPI  R21,0
00097e f009      	BREQ _0x200006B
00097f 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000980 940e 0db7 	CALL SUBOPT_0x2D
000982 3050      	CPI  R21,0
000983 f009      	BREQ _0x200006C
000984 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000985 5031      	SUBI R19,LOW(1)
000986 85a8      	LDD  R26,Y+8
000987 85b9      	LDD  R27,Y+8+1
000988 9712      	SBIW R26,2
000989 f008      	BRLO _0x2000059
00098a cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00098b ff00      	SBRS R16,0
00098c c008      	RJMP _0x200006D
                 _0x200006E:
00098d 3050      	CPI  R21,0
00098e f031      	BREQ _0x2000070
00098f 5051      	SUBI R21,LOW(1)
000990 e2e0      	LDI  R30,LOW(32)
000991 93ea      	ST   -Y,R30
000992 940e 0dc4 	CALL SUBOPT_0x2F
000994 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000995 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000996 cee0      	RJMP _0x2000016
                 _0x2000018:
000997 85ac      	LDD  R26,Y+12
000998 85bd      	LDD  R27,Y+12+1
000999 940e 10ab 	CALL __GETW1P
00099b 940e 10f4 	CALL __LOADLOCR6
00099d 9664      	ADIW R28,20
00099e 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00099f 92ff      	PUSH R15
0009a0 2ef8      	MOV  R15,R24
0009a1 9726      	SBIW R28,6
0009a2 940e 10ef 	CALL __SAVELOCR4
0009a4 940e 0ddc 	CALL SUBOPT_0x32
0009a6 9730      	SBIW R30,0
0009a7 f419      	BRNE _0x2000072
0009a8 efef      	LDI  R30,LOW(65535)
0009a9 efff      	LDI  R31,HIGH(65535)
0009aa c023      	RJMP _0x2120007
                 _0x2000072:
0009ab 01de      	MOVW R26,R28
0009ac 9616      	ADIW R26,6
0009ad 940e 100d 	CALL __ADDW2R15
0009af 018d      	MOVW R16,R26
0009b0 940e 0ddc 	CALL SUBOPT_0x32
0009b2 83ee      	STD  Y+6,R30
0009b3 83ff      	STD  Y+6+1,R31
0009b4 e0e0      	LDI  R30,LOW(0)
0009b5 87e8      	STD  Y+8,R30
0009b6 87e9      	STD  Y+8+1,R30
0009b7 01de      	MOVW R26,R28
0009b8 961a      	ADIW R26,10
0009b9 940e 100d 	CALL __ADDW2R15
0009bb 940e 10ab 	CALL __GETW1P
0009bd 93fa      	ST   -Y,R31
0009be 93ea      	ST   -Y,R30
0009bf 931a      	ST   -Y,R17
0009c0 930a      	ST   -Y,R16
0009c1 e3e1      	LDI  R30,LOW(_put_buff_G100)
0009c2 e0f8      	LDI  R31,HIGH(_put_buff_G100)
0009c3 93fa      	ST   -Y,R31
0009c4 93ea      	ST   -Y,R30
0009c5 01de      	MOVW R26,R28
0009c6 961a      	ADIW R26,10
0009c7 dea3      	RCALL __print_G100
0009c8 019f      	MOVW R18,R30
0009c9 81ae      	LDD  R26,Y+6
0009ca 81bf      	LDD  R27,Y+6+1
0009cb e0e0      	LDI  R30,LOW(0)
0009cc 93ec      	ST   X,R30
0009cd 01f9      	MOVW R30,R18
                 _0x2120007:
0009ce 940e 10f6 	CALL __LOADLOCR4
0009d0 962a      	ADIW R28,10
0009d1 90ff      	POP  R15
0009d2 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0009d3 940e 10cc 	CALL __PUTPARD2
0009d5 817b         ldd  r23,y+3
0009d6 816a         ldd  r22,y+2
0009d7 81f9         ldd  r31,y+1
0009d8 81e8         ld   r30,y
0009d9 fb77         bst  r23,7
0009da 0f77         lsl  r23
0009db fd67         sbrc r22,7
0009dc 6071         sbr  r23,1
0009dd 2f97         mov  r25,r23
0009de 579e         subi r25,0x7e
0009df f081         breq __ftrunc0
0009e0 f078         brcs __ftrunc0
0009e1 3198         cpi  r25,24
0009e2 f490         brsh __ftrunc1
0009e3 27aa         clr  r26
0009e4 27bb         clr  r27
0009e5 2788         clr  r24
                 __ftrunc2:
0009e6 9408         sec
0009e7 9587         ror  r24
0009e8 95b7         ror  r27
0009e9 95a7         ror  r26
0009ea 959a         dec  r25
0009eb f7d1         brne __ftrunc2
0009ec 23ea         and  r30,r26
0009ed 23fb         and  r31,r27
0009ee 2368         and  r22,r24
0009ef c005         rjmp __ftrunc1
                 __ftrunc0:
0009f0 94e8         clt
0009f1 2777         clr  r23
0009f2 27ee         clr  r30
0009f3 27ff         clr  r31
0009f4 2766         clr  r22
                 __ftrunc1:
0009f5 776f         cbr  r22,0x80
0009f6 9576         lsr  r23
0009f7 f408         brcc __ftrunc3
0009f8 6860         sbr  r22,0x80
                 __ftrunc3:
0009f9 f977         bld  r23,7
0009fa 91a9         ld   r26,y+
0009fb 91b9         ld   r27,y+
0009fc 9189         ld   r24,y+
0009fd 9199         ld   r25,y+
0009fe 17ea         cp   r30,r26
0009ff 07fb         cpc  r31,r27
000a00 0768         cpc  r22,r24
000a01 0779         cpc  r23,r25
000a02 fb97         bst  r25,7
000a03 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000a04 940e 10cc 	CALL __PUTPARD2
000a06 940e 10bd 	CALL __GETD2S0
000a08 940e 09d3 	CALL _ftrunc
000a0a 940e 10c2 	CALL __PUTD1S0
000a0c f419          brne __floor1
                 __floor0:
000a0d 940e 0de3 	CALL SUBOPT_0x33
000a0f c005      	RJMP _0x2120006
                 __floor1:
000a10 f7e6          brtc __floor0
000a11 940e 0de3 	CALL SUBOPT_0x33
000a13 940e 0de6 	CALL SUBOPT_0x34
                 _0x2120006:
000a15 9624      	ADIW R28,4
000a16 9508      	RET
                 ; .FEND
                 _log:
                 ; .FSTART _log
000a17 940e 10cc 	CALL __PUTPARD2
000a19 9724      	SBIW R28,4
000a1a 931a      	ST   -Y,R17
000a1b 930a      	ST   -Y,R16
000a1c 940e 0ded 	CALL SUBOPT_0x35
000a1e 940e 10e2 	CALL __CPD02
000a20 f02c      	BRLT _0x204000C
                +
000a21 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
000a22 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
000a23 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
000a24 ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
000a25 c073      	RJMP _0x2120005
                 _0x204000C:
000a26 940e 0df2 	CALL SUBOPT_0x36
000a28 940e 10c7 	CALL __PUTPARD1
000a2a b7ad      	IN   R26,SPL
000a2b b7be      	IN   R27,SPH
000a2c 9711      	SBIW R26,1
000a2d 931f      	PUSH R17
000a2e 930f      	PUSH R16
000a2f 940e 0e47 	CALL _frexp
000a31 910f      	POP  R16
000a32 911f      	POP  R17
000a33 940e 0df7 	CALL SUBOPT_0x37
000a35 940e 0ded 	CALL SUBOPT_0x35
                +
000a37 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
000a38 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
000a39 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000a3a e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000a3b 940e 0fed 	CALL __CMPF12
000a3d f440      	BRSH _0x204000D
000a3e 940e 0dfc 	CALL SUBOPT_0x38
000a40 940e 0f0a 	CALL __ADDF12
000a42 940e 0df7 	CALL SUBOPT_0x37
                +
000a44 5001     +SUBI R16 , LOW ( 1 )
000a45 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x204000D:
000a46 940e 0df2 	CALL SUBOPT_0x36
000a48 940e 0de6 	CALL SUBOPT_0x34
000a4a 937f      	PUSH R23
000a4b 936f      	PUSH R22
000a4c 93ff      	PUSH R31
000a4d 93ef      	PUSH R30
000a4e 940e 0df2 	CALL SUBOPT_0x36
                +
000a50 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000a51 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000a52 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000a53 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000a54 940e 0f0a 	CALL __ADDF12
000a56 91af      	POP  R26
000a57 91bf      	POP  R27
000a58 918f      	POP  R24
000a59 919f      	POP  R25
000a5a 940e 0fa8 	CALL __DIVF21
000a5c 940e 0df7 	CALL SUBOPT_0x37
000a5e 940e 0dfc 	CALL SUBOPT_0x38
000a60 940e 0dfe 	CALL SUBOPT_0x39
                +
000a62 e2a6     +LDI R26 , LOW ( 0x3F654226 )
000a63 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
000a64 e685     +LDI R24 , BYTE3 ( 0x3F654226 )
000a65 e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
000a66 940e 0e05 	CALL SUBOPT_0x3A
                +
000a68 e4ee     +LDI R30 , LOW ( 0x4054114E )
000a69 e1f1     +LDI R31 , HIGH ( 0x4054114E )
000a6a e564     +LDI R22 , BYTE3 ( 0x4054114E )
000a6b e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
000a6c 940e 0e0a 	CALL SUBOPT_0x3B
000a6e 940e 0ded 	CALL SUBOPT_0x35
000a70 940e 0f5a 	CALL __MULF12
000a72 937f      	PUSH R23
000a73 936f      	PUSH R22
000a74 93ff      	PUSH R31
000a75 93ef      	PUSH R30
000a76 940e 0e0f 	CALL SUBOPT_0x3C
                +
000a78 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
000a79 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
000a7a ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
000a7b e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
000a7c 940e 0f03 	CALL __SUBF12
000a7e 91af      	POP  R26
000a7f 91bf      	POP  R27
000a80 918f      	POP  R24
000a81 919f      	POP  R25
000a82 940e 0fa8 	CALL __DIVF21
000a84 937f      	PUSH R23
000a85 936f      	PUSH R22
000a86 93ff      	PUSH R31
000a87 93ef      	PUSH R30
000a88 01f8      	MOVW R30,R16
000a89 940e 1022 	CALL __CWD1
000a8b 940e 0ed0 	CALL __CDF1
                +
000a8d e1a8     +LDI R26 , LOW ( 0x3F317218 )
000a8e e7b2     +LDI R27 , HIGH ( 0x3F317218 )
000a8f e381     +LDI R24 , BYTE3 ( 0x3F317218 )
000a90 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
000a91 940e 0f5a 	CALL __MULF12
000a93 91af      	POP  R26
000a94 91bf      	POP  R27
000a95 918f      	POP  R24
000a96 919f      	POP  R25
000a97 940e 0f0a 	CALL __ADDF12
                 _0x2120005:
000a99 8119      	LDD  R17,Y+1
000a9a 8108      	LDD  R16,Y+0
000a9b 962a      	ADIW R28,10
000a9c 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
000a9d 940e 10cc 	CALL __PUTPARD2
000a9f 9728      	SBIW R28,8
000aa0 931a      	ST   -Y,R17
000aa1 930a      	ST   -Y,R16
000aa2 940e 0e14 	CALL SUBOPT_0x3D
                +
000aa4 e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
000aa5 eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
000aa6 ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
000aa7 ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
000aa8 940e 0fed 	CALL __CMPF12
000aaa f418      	BRSH _0x204000F
000aab 940e 0e19 	CALL SUBOPT_0x3E
000aad c085      	RJMP _0x2120004
                 _0x204000F:
                +
000aae 85ea     +LDD R30 , Y + 10
000aaf 85fb     +LDD R31 , Y + 10 + 1
000ab0 856c     +LDD R22 , Y + 10 + 2
000ab1 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000ab2 940e 10de 	CALL __CPD10
000ab4 f429      	BRNE _0x2040010
                +
000ab5 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000ab6 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000ab7 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000ab8 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000ab9 c079      	RJMP _0x2120004
                 _0x2040010:
000aba 940e 0e14 	CALL SUBOPT_0x3D
                +
000abc e1e8     +LDI R30 , LOW ( 0x42B17218 )
000abd e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000abe eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000abf e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
000ac0 940e 0fed 	CALL __CMPF12
000ac2 f009      	BREQ PC+2
000ac3 f408      	BRCC PC+2
000ac4 c005      	RJMP _0x2040011
                +
000ac5 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
000ac6 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
000ac7 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
000ac8 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
000ac9 c069      	RJMP _0x2120004
                 _0x2040011:
000aca 940e 0e14 	CALL SUBOPT_0x3D
                +
000acc e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000acd eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000ace eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000acf e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000ad0 940e 0f5a 	CALL __MULF12
                +
000ad2 87ea     +STD Y + 10 , R30
000ad3 87fb     +STD Y + 10 + 1 , R31
000ad4 876c     +STD Y + 10 + 2 , R22
000ad5 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000ad6 940e 0e14 	CALL SUBOPT_0x3D
000ad8 df2b      	RCALL _floor
000ad9 940e 0e99 	CALL __CFD1
000adb 018f      	MOVW R16,R30
000adc 940e 0e14 	CALL SUBOPT_0x3D
000ade 940e 1022 	CALL __CWD1
000ae0 940e 0ed0 	CALL __CDF1
000ae2 940e 0e0a 	CALL SUBOPT_0x3B
000ae4 01df      	MOVW R26,R30
000ae5 01cb      	MOVW R24,R22
                +
000ae6 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000ae7 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000ae8 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000ae9 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000aea 940e 0e0a 	CALL SUBOPT_0x3B
000aec 940e 0df7 	CALL SUBOPT_0x37
000aee 940e 0dfc 	CALL SUBOPT_0x38
000af0 940e 0dfe 	CALL SUBOPT_0x39
                +
000af2 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
000af3 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
000af4 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
000af5 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
000af6 940e 0f5a 	CALL __MULF12
                +
000af8 eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
000af9 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
000afa ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
000afb e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
000afc 940e 0f0a 	CALL __ADDF12
000afe 940e 0ded 	CALL SUBOPT_0x35
000b00 940e 0f5a 	CALL __MULF12
000b02 940e 0df7 	CALL SUBOPT_0x37
000b04 940e 0e0f 	CALL SUBOPT_0x3C
                +
000b06 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
000b07 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
000b08 ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
000b09 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
000b0a 940e 0f0a 	CALL __ADDF12
                +
000b0c 83ea     +STD Y + 2 , R30
000b0d 83fb     +STD Y + 2 + 1 , R31
000b0e 836c     +STD Y + 2 + 2 , R22
000b0f 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000b10 940e 0df2 	CALL SUBOPT_0x36
                +
000b12 81aa     +LDD R26 , Y + 2
000b13 81bb     +LDD R27 , Y + 2 + 1
000b14 818c     +LDD R24 , Y + 2 + 2
000b15 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000b16 940e 0f0a 	CALL __ADDF12
                +
000b18 efa3     +LDI R26 , LOW ( 0x3FB504F3 )
000b19 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
000b1a eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
000b1b e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
000b1c 940e 0f5a 	CALL __MULF12
000b1e 937f      	PUSH R23
000b1f 936f      	PUSH R22
000b20 93ff      	PUSH R31
000b21 93ef      	PUSH R30
000b22 940e 0ded 	CALL SUBOPT_0x35
000b24 940e 0e0f 	CALL SUBOPT_0x3C
000b26 940e 0f03 	CALL __SUBF12
000b28 91af      	POP  R26
000b29 91bf      	POP  R27
000b2a 918f      	POP  R24
000b2b 919f      	POP  R25
000b2c 940e 0fa8 	CALL __DIVF21
000b2e 940e 10c7 	CALL __PUTPARD1
000b30 01d8      	MOVW R26,R16
000b31 940e 0e58 	CALL _ldexp
                 _0x2120004:
000b33 8119      	LDD  R17,Y+1
000b34 8108      	LDD  R16,Y+0
000b35 962e      	ADIW R28,14
000b36 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
000b37 940e 10cc 	CALL __PUTPARD2
000b39 9724      	SBIW R28,4
000b3a 940e 0e1e 	CALL SUBOPT_0x3F
000b3c 940e 10de 	CALL __CPD10
000b3e f419      	BRNE _0x2040012
000b3f 940e 0e19 	CALL SUBOPT_0x3E
000b41 c045      	RJMP _0x2120003
                 _0x2040012:
                +
000b42 85a8     +LDD R26 , Y + 8
000b43 85b9     +LDD R27 , Y + 8 + 1
000b44 858a     +LDD R24 , Y + 8 + 2
000b45 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000b46 940e 10e2 	CALL __CPD02
000b48 f494      	BRGE _0x2040013
000b49 940e 0e23 	CALL SUBOPT_0x40
000b4b 940e 10de 	CALL __CPD10
000b4d f429      	BRNE _0x2040014
                +
000b4e e0e0     +LDI R30 , LOW ( 0x3F800000 )
000b4f e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000b50 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000b51 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000b52 c034      	RJMP _0x2120003
                 _0x2040014:
                +
000b53 85a8     +LDD R26 , Y + 8
000b54 85b9     +LDD R27 , Y + 8 + 1
000b55 858a     +LDD R24 , Y + 8 + 2
000b56 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000b57 940e 0e28 	CALL SUBOPT_0x41
000b59 df43      	RCALL _exp
000b5a c02c      	RJMP _0x2120003
                 _0x2040013:
000b5b 940e 0e23 	CALL SUBOPT_0x40
000b5d 01de      	MOVW R26,R28
000b5e 940e 0e99 	CALL __CFD1
000b60 940e 10af 	CALL __PUTDP1
000b62 940e 0de3 	CALL SUBOPT_0x33
000b64 940e 0ed0 	CALL __CDF1
000b66 01df      	MOVW R26,R30
000b67 01cb      	MOVW R24,R22
000b68 940e 0e23 	CALL SUBOPT_0x40
000b6a 940e 10e8 	CALL __CPD12
000b6c f019      	BREQ _0x2040015
000b6d 940e 0e19 	CALL SUBOPT_0x3E
000b6f c017      	RJMP _0x2120003
                 _0x2040015:
000b70 940e 0e1e 	CALL SUBOPT_0x3F
000b72 940e 0e64 	CALL __ANEGF1
000b74 01df      	MOVW R26,R30
000b75 01cb      	MOVW R24,R22
000b76 940e 0e28 	CALL SUBOPT_0x41
000b78 df24      	RCALL _exp
                +
000b79 87e8     +STD Y + 8 , R30
000b7a 87f9     +STD Y + 8 + 1 , R31
000b7b 876a     +STD Y + 8 + 2 , R22
000b7c 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000b7d 81e8      	LD   R30,Y
000b7e 70e1      	ANDI R30,LOW(0x1)
000b7f f419      	BRNE _0x2040016
000b80 940e 0e1e 	CALL SUBOPT_0x3F
000b82 c004      	RJMP _0x2120003
                 _0x2040016:
000b83 940e 0e1e 	CALL SUBOPT_0x3F
000b85 940e 0e64 	CALL __ANEGF1
                 _0x2120003:
000b87 962c      	ADIW R28,12
000b88 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000b89 93ba      	ST   -Y,R27
000b8a 93aa      	ST   -Y,R26
000b8b 91a9          ld   r26,y+
000b8c 91b9          ld   r27,y+
000b8d 27ee          clr  r30
000b8e 27ff          clr  r31
                 strlen0:
000b8f 916d          ld   r22,x+
000b90 2366          tst  r22
000b91 f011          breq strlen1
000b92 9631          adiw r30,1
000b93 cffb          rjmp strlen0
                 strlen1:
000b94 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000b95 93ba      	ST   -Y,R27
000b96 93aa      	ST   -Y,R26
000b97 27aa          clr  r26
000b98 27bb          clr  r27
000b99 91e9          ld   r30,y+
000b9a 91f9          ld   r31,y+
                 strlenf0:
000b9b 9005      	lpm  r0,z+
000b9c 2000          tst  r0
000b9d f011          breq strlenf1
000b9e 9611          adiw r26,1
000b9f cffb          rjmp strlenf0
                 strlenf1:
000ba0 01fd          movw r30,r26
000ba1 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G104:
                 ; .FSTART __lcd_write_nibble_G104
000ba2 93aa      	ST   -Y,R26
000ba3 b3e5      	IN   R30,0x15
000ba4 70ef      	ANDI R30,LOW(0xF)
000ba5 2fae      	MOV  R26,R30
000ba6 81e8      	LD   R30,Y
000ba7 7fe0      	ANDI R30,LOW(0xF0)
000ba8 2bea      	OR   R30,R26
000ba9 bbe5      	OUT  0x15,R30
                +
000baa e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000bab 958a     +DEC R24
000bac f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000bad 9aaa      	SBI  0x15,2
                +
000bae e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000baf 958a     +DEC R24
000bb0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000bb1 98aa      	CBI  0x15,2
                +
000bb2 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000bb3 958a     +DEC R24
000bb4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000bb5 c09b      	RJMP _0x2120001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000bb6 93aa      	ST   -Y,R26
000bb7 81a8      	LD   R26,Y
000bb8 dfe9      	RCALL __lcd_write_nibble_G104
000bb9 81e8          ld    r30,y
000bba 95e2          swap  r30
000bbb 83e8          st    y,r30
000bbc 81a8      	LD   R26,Y
000bbd dfe4      	RCALL __lcd_write_nibble_G104
                +
000bbe ec88     +LDI R24 , LOW ( 200 )
000bbf e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000bc0 9701     +SBIW R24 , 1
000bc1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000bc2 c08e      	RJMP _0x2120001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000bc3 93aa      	ST   -Y,R26
000bc4 81e8      	LD   R30,Y
000bc5 e0f0      	LDI  R31,0
000bc6 5ee1      	SUBI R30,LOW(-__base_y_G104)
000bc7 4ff9      	SBCI R31,HIGH(-__base_y_G104)
000bc8 81e0      	LD   R30,Z
000bc9 81a9      	LDD  R26,Y+1
000bca 0fae      	ADD  R26,R30
000bcb dfea      	RCALL __lcd_write_data
000bcc 81e9      	LDD  R30,Y+1
000bcd 93e0 0623 	STS  __lcd_x,R30
000bcf 81e8      	LD   R30,Y
000bd0 93e0 0624 	STS  __lcd_y,R30
000bd2 9622      	ADIW R28,2
000bd3 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000bd4 e0a2      	LDI  R26,LOW(2)
000bd5 940e 0e2f 	CALL SUBOPT_0x42
000bd7 e0ac      	LDI  R26,LOW(12)
000bd8 dfdd      	RCALL __lcd_write_data
000bd9 e0a1      	LDI  R26,LOW(1)
000bda 940e 0e2f 	CALL SUBOPT_0x42
000bdc e0e0      	LDI  R30,LOW(0)
000bdd 93e0 0624 	STS  __lcd_y,R30
000bdf 93e0 0623 	STS  __lcd_x,R30
000be1 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000be2 93aa      	ST   -Y,R26
000be3 81a8      	LD   R26,Y
000be4 30aa      	CPI  R26,LOW(0xA)
000be5 f031      	BREQ _0x2080005
000be6 91e0 0625 	LDS  R30,__lcd_maxx
000be8 91a0 0623 	LDS  R26,__lcd_x
000bea 17ae      	CP   R26,R30
000beb f060      	BRLO _0x2080004
                 _0x2080005:
000bec e0e0      	LDI  R30,LOW(0)
000bed 93ea      	ST   -Y,R30
000bee 91a0 0624 	LDS  R26,__lcd_y
000bf0 5faf      	SUBI R26,-LOW(1)
000bf1 93a0 0624 	STS  __lcd_y,R26
000bf3 dfcf      	RCALL _lcd_gotoxy
000bf4 81a8      	LD   R26,Y
000bf5 30aa      	CPI  R26,LOW(0xA)
000bf6 f409      	BRNE _0x2080007
000bf7 c059      	RJMP _0x2120001
                 _0x2080007:
                 _0x2080004:
000bf8 91e0 0623 	LDS  R30,__lcd_x
000bfa 5fef      	SUBI R30,-LOW(1)
000bfb 93e0 0623 	STS  __lcd_x,R30
000bfd 9aa8      	SBI  0x15,0
000bfe 81a8      	LD   R26,Y
000bff dfb6      	RCALL __lcd_write_data
000c00 98a8      	CBI  0x15,0
000c01 c04f      	RJMP _0x2120001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000c02 93ba      	ST   -Y,R27
000c03 93aa      	ST   -Y,R26
000c04 931a      	ST   -Y,R17
                 _0x2080008:
000c05 81a9      	LDD  R26,Y+1
000c06 81ba      	LDD  R27,Y+1+1
000c07 91ed      	LD   R30,X+
000c08 83a9      	STD  Y+1,R26
000c09 83ba      	STD  Y+1+1,R27
000c0a 2f1e      	MOV  R17,R30
000c0b 30e0      	CPI  R30,0
000c0c f019      	BREQ _0x208000A
000c0d 2fa1      	MOV  R26,R17
000c0e dfd3      	RCALL _lcd_putchar
000c0f cff5      	RJMP _0x2080008
                 _0x208000A:
000c10 c010      	RJMP _0x2120002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000c11 93ba      	ST   -Y,R27
000c12 93aa      	ST   -Y,R26
000c13 931a      	ST   -Y,R17
                 _0x208000B:
000c14 81e9      	LDD  R30,Y+1
000c15 81fa      	LDD  R31,Y+1+1
000c16 9631      	ADIW R30,1
000c17 83e9      	STD  Y+1,R30
000c18 83fa      	STD  Y+1+1,R31
000c19 9731      	SBIW R30,1
000c1a 91e4      	LPM  R30,Z
000c1b 2f1e      	MOV  R17,R30
000c1c 30e0      	CPI  R30,0
000c1d f019      	BREQ _0x208000D
000c1e 2fa1      	MOV  R26,R17
000c1f dfc2      	RCALL _lcd_putchar
000c20 cff3      	RJMP _0x208000B
                 _0x208000D:
                 _0x2120002:
000c21 8118      	LDD  R17,Y+0
000c22 9623      	ADIW R28,3
000c23 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000c24 93aa      	ST   -Y,R26
000c25 b3e4      	IN   R30,0x14
000c26 6fe0      	ORI  R30,LOW(0xF0)
000c27 bbe4      	OUT  0x14,R30
000c28 9aa2      	SBI  0x14,2
000c29 9aa0      	SBI  0x14,0
000c2a 9aa1      	SBI  0x14,1
000c2b 98aa      	CBI  0x15,2
000c2c 98a8      	CBI  0x15,0
000c2d 98a9      	CBI  0x15,1
000c2e 81e8      	LD   R30,Y
000c2f 93e0 0625 	STS  __lcd_maxx,R30
000c31 58e0      	SUBI R30,-LOW(128)
                +
000c32 93e0 0621+STS __base_y_G104 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G104,2
000c34 81e8      	LD   R30,Y
000c35 54e0      	SUBI R30,-LOW(192)
                +
000c36 93e0 0622+STS __base_y_G104 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G104,3
000c38 e1a4      	LDI  R26,LOW(20)
000c39 e0b0      	LDI  R27,0
000c3a 940e 0e3d 	CALL _delay_ms
000c3c 940e 0e35 	CALL SUBOPT_0x43
000c3e 940e 0e35 	CALL SUBOPT_0x43
000c40 940e 0e35 	CALL SUBOPT_0x43
000c42 e2a0      	LDI  R26,LOW(32)
000c43 df5e      	RCALL __lcd_write_nibble_G104
                +
000c44 e980     +LDI R24 , LOW ( 400 )
000c45 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000c46 9701     +SBIW R24 , 1
000c47 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000c48 e2a8      	LDI  R26,LOW(40)
000c49 df6c      	RCALL __lcd_write_data
000c4a e0a4      	LDI  R26,LOW(4)
000c4b df6a      	RCALL __lcd_write_data
000c4c e8a5      	LDI  R26,LOW(133)
000c4d df68      	RCALL __lcd_write_data
000c4e e0a6      	LDI  R26,LOW(6)
000c4f df66      	RCALL __lcd_write_data
000c50 df83      	RCALL _lcd_clear
                 _0x2120001:
000c51 9621      	ADIW R28,1
000c52 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _set_voltage:
00054b           	.BYTE 0x4
                 _set_current:
00054f           	.BYTE 0x4
                 _actual_voltage_G000:
000553           	.BYTE 0x2
                 _actual_btcurrent_G000:
000555           	.BYTE 0x2
                 _actual_ipvoltage_G000:
000557           	.BYTE 0x2
                 _actual_opcurrent_G000:
000559           	.BYTE 0x2
                 _set_flag:
00055b           	.BYTE 0x2
                 _flag:
00055d           	.BYTE 0x2
                 _n:
00055f           	.BYTE 0x2
                 _main_screen_trigger:
000561           	.BYTE 0x2
                 _ms_update_flag:
000563           	.BYTE 0x2
                 _current_mainscreen_flag:
000565           	.BYTE 0x2
                 _status:
000567           	.BYTE 0x2
                 _fault_flag:
000569           	.BYTE 0x2
                 _fltArray:
00056b           	.BYTE 0x9
                 _disp_volt:
000574           	.BYTE 0x3
                 _disp_current:
000577           	.BYTE 0x3
                 _disp_set_voltage:
00057a           	.BYTE 0x3
                 _disp_set_btcurrent:
00057d           	.BYTE 0x4
                 _disp_actual_voltage:
000581           	.BYTE 0x3
                 _disp_actual_btcurrent:
000584           	.BYTE 0x4
                 _disp_actual_ipvoltage:
000588           	.BYTE 0x3
                 _disp_actual_opcurrent:
00058b           	.BYTE 0x4
                 _xmitMsg:
00058f           	.BYTE 0x2
                 _rdataA:
000591           	.BYTE 0x14
                 _comStart:
0005a5           	.BYTE 0x2
                 _i:
0005a7           	.BYTE 0x2
                 _rx_buffer0:
0005a9           	.BYTE 0x20
                 _rx_wr_index0:
0005c9           	.BYTE 0x1
                 _rx_rd_index0:
0005ca           	.BYTE 0x1
                 _rx_counter0:
0005cb           	.BYTE 0x1
                 _tx_buffer0:
0005cc           	.BYTE 0x40
                 _tx_wr_index0:
00060c           	.BYTE 0x1
                 _tx_rd_index0:
00060d           	.BYTE 0x1
                 _tx_counter0:
00060e           	.BYTE 0x1
                 _on_pressed:
00060f           	.BYTE 0x2
                 _off_pressed:
000611           	.BYTE 0x2
                 _reset_pressed:
000613           	.BYTE 0x2
                 _on_button_state:
000615           	.BYTE 0x2
                 _off_button_state:
000617           	.BYTE 0x2
                 _reset_button_state:
000619           	.BYTE 0x2
                 __seed_G101:
00061b           	.BYTE 0x4
                 __base_y_G104:
00061f           	.BYTE 0x4
                 __lcd_x:
000623           	.BYTE 0x1
                 __lcd_y:
000624           	.BYTE 0x1
                 __lcd_maxx:
000625           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000c53 93ba      	ST   -Y,R27
000c54 93aa      	ST   -Y,R26
000c55 931a      	ST   -Y,R17
000c56 930a      	ST   -Y,R16
                +
000c57 e000     +LDI R16 , LOW ( 0 )
000c58 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000c59 e000     +LDI R16 , LOW ( 0 )
000c5a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000c5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000c5c 93ba      	ST   -Y,R27
000c5d 93aa      	ST   -Y,R26
000c5e 940e 10ef 	CALL __SAVELOCR4
                +
000c60 810c     +LDD R16 , Y + 4
000c61 811d     +LDD R17 , Y + 4 + 1
                 	__GETWRS 16,17,4
000c62 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2:
000c63 940e 1022 	CALL __CWD1
000c65 940e 10c7 	CALL __PUTPARD1
000c67 e084      	LDI  R24,4
000c68 940e 099f 	CALL _sprintf
000c6a 9628      	ADIW R28,8
000c6b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000c6c e0e1      	LDI  R30,LOW(1)
000c6d e0f0      	LDI  R31,HIGH(1)
000c6e 93e0 0565 	STS  _current_mainscreen_flag,R30
000c70 93f0 0566 	STS  _current_mainscreen_flag+1,R31
000c72 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000c73 93ba      	ST   -Y,R27
000c74 93aa      	ST   -Y,R26
000c75 81e8      	LD   R30,Y
000c76 81f9      	LDD  R31,Y+1
000c77 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
000c78 0fea      	ADD  R30,R26
000c79 1ffb      	ADC  R31,R27
000c7a 010f      	MOVW R0,R30
000c7b 01fa      	MOVW R30,R20
000c7c 85ad      	LDD  R26,Y+13
000c7d 85be      	LDD  R27,Y+13+1
000c7e 0fae      	ADD  R26,R30
000c7f 1fbf      	ADC  R27,R31
000c80 91ec      	LD   R30,X
000c81 01d0      	MOVW R26,R0
000c82 93ec      	ST   X,R30
000c83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000c84 e0f0      	LDI  R31,0
000c85 97f0      	SBIW R30,48
000c86 e0aa      	LDI  R26,LOW(10)
000c87 e0b0      	LDI  R27,HIGH(10)
000c88 940e 102f 	CALL __MULW12
                +
000c8a 0f6e     +ADD R22 , R30
000c8b 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000c8c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000c8d e0f0      	LDI  R31,0
000c8e 97f0      	SBIW R30,48
000c8f e6a4      	LDI  R26,LOW(100)
000c90 e0b0      	LDI  R27,HIGH(100)
000c91 940e 102f 	CALL __MULW12
000c93 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000c94 e0e0      	LDI  R30,LOW(0)
000c95 93e0 05a7 	STS  _i,R30
000c97 93e0 05a8 	STS  _i+1,R30
000c99 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000c9a 91e0 05a7 	LDS  R30,_i
000c9c 91f0 05a8 	LDS  R31,_i+1
000c9e 56ef      	SUBI R30,LOW(-_rdataA)
000c9f 4ffa      	SBCI R31,HIGH(-_rdataA)
000ca0 8300      	ST   Z,R16
000ca1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000ca2 91ed      	LD   R30,X+
000ca3 91fd      	LD   R31,X+
000ca4 9631      	ADIW R30,1
000ca5 93fe      	ST   -X,R31
000ca6 93ee      	ST   -X,R30
000ca7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000ca8 0fee      	LSL  R30
000ca9 1fff      	ROL  R31
000caa 2bea      	OR   R30,R26
000cab 2bfb      	OR   R31,R27
000cac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
000cad e0e0      	LDI  R30,LOW(0)
000cae 93ea      	ST   -Y,R30
000caf e0a2      	LDI  R26,LOW(2)
000cb0 940e 0bc3 	CALL _lcd_gotoxy
                +
000cb2 efad     +LDI R26 , LOW ( 2 * _0x0 + ( 77 ) )
000cb3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 77 ) )
                 	__POINTW2FN _0x0,77
000cb4 940c 0c11 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
000cb6 93ea      	ST   -Y,R30
000cb7 e0a2      	LDI  R26,LOW(2)
000cb8 940e 0bc3 	CALL _lcd_gotoxy
                +
000cba efad     +LDI R26 , LOW ( 2 * _0x0 + ( 77 ) )
000cbb e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 77 ) )
                 	__POINTW2FN _0x0,77
000cbc 940c 0c11 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0xE:
000cbe e0e0      	LDI  R30,LOW(0)
000cbf 93ea      	ST   -Y,R30
000cc0 e0a0      	LDI  R26,LOW(0)
000cc1 940c 0bc3 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
000cc3 efad     +LDI R26 , LOW ( 2 * _0x0 + ( 77 ) )
000cc4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 77 ) )
                 	__POINTW2FN _0x0,77
000cc5 940c 0c11 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x10:
000cc7 e0e0      	LDI  R30,LOW(0)
000cc8 93ea      	ST   -Y,R30
000cc9 e0a1      	LDI  R26,LOW(1)
000cca 940c 0bc3 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
000ccc 93ea      	ST   -Y,R30
000ccd e0a3      	LDI  R26,LOW(3)
000cce 940c 0bc3 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x12:
000cd0 93fa      	ST   -Y,R31
000cd1 93ea      	ST   -Y,R30
                +
000cd2 e0e1     +LDI R30 , LOW ( 2 * _0x0 + ( 81 ) )
000cd3 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 81 ) )
                 	__POINTW1FN _0x0,81
000cd4 93fa      	ST   -Y,R31
000cd5 93ea      	ST   -Y,R30
000cd6 91e0 054b 	LDS  R30,_set_voltage
000cd8 91f0 054c 	LDS  R31,_set_voltage+1
000cda 9160 054d 	LDS  R22,_set_voltage+2
000cdc 9170 054e 	LDS  R23,_set_voltage+3
000cde 940e 10c7 	CALL __PUTPARD1
000ce0 e084      	LDI  R24,4
000ce1 940e 099f 	CALL _sprintf
000ce3 9628      	ADIW R28,8
000ce4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x13:
000ce5 93fa      	ST   -Y,R31
000ce6 93ea      	ST   -Y,R30
000ce7 91e0 054f 	LDS  R30,_set_current
000ce9 91f0 0550 	LDS  R31,_set_current+1
000ceb 9160 0551 	LDS  R22,_set_current+2
000ced 9170 0552 	LDS  R23,_set_current+3
000cef 940e 10c7 	CALL __PUTPARD1
000cf1 e084      	LDI  R24,4
000cf2 940e 099f 	CALL _sprintf
000cf4 9628      	ADIW R28,8
000cf5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000cf6 e6a4      	LDI  R26,LOW(100)
000cf7 e0b0      	LDI  R27,0
000cf8 940c 0e3d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x15:
000cfa 940e 0bd4 	CALL _lcd_clear
000cfc cfc1      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
000cfd e0e1      	LDI  R30,LOW(1)
000cfe e0f0      	LDI  R31,HIGH(1)
000cff 93e0 0561 	STS  _main_screen_trigger,R30
000d01 93f0 0562 	STS  _main_screen_trigger+1,R31
000d03 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000d04 e6e4      	LDI  R30,LOW(100)
000d05 e0f0      	LDI  R31,HIGH(100)
000d06 15e4      	CP   R30,R4
000d07 05f5      	CPC  R31,R5
000d08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x18:
000d09 01d2      	MOVW R26,R4
000d0a e0ea      	LDI  R30,LOW(10)
000d0b e0f0      	LDI  R31,HIGH(10)
000d0c 940e 1047 	CALL __DIVW21
000d0e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x19:
000d0f 93ba      	ST   -Y,R27
000d10 93aa      	ST   -Y,R26
000d11 931a      	ST   -Y,R17
000d12 930a      	ST   -Y,R16
                +
000d13 e0e0     +LDI R30 , LOW ( 0x41200000 )
000d14 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000d15 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000d16 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000d17 940e 10c7 	CALL __PUTPARD1
000d19 81ae      	LDD  R26,Y+6
000d1a 81bf      	LDD  R27,Y+6+1
000d1b 19a8      	SUB  R26,R8
000d1c 09b9      	SBC  R27,R9
000d1d e0e1      	LDI  R30,LOW(1)
000d1e e0f0      	LDI  R31,HIGH(1)
000d1f 940e 10d7 	CALL __SWAPW12
000d21 1bea      	SUB  R30,R26
000d22 0bfb      	SBC  R31,R27
000d23 940e 1022 	CALL __CWD1
000d25 940e 0ed0 	CALL __CDF1
000d27 01df      	MOVW R26,R30
000d28 01cb      	MOVW R24,R22
000d29 940e 0b37 	CALL _pow
000d2b 940e 0e97 	CALL __CFD1U
000d2d 018f      	MOVW R16,R30
000d2e 940e 0437 	CALL _pointer_display_horiz
000d30 cfc5      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1A:
000d31 91a0 054b 	LDS  R26,_set_voltage
000d33 91b0 054c 	LDS  R27,_set_voltage+1
000d35 9180 054d 	LDS  R24,_set_voltage+2
000d37 9190 054e 	LDS  R25,_set_voltage+3
000d39 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1B:
000d3a 91e0 054b 	LDS  R30,_set_voltage
000d3c 91f0 054c 	LDS  R31,_set_voltage+1
000d3e 9160 054d 	LDS  R22,_set_voltage+2
000d40 9170 054e 	LDS  R23,_set_voltage+3
000d42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1C:
                +
000d43 5fef     +SUBI R30 , LOW ( - 1 )
000d44 4fff     +SBCI R31 , HIGH ( - 1 )
000d45 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000d46 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
000d47 01df      	MOVW R26,R30
000d48 01cb      	MOVW R24,R22
000d49 01f8      	MOVW R30,R16
000d4a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
000d4b 93e0 054b 	STS  _set_voltage,R30
000d4d 93f0 054c 	STS  _set_voltage+1,R31
000d4f 9360 054d 	STS  _set_voltage+2,R22
000d51 9370 054e 	STS  _set_voltage+3,R23
000d53 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
                +
000d54 eee8     +LDI R30 , LOW ( 0x3E8 )
000d55 e0f3     +LDI R31 , HIGH ( 0x3E8 )
000d56 e060     +LDI R22 , BYTE3 ( 0x3E8 )
000d57 e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
000d58 940e 1089 	CALL __MODD21
000d5a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1F:
000d5b 01f4      	MOVW R30,R8
000d5c 9631      	ADIW R30,1
000d5d 014f      	MOVW R8,R30
000d5e 81ea      	LDD  R30,Y+2
000d5f 81fb      	LDD  R31,Y+2+1
000d60 01d4      	MOVW R26,R8
000d61 940e 1071 	CALL __MODW21
000d63 014f      	MOVW R8,R30
000d64 940c 0437 	JMP  _pointer_display_horiz
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x20:
000d66 940e 0c02 	CALL _lcd_puts
000d68 e0e4      	LDI  R30,LOW(4)
000d69 93ea      	ST   -Y,R30
000d6a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x21:
000d6b e0eb      	LDI  R30,LOW(11)
000d6c e0f0      	LDI  R31,HIGH(11)
000d6d 93e0 055d 	STS  _flag,R30
000d6f 93f0 055e 	STS  _flag+1,R31
000d71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
                +
000d72 e2a9     +LDI R26 , LOW ( 2 * _0x0 + ( 121 ) )
000d73 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 121 ) )
                 	__POINTW2FN _0x0,121
000d74 940e 0c11 	CALL _lcd_putsf
000d76 cf50      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x23:
000d77 940e 0c11 	CALL _lcd_putsf
000d79 e0e0      	LDI  R30,LOW(0)
000d7a 93ea      	ST   -Y,R30
000d7b e0a2      	LDI  R26,LOW(2)
000d7c 940c 0bc3 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x24:
000d7e 91a0 054f 	LDS  R26,_set_current
000d80 91b0 0550 	LDS  R27,_set_current+1
000d82 9180 0551 	LDS  R24,_set_current+2
000d84 9190 0552 	LDS  R25,_set_current+3
000d86 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
000d87 91e0 054f 	LDS  R30,_set_current
000d89 91f0 0550 	LDS  R31,_set_current+1
000d8b 9160 0551 	LDS  R22,_set_current+2
000d8d 9170 0552 	LDS  R23,_set_current+3
000d8f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000d90 93e0 054f 	STS  _set_current,R30
000d92 93f0 0550 	STS  _set_current+1,R31
000d94 9360 0551 	STS  _set_current+2,R22
000d96 9370 0552 	STS  _set_current+3,R23
000d98 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x27:
000d99 940e 0c02 	CALL _lcd_puts
000d9b e0e3      	LDI  R30,LOW(3)
000d9c 93ea      	ST   -Y,R30
000d9d e0a1      	LDI  R26,LOW(1)
000d9e 940c 0bc3 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x28:
000da0 93ea      	ST   -Y,R30
000da1 e0a0      	LDI  R26,LOW(0)
000da2 940c 0bc3 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x29:
000da4 93ea      	ST   -Y,R30
000da5 e0a1      	LDI  R26,LOW(1)
000da6 940c 0bc3 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
000da8 93ea      	ST   -Y,R30
000da9 e0a2      	LDI  R26,LOW(2)
000daa 940c 0bc3 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2B:
000dac 93fa      	ST   -Y,R31
000dad 93ea      	ST   -Y,R30
                +
000dae e0e1     +LDI R30 , LOW ( 2 * _0x0 + ( 81 ) )
000daf e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 81 ) )
                 	__POINTW1FN _0x0,81
000db0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
000db1 91a0 0569 	LDS  R26,_fault_flag
000db3 91b0 056a 	LDS  R27,_fault_flag+1
000db5 9711      	SBIW R26,1
000db6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2D:
000db7 932a      	ST   -Y,R18
000db8 85ad      	LDD  R26,Y+13
000db9 85be      	LDD  R27,Y+13+1
000dba 85ef      	LDD  R30,Y+15
000dbb 89f8      	LDD  R31,Y+15+1
000dbc 9509      	ICALL
000dbd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2E:
000dbe 89e8      	LDD  R30,Y+16
000dbf 89f9      	LDD  R31,Y+16+1
000dc0 9734      	SBIW R30,4
000dc1 8be8      	STD  Y+16,R30
000dc2 8bf9      	STD  Y+16+1,R31
000dc3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2F:
000dc4 85ad      	LDD  R26,Y+13
000dc5 85be      	LDD  R27,Y+13+1
000dc6 85ef      	LDD  R30,Y+15
000dc7 89f8      	LDD  R31,Y+15+1
000dc8 9509      	ICALL
000dc9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x30:
000dca 89a8      	LDD  R26,Y+16
000dcb 89b9      	LDD  R27,Y+16+1
000dcc 9614      	ADIW R26,4
000dcd 940e 10ab 	CALL __GETW1P
000dcf 83ee      	STD  Y+6,R30
000dd0 83ff      	STD  Y+6+1,R31
000dd1 81ae      	LDD  R26,Y+6
000dd2 81bf      	LDD  R27,Y+6+1
000dd3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x31:
000dd4 89a8      	LDD  R26,Y+16
000dd5 89b9      	LDD  R27,Y+16+1
000dd6 9614      	ADIW R26,4
000dd7 940e 10ab 	CALL __GETW1P
000dd9 87ea      	STD  Y+10,R30
000dda 87fb      	STD  Y+10+1,R31
000ddb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
000ddc 01de      	MOVW R26,R28
000ddd 961c      	ADIW R26,12
000dde 940e 100d 	CALL __ADDW2R15
000de0 940e 10ab 	CALL __GETW1P
000de2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
000de3 940e 10b8 	CALL __GETD1S0
000de5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
                +
000de6 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000de7 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000de8 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000de9 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000dea 940e 0f03 	CALL __SUBF12
000dec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x35:
                +
000ded 81ae     +LDD R26 , Y + 6
000dee 81bf     +LDD R27 , Y + 6 + 1
000def 8588     +LDD R24 , Y + 6 + 2
000df0 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000df1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x36:
                +
000df2 81ee     +LDD R30 , Y + 6
000df3 81ff     +LDD R31 , Y + 6 + 1
000df4 8568     +LDD R22 , Y + 6 + 2
000df5 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000df6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x37:
                +
000df7 83ee     +STD Y + 6 , R30
000df8 83ff     +STD Y + 6 + 1 , R31
000df9 8768     +STD Y + 6 + 2 , R22
000dfa 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000dfb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
000dfc dff5      	RCALL SUBOPT_0x36
000dfd cfef      	RJMP SUBOPT_0x35
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x39:
000dfe 940e 0f5a 	CALL __MULF12
                +
000e00 83ea     +STD Y + 2 , R30
000e01 83fb     +STD Y + 2 + 1 , R31
000e02 836c     +STD Y + 2 + 2 , R22
000e03 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000e04 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
000e05 940e 0f5a 	CALL __MULF12
000e07 01df      	MOVW R26,R30
000e08 01cb      	MOVW R24,R22
000e09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
000e0a 940e 10d1 	CALL __SWAPD12
000e0c 940e 0f03 	CALL __SUBF12
000e0e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
                +
000e0f 81ea     +LDD R30 , Y + 2
000e10 81fb     +LDD R31 , Y + 2 + 1
000e11 816c     +LDD R22 , Y + 2 + 2
000e12 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000e13 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3D:
                +
000e14 85aa     +LDD R26 , Y + 10
000e15 85bb     +LDD R27 , Y + 10 + 1
000e16 858c     +LDD R24 , Y + 10 + 2
000e17 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000e18 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3E:
                +
000e19 e0e0     +LDI R30 , LOW ( 0x0 )
000e1a e0f0     +LDI R31 , HIGH ( 0x0 )
000e1b e060     +LDI R22 , BYTE3 ( 0x0 )
000e1c e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000e1d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3F:
                +
000e1e 85e8     +LDD R30 , Y + 8
000e1f 85f9     +LDD R31 , Y + 8 + 1
000e20 856a     +LDD R22 , Y + 8 + 2
000e21 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000e22 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x40:
                +
000e23 81ec     +LDD R30 , Y + 4
000e24 81fd     +LDD R31 , Y + 4 + 1
000e25 816e     +LDD R22 , Y + 4 + 2
000e26 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000e27 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x41:
000e28 940e 0a17 	CALL _log
                +
000e2a 81ac     +LDD R26 , Y + 4
000e2b 81bd     +LDD R27 , Y + 4 + 1
000e2c 818e     +LDD R24 , Y + 4 + 2
000e2d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000e2e cfd6      	RJMP SUBOPT_0x3A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x42:
000e2f 940e 0bb6 	CALL __lcd_write_data
000e31 e0a3      	LDI  R26,LOW(3)
000e32 e0b0      	LDI  R27,0
000e33 940c 0e3d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x43:
000e35 e3a0      	LDI  R26,LOW(48)
000e36 940e 0ba2 	CALL __lcd_write_nibble_G104
                +
000e38 e980     +LDI R24 , LOW ( 400 )
000e39 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000e3a 9701     +SBIW R24 , 1
000e3b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000e3c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000e3d 9610      	adiw r26,0
000e3e f039      	breq __delay_ms1
                 __delay_ms0:
                +
000e3f ea80     +LDI R24 , LOW ( 0xFA0 )
000e40 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000e41 9701     +SBIW R24 , 1
000e42 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000e43 95a8      	wdr
000e44 9711      	sbiw r26,1
000e45 f7c9      	brne __delay_ms0
                 __delay_ms1:
000e46 9508      	ret
                 
                 _frexp:
000e47 91e9      	LD   R30,Y+
000e48 91f9      	LD   R31,Y+
000e49 9169      	LD   R22,Y+
000e4a 9179      	LD   R23,Y+
000e4b fb77      	BST  R23,7
000e4c 0f66      	LSL  R22
000e4d 1f77      	ROL  R23
000e4e 2788      	CLR  R24
000e4f 577e      	SUBI R23,0x7E
000e50 0b88      	SBC  R24,R24
000e51 937d      	ST   X+,R23
000e52 938c      	ST   X,R24
000e53 e77e      	LDI  R23,0x7E
000e54 9576      	LSR  R23
000e55 9567      	ROR  R22
000e56 f06e      	BRTS __ANEGF1
000e57 9508      	RET
                 
                 _ldexp:
000e58 91e9      	LD   R30,Y+
000e59 91f9      	LD   R31,Y+
000e5a 9169      	LD   R22,Y+
000e5b 9179      	LD   R23,Y+
000e5c fb77      	BST  R23,7
000e5d 0f66      	LSL  R22
000e5e 1f77      	ROL  R23
000e5f 0f7a      	ADD  R23,R26
000e60 9576      	LSR  R23
000e61 9567      	ROR  R22
000e62 f00e      	BRTS __ANEGF1
000e63 9508      	RET
                 
                 __ANEGF1:
000e64 9730      	SBIW R30,0
000e65 4060      	SBCI R22,0
000e66 4070      	SBCI R23,0
000e67 f009      	BREQ __ANEGF10
000e68 5870      	SUBI R23,0x80
                 __ANEGF10:
000e69 9508      	RET
                 
                 __ROUND_REPACK:
000e6a 2355      	TST  R21
000e6b f442      	BRPL __REPACK
000e6c 3850      	CPI  R21,0x80
000e6d f411      	BRNE __ROUND_REPACK0
000e6e ffe0      	SBRS R30,0
000e6f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000e70 9631      	ADIW R30,1
000e71 1f69      	ADC  R22,R25
000e72 1f79      	ADC  R23,R25
000e73 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000e74 e850      	LDI  R21,0x80
000e75 2757      	EOR  R21,R23
000e76 f411      	BRNE __REPACK0
000e77 935f      	PUSH R21
000e78 c0cf      	RJMP __ZERORES
                 __REPACK0:
000e79 3f5f      	CPI  R21,0xFF
000e7a f031      	BREQ __REPACK1
000e7b 0f66      	LSL  R22
000e7c 0c00      	LSL  R0
000e7d 9557      	ROR  R21
000e7e 9567      	ROR  R22
000e7f 2f75      	MOV  R23,R21
000e80 9508      	RET
                 __REPACK1:
000e81 935f      	PUSH R21
000e82 2000      	TST  R0
000e83 f00a      	BRMI __REPACK2
000e84 c0cf      	RJMP __MAXRES
                 __REPACK2:
000e85 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000e86 e850      	LDI  R21,0x80
000e87 2e19      	MOV  R1,R25
000e88 2215      	AND  R1,R21
000e89 0f88      	LSL  R24
000e8a 1f99      	ROL  R25
000e8b 2795      	EOR  R25,R21
000e8c 0f55      	LSL  R21
000e8d 9587      	ROR  R24
                 
                 __UNPACK1:
000e8e e850      	LDI  R21,0x80
000e8f 2e07      	MOV  R0,R23
000e90 2205      	AND  R0,R21
000e91 0f66      	LSL  R22
000e92 1f77      	ROL  R23
000e93 2775      	EOR  R23,R21
000e94 0f55      	LSL  R21
000e95 9567      	ROR  R22
000e96 9508      	RET
                 
                 __CFD1U:
000e97 9468      	SET
000e98 c001      	RJMP __CFD1U0
                 __CFD1:
000e99 94e8      	CLT
                 __CFD1U0:
000e9a 935f      	PUSH R21
000e9b dff2      	RCALL __UNPACK1
000e9c 3870      	CPI  R23,0x80
000e9d f018      	BRLO __CFD10
000e9e 3f7f      	CPI  R23,0xFF
000e9f f408      	BRCC __CFD10
000ea0 c0a7      	RJMP __ZERORES
                 __CFD10:
000ea1 e156      	LDI  R21,22
000ea2 1b57      	SUB  R21,R23
000ea3 f4aa      	BRPL __CFD11
000ea4 9551      	NEG  R21
000ea5 3058      	CPI  R21,8
000ea6 f40e      	BRTC __CFD19
000ea7 3059      	CPI  R21,9
                 __CFD19:
000ea8 f030      	BRLO __CFD17
000ea9 efef      	SER  R30
000eaa efff      	SER  R31
000eab ef6f      	SER  R22
000eac e77f      	LDI  R23,0x7F
000ead f977      	BLD  R23,7
000eae c01a      	RJMP __CFD15
                 __CFD17:
000eaf 2777      	CLR  R23
000eb0 2355      	TST  R21
000eb1 f0b9      	BREQ __CFD15
                 __CFD18:
000eb2 0fee      	LSL  R30
000eb3 1fff      	ROL  R31
000eb4 1f66      	ROL  R22
000eb5 1f77      	ROL  R23
000eb6 955a      	DEC  R21
000eb7 f7d1      	BRNE __CFD18
000eb8 c010      	RJMP __CFD15
                 __CFD11:
000eb9 2777      	CLR  R23
                 __CFD12:
000eba 3058      	CPI  R21,8
000ebb f028      	BRLO __CFD13
000ebc 2fef      	MOV  R30,R31
000ebd 2ff6      	MOV  R31,R22
000ebe 2f67      	MOV  R22,R23
000ebf 5058      	SUBI R21,8
000ec0 cff9      	RJMP __CFD12
                 __CFD13:
000ec1 2355      	TST  R21
000ec2 f031      	BREQ __CFD15
                 __CFD14:
000ec3 9576      	LSR  R23
000ec4 9567      	ROR  R22
000ec5 95f7      	ROR  R31
000ec6 95e7      	ROR  R30
000ec7 955a      	DEC  R21
000ec8 f7d1      	BRNE __CFD14
                 __CFD15:
000ec9 2000      	TST  R0
000eca f40a      	BRPL __CFD16
000ecb d14e      	RCALL __ANEGD1
                 __CFD16:
000ecc 915f      	POP  R21
000ecd 9508      	RET
                 
                 __CDF1U:
000ece 9468      	SET
000ecf c001      	RJMP __CDF1U0
                 __CDF1:
000ed0 94e8      	CLT
                 __CDF1U0:
000ed1 9730      	SBIW R30,0
000ed2 4060      	SBCI R22,0
000ed3 4070      	SBCI R23,0
000ed4 f0b1      	BREQ __CDF10
000ed5 2400      	CLR  R0
000ed6 f026      	BRTS __CDF11
000ed7 2377      	TST  R23
000ed8 f412      	BRPL __CDF11
000ed9 9400      	COM  R0
000eda d13f      	RCALL __ANEGD1
                 __CDF11:
000edb 2e17      	MOV  R1,R23
000edc e17e      	LDI  R23,30
000edd 2011      	TST  R1
                 __CDF12:
000ede f032      	BRMI __CDF13
000edf 957a      	DEC  R23
000ee0 0fee      	LSL  R30
000ee1 1fff      	ROL  R31
000ee2 1f66      	ROL  R22
000ee3 1c11      	ROL  R1
000ee4 cff9      	RJMP __CDF12
                 __CDF13:
000ee5 2fef      	MOV  R30,R31
000ee6 2ff6      	MOV  R31,R22
000ee7 2d61      	MOV  R22,R1
000ee8 935f      	PUSH R21
000ee9 df8a      	RCALL __REPACK
000eea 915f      	POP  R21
                 __CDF10:
000eeb 9508      	RET
                 
                 __SWAPACC:
000eec 934f      	PUSH R20
000eed 01af      	MOVW R20,R30
000eee 01fd      	MOVW R30,R26
000eef 01da      	MOVW R26,R20
000ef0 01ab      	MOVW R20,R22
000ef1 01bc      	MOVW R22,R24
000ef2 01ca      	MOVW R24,R20
000ef3 2d40      	MOV  R20,R0
000ef4 2c01      	MOV  R0,R1
000ef5 2e14      	MOV  R1,R20
000ef6 914f      	POP  R20
000ef7 9508      	RET
                 
                 __UADD12:
000ef8 0fea      	ADD  R30,R26
000ef9 1ffb      	ADC  R31,R27
000efa 1f68      	ADC  R22,R24
000efb 9508      	RET
                 
                 __NEGMAN1:
000efc 95e0      	COM  R30
000efd 95f0      	COM  R31
000efe 9560      	COM  R22
000eff 5fef      	SUBI R30,-1
000f00 4fff      	SBCI R31,-1
000f01 4f6f      	SBCI R22,-1
000f02 9508      	RET
                 
                 __SUBF12:
000f03 935f      	PUSH R21
000f04 df81      	RCALL __UNPACK
000f05 3890      	CPI  R25,0x80
000f06 f171      	BREQ __ADDF129
000f07 e850      	LDI  R21,0x80
000f08 2615      	EOR  R1,R21
                 
000f09 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000f0a 935f      	PUSH R21
000f0b df7a      	RCALL __UNPACK
000f0c 3890      	CPI  R25,0x80
000f0d f139      	BREQ __ADDF129
                 
                 __ADDF120:
000f0e 3870      	CPI  R23,0x80
000f0f f121      	BREQ __ADDF128
                 __ADDF121:
000f10 2f57      	MOV  R21,R23
000f11 1b59      	SUB  R21,R25
000f12 f12b      	BRVS __ADDF1211
000f13 f412      	BRPL __ADDF122
000f14 dfd7      	RCALL __SWAPACC
000f15 cffa      	RJMP __ADDF121
                 __ADDF122:
000f16 3158      	CPI  R21,24
000f17 f018      	BRLO __ADDF123
000f18 27aa      	CLR  R26
000f19 27bb      	CLR  R27
000f1a 2788      	CLR  R24
                 __ADDF123:
000f1b 3058      	CPI  R21,8
000f1c f028      	BRLO __ADDF124
000f1d 2fab      	MOV  R26,R27
000f1e 2fb8      	MOV  R27,R24
000f1f 2788      	CLR  R24
000f20 5058      	SUBI R21,8
000f21 cff9      	RJMP __ADDF123
                 __ADDF124:
000f22 2355      	TST  R21
000f23 f029      	BREQ __ADDF126
                 __ADDF125:
000f24 9586      	LSR  R24
000f25 95b7      	ROR  R27
000f26 95a7      	ROR  R26
000f27 955a      	DEC  R21
000f28 f7d9      	BRNE __ADDF125
                 __ADDF126:
000f29 2d50      	MOV  R21,R0
000f2a 2551      	EOR  R21,R1
000f2b f072      	BRMI __ADDF127
000f2c dfcb      	RCALL __UADD12
000f2d f438      	BRCC __ADDF129
000f2e 9567      	ROR  R22
000f2f 95f7      	ROR  R31
000f30 95e7      	ROR  R30
000f31 9573      	INC  R23
000f32 f413      	BRVC __ADDF129
000f33 c020      	RJMP __MAXRES
                 __ADDF128:
000f34 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000f35 df3e      	RCALL __REPACK
000f36 915f      	POP  R21
000f37 9508      	RET
                 __ADDF1211:
000f38 f7d8      	BRCC __ADDF128
000f39 cffb      	RJMP __ADDF129
                 __ADDF127:
000f3a 1bea      	SUB  R30,R26
000f3b 0bfb      	SBC  R31,R27
000f3c 0b68      	SBC  R22,R24
000f3d f051      	BREQ __ZERORES
000f3e f410      	BRCC __ADDF1210
000f3f 9400      	COM  R0
000f40 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000f41 2366      	TST  R22
000f42 f392      	BRMI __ADDF129
000f43 0fee      	LSL  R30
000f44 1fff      	ROL  R31
000f45 1f66      	ROL  R22
000f46 957a      	DEC  R23
000f47 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000f48 27ee      	CLR  R30
000f49 27ff      	CLR  R31
000f4a 2766      	CLR  R22
000f4b 2777      	CLR  R23
000f4c 915f      	POP  R21
000f4d 9508      	RET
                 
                 __MINRES:
000f4e efef      	SER  R30
000f4f efff      	SER  R31
000f50 e76f      	LDI  R22,0x7F
000f51 ef7f      	SER  R23
000f52 915f      	POP  R21
000f53 9508      	RET
                 
                 __MAXRES:
000f54 efef      	SER  R30
000f55 efff      	SER  R31
000f56 e76f      	LDI  R22,0x7F
000f57 e77f      	LDI  R23,0x7F
000f58 915f      	POP  R21
000f59 9508      	RET
                 
                 __MULF12:
000f5a 935f      	PUSH R21
000f5b df2a      	RCALL __UNPACK
000f5c 3870      	CPI  R23,0x80
000f5d f351      	BREQ __ZERORES
000f5e 3890      	CPI  R25,0x80
000f5f f341      	BREQ __ZERORES
000f60 2401      	EOR  R0,R1
000f61 9408      	SEC
000f62 1f79      	ADC  R23,R25
000f63 f423      	BRVC __MULF124
000f64 f31c      	BRLT __ZERORES
                 __MULF125:
000f65 2000      	TST  R0
000f66 f33a      	BRMI __MINRES
000f67 cfec      	RJMP __MAXRES
                 __MULF124:
000f68 920f      	PUSH R0
000f69 931f      	PUSH R17
000f6a 932f      	PUSH R18
000f6b 933f      	PUSH R19
000f6c 934f      	PUSH R20
000f6d 2711      	CLR  R17
000f6e 2722      	CLR  R18
000f6f 2799      	CLR  R25
000f70 9f68      	MUL  R22,R24
000f71 01a0      	MOVW R20,R0
000f72 9f8f      	MUL  R24,R31
000f73 2d30      	MOV  R19,R0
000f74 0d41      	ADD  R20,R1
000f75 1f59      	ADC  R21,R25
000f76 9f6b      	MUL  R22,R27
000f77 0d30      	ADD  R19,R0
000f78 1d41      	ADC  R20,R1
000f79 1f59      	ADC  R21,R25
000f7a 9f8e      	MUL  R24,R30
000f7b d027      	RCALL __MULF126
000f7c 9fbf      	MUL  R27,R31
000f7d d025      	RCALL __MULF126
000f7e 9f6a      	MUL  R22,R26
000f7f d023      	RCALL __MULF126
000f80 9fbe      	MUL  R27,R30
000f81 d01d      	RCALL __MULF127
000f82 9faf      	MUL  R26,R31
000f83 d01b      	RCALL __MULF127
000f84 9fae      	MUL  R26,R30
000f85 0d11      	ADD  R17,R1
000f86 1f29      	ADC  R18,R25
000f87 1f39      	ADC  R19,R25
000f88 1f49      	ADC  R20,R25
000f89 1f59      	ADC  R21,R25
000f8a 2fe3      	MOV  R30,R19
000f8b 2ff4      	MOV  R31,R20
000f8c 2f65      	MOV  R22,R21
000f8d 2f52      	MOV  R21,R18
000f8e 914f      	POP  R20
000f8f 913f      	POP  R19
000f90 912f      	POP  R18
000f91 911f      	POP  R17
000f92 900f      	POP  R0
000f93 2366      	TST  R22
000f94 f02a      	BRMI __MULF122
000f95 0f55      	LSL  R21
000f96 1fee      	ROL  R30
000f97 1fff      	ROL  R31
000f98 1f66      	ROL  R22
000f99 c002      	RJMP __MULF123
                 __MULF122:
000f9a 9573      	INC  R23
000f9b f24b      	BRVS __MULF125
                 __MULF123:
000f9c decd      	RCALL __ROUND_REPACK
000f9d 915f      	POP  R21
000f9e 9508      	RET
                 
                 __MULF127:
000f9f 0d10      	ADD  R17,R0
000fa0 1d21      	ADC  R18,R1
000fa1 1f39      	ADC  R19,R25
000fa2 c002      	RJMP __MULF128
                 __MULF126:
000fa3 0d20      	ADD  R18,R0
000fa4 1d31      	ADC  R19,R1
                 __MULF128:
000fa5 1f49      	ADC  R20,R25
000fa6 1f59      	ADC  R21,R25
000fa7 9508      	RET
                 
                 __DIVF21:
000fa8 935f      	PUSH R21
000fa9 dedc      	RCALL __UNPACK
000faa 3870      	CPI  R23,0x80
000fab f421      	BRNE __DIVF210
000fac 2011      	TST  R1
                 __DIVF211:
000fad f40a      	BRPL __DIVF219
000fae cf9f      	RJMP __MINRES
                 __DIVF219:
000faf cfa4      	RJMP __MAXRES
                 __DIVF210:
000fb0 3890      	CPI  R25,0x80
000fb1 f409      	BRNE __DIVF218
                 __DIVF217:
000fb2 cf95      	RJMP __ZERORES
                 __DIVF218:
000fb3 2401      	EOR  R0,R1
000fb4 9408      	SEC
000fb5 0b97      	SBC  R25,R23
000fb6 f41b      	BRVC __DIVF216
000fb7 f3d4      	BRLT __DIVF217
000fb8 2000      	TST  R0
000fb9 cff3      	RJMP __DIVF211
                 __DIVF216:
000fba 2f79      	MOV  R23,R25
000fbb 931f      	PUSH R17
000fbc 932f      	PUSH R18
000fbd 933f      	PUSH R19
000fbe 934f      	PUSH R20
000fbf 2411      	CLR  R1
000fc0 2711      	CLR  R17
000fc1 2722      	CLR  R18
000fc2 2733      	CLR  R19
000fc3 2744      	CLR  R20
000fc4 2755      	CLR  R21
000fc5 e290      	LDI  R25,32
                 __DIVF212:
000fc6 17ae      	CP   R26,R30
000fc7 07bf      	CPC  R27,R31
000fc8 0786      	CPC  R24,R22
000fc9 0741      	CPC  R20,R17
000fca f030      	BRLO __DIVF213
000fcb 1bae      	SUB  R26,R30
000fcc 0bbf      	SBC  R27,R31
000fcd 0b86      	SBC  R24,R22
000fce 0b41      	SBC  R20,R17
000fcf 9408      	SEC
000fd0 c001      	RJMP __DIVF214
                 __DIVF213:
000fd1 9488      	CLC
                 __DIVF214:
000fd2 1f55      	ROL  R21
000fd3 1f22      	ROL  R18
000fd4 1f33      	ROL  R19
000fd5 1c11      	ROL  R1
000fd6 1faa      	ROL  R26
000fd7 1fbb      	ROL  R27
000fd8 1f88      	ROL  R24
000fd9 1f44      	ROL  R20
000fda 959a      	DEC  R25
000fdb f751      	BRNE __DIVF212
000fdc 01f9      	MOVW R30,R18
000fdd 2d61      	MOV  R22,R1
000fde 914f      	POP  R20
000fdf 913f      	POP  R19
000fe0 912f      	POP  R18
000fe1 911f      	POP  R17
000fe2 2366      	TST  R22
000fe3 f032      	BRMI __DIVF215
000fe4 0f55      	LSL  R21
000fe5 1fee      	ROL  R30
000fe6 1fff      	ROL  R31
000fe7 1f66      	ROL  R22
000fe8 957a      	DEC  R23
000fe9 f243      	BRVS __DIVF217
                 __DIVF215:
000fea de7f      	RCALL __ROUND_REPACK
000feb 915f      	POP  R21
000fec 9508      	RET
                 
                 __CMPF12:
000fed 2399      	TST  R25
000fee f09a      	BRMI __CMPF120
000fef 2377      	TST  R23
000ff0 f042      	BRMI __CMPF121
000ff1 1797      	CP   R25,R23
000ff2 f048      	BRLO __CMPF122
000ff3 f429      	BRNE __CMPF121
000ff4 17ae      	CP   R26,R30
000ff5 07bf      	CPC  R27,R31
000ff6 0786      	CPC  R24,R22
000ff7 f020      	BRLO __CMPF122
000ff8 f031      	BREQ __CMPF123
                 __CMPF121:
000ff9 9498      	CLZ
000ffa 9488      	CLC
000ffb 9508      	RET
                 __CMPF122:
000ffc 9498      	CLZ
000ffd 9408      	SEC
000ffe 9508      	RET
                 __CMPF123:
000fff 9418      	SEZ
001000 9488      	CLC
001001 9508      	RET
                 __CMPF120:
001002 2377      	TST  R23
001003 f7c2      	BRPL __CMPF122
001004 1797      	CP   R25,R23
001005 f398      	BRLO __CMPF121
001006 f7a9      	BRNE __CMPF122
001007 17ea      	CP   R30,R26
001008 07fb      	CPC  R31,R27
001009 0768      	CPC  R22,R24
00100a f388      	BRLO __CMPF122
00100b f399      	BREQ __CMPF123
00100c cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
00100d 2400      	CLR  R0
00100e 0daf      	ADD  R26,R15
00100f 1db0      	ADC  R27,R0
001010 9508      	RET
                 
                 __ADDD12:
001011 0fea      	ADD  R30,R26
001012 1ffb      	ADC  R31,R27
001013 1f68      	ADC  R22,R24
001014 1f79      	ADC  R23,R25
001015 9508      	RET
                 
                 __ANEGW1:
001016 95f1      	NEG  R31
001017 95e1      	NEG  R30
001018 40f0      	SBCI R31,0
001019 9508      	RET
                 
                 __ANEGD1:
00101a 95f0      	COM  R31
00101b 9560      	COM  R22
00101c 9570      	COM  R23
00101d 95e1      	NEG  R30
00101e 4fff      	SBCI R31,-1
00101f 4f6f      	SBCI R22,-1
001020 4f7f      	SBCI R23,-1
001021 9508      	RET
                 
                 __CWD1:
001022 2f6f      	MOV  R22,R31
001023 0f66      	ADD  R22,R22
001024 0b66      	SBC  R22,R22
001025 2f76      	MOV  R23,R22
001026 9508      	RET
                 
                 __MULW12U:
001027 9ffa      	MUL  R31,R26
001028 2df0      	MOV  R31,R0
001029 9feb      	MUL  R30,R27
00102a 0df0      	ADD  R31,R0
00102b 9fea      	MUL  R30,R26
00102c 2de0      	MOV  R30,R0
00102d 0df1      	ADD  R31,R1
00102e 9508      	RET
                 
                 __MULW12:
00102f d06d      	RCALL __CHKSIGNW
001030 dff6      	RCALL __MULW12U
001031 f40e      	BRTC __MULW121
001032 dfe3      	RCALL __ANEGW1
                 __MULW121:
001033 9508      	RET
                 
                 __DIVW21U:
001034 2400      	CLR  R0
001035 2411      	CLR  R1
001036 e190      	LDI  R25,16
                 __DIVW21U1:
001037 0faa      	LSL  R26
001038 1fbb      	ROL  R27
001039 1c00      	ROL  R0
00103a 1c11      	ROL  R1
00103b 1a0e      	SUB  R0,R30
00103c 0a1f      	SBC  R1,R31
00103d f418      	BRCC __DIVW21U2
00103e 0e0e      	ADD  R0,R30
00103f 1e1f      	ADC  R1,R31
001040 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001041 60a1      	SBR  R26,1
                 __DIVW21U3:
001042 959a      	DEC  R25
001043 f799      	BRNE __DIVW21U1
001044 01fd      	MOVW R30,R26
001045 01d0      	MOVW R26,R0
001046 9508      	RET
                 
                 __DIVW21:
001047 d055      	RCALL __CHKSIGNW
001048 dfeb      	RCALL __DIVW21U
001049 f40e      	BRTC __DIVW211
00104a dfcb      	RCALL __ANEGW1
                 __DIVW211:
00104b 9508      	RET
                 
                 __DIVD21U:
00104c 933f      	PUSH R19
00104d 934f      	PUSH R20
00104e 935f      	PUSH R21
00104f 2400      	CLR  R0
001050 2411      	CLR  R1
001051 2744      	CLR  R20
001052 2755      	CLR  R21
001053 e230      	LDI  R19,32
                 __DIVD21U1:
001054 0faa      	LSL  R26
001055 1fbb      	ROL  R27
001056 1f88      	ROL  R24
001057 1f99      	ROL  R25
001058 1c00      	ROL  R0
001059 1c11      	ROL  R1
00105a 1f44      	ROL  R20
00105b 1f55      	ROL  R21
00105c 1a0e      	SUB  R0,R30
00105d 0a1f      	SBC  R1,R31
00105e 0b46      	SBC  R20,R22
00105f 0b57      	SBC  R21,R23
001060 f428      	BRCC __DIVD21U2
001061 0e0e      	ADD  R0,R30
001062 1e1f      	ADC  R1,R31
001063 1f46      	ADC  R20,R22
001064 1f57      	ADC  R21,R23
001065 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001066 60a1      	SBR  R26,1
                 __DIVD21U3:
001067 953a      	DEC  R19
001068 f759      	BRNE __DIVD21U1
001069 01fd      	MOVW R30,R26
00106a 01bc      	MOVW R22,R24
00106b 01d0      	MOVW R26,R0
00106c 01ca      	MOVW R24,R20
00106d 915f      	POP  R21
00106e 914f      	POP  R20
00106f 913f      	POP  R19
001070 9508      	RET
                 
                 __MODW21:
001071 94e8      	CLT
001072 ffb7      	SBRS R27,7
001073 c004      	RJMP __MODW211
001074 95a0      	COM  R26
001075 95b0      	COM  R27
001076 9611      	ADIW R26,1
001077 9468      	SET
                 __MODW211:
001078 fdf7      	SBRC R31,7
001079 df9c      	RCALL __ANEGW1
00107a dfb9      	RCALL __DIVW21U
00107b 01fd      	MOVW R30,R26
00107c f40e      	BRTC __MODW212
00107d df98      	RCALL __ANEGW1
                 __MODW212:
00107e 9508      	RET
                 
                 __MANDW12:
00107f 94e8      	CLT
001080 fff7      	SBRS R31,7
001081 c002      	RJMP __MANDW121
001082 df93      	RCALL __ANEGW1
001083 9468      	SET
                 __MANDW121:
001084 23ea      	AND  R30,R26
001085 23fb      	AND  R31,R27
001086 f40e      	BRTC __MANDW122
001087 df8e      	RCALL __ANEGW1
                 __MANDW122:
001088 9508      	RET
                 
                 __MODD21:
001089 94e8      	CLT
00108a ff97      	SBRS R25,7
00108b c009      	RJMP __MODD211
00108c 95a0      	COM  R26
00108d 95b0      	COM  R27
00108e 9580      	COM  R24
00108f 9590      	COM  R25
001090 5faf      	SUBI R26,-1
001091 4fbf      	SBCI R27,-1
001092 4f8f      	SBCI R24,-1
001093 4f9f      	SBCI R25,-1
001094 9468      	SET
                 __MODD211:
001095 fd77      	SBRC R23,7
001096 df83      	RCALL __ANEGD1
001097 dfb4      	RCALL __DIVD21U
001098 01fd      	MOVW R30,R26
001099 01bc      	MOVW R22,R24
00109a f40e      	BRTC __MODD212
00109b df7e      	RCALL __ANEGD1
                 __MODD212:
00109c 9508      	RET
                 
                 __CHKSIGNW:
00109d 94e8      	CLT
00109e fff7      	SBRS R31,7
00109f c002      	RJMP __CHKSW1
0010a0 df75      	RCALL __ANEGW1
0010a1 9468      	SET
                 __CHKSW1:
0010a2 ffb7      	SBRS R27,7
0010a3 c006      	RJMP __CHKSW2
0010a4 95a0      	COM  R26
0010a5 95b0      	COM  R27
0010a6 9611      	ADIW R26,1
0010a7 f800      	BLD  R0,0
0010a8 9403      	INC  R0
0010a9 fa00      	BST  R0,0
                 __CHKSW2:
0010aa 9508      	RET
                 
                 __GETW1P:
0010ab 91ed      	LD   R30,X+
0010ac 91fc      	LD   R31,X
0010ad 9711      	SBIW R26,1
0010ae 9508      	RET
                 
                 __PUTDP1:
0010af 93ed      	ST   X+,R30
0010b0 93fd      	ST   X+,R31
0010b1 936d      	ST   X+,R22
0010b2 937c      	ST   X,R23
0010b3 9508      	RET
                 
                 __GETW1PF:
0010b4 9005      	LPM  R0,Z+
0010b5 91f4      	LPM  R31,Z
0010b6 2de0      	MOV  R30,R0
0010b7 9508      	RET
                 
                 __GETD1S0:
0010b8 81e8      	LD   R30,Y
0010b9 81f9      	LDD  R31,Y+1
0010ba 816a      	LDD  R22,Y+2
0010bb 817b      	LDD  R23,Y+3
0010bc 9508      	RET
                 
                 __GETD2S0:
0010bd 81a8      	LD   R26,Y
0010be 81b9      	LDD  R27,Y+1
0010bf 818a      	LDD  R24,Y+2
0010c0 819b      	LDD  R25,Y+3
0010c1 9508      	RET
                 
                 __PUTD1S0:
0010c2 83e8      	ST   Y,R30
0010c3 83f9      	STD  Y+1,R31
0010c4 836a      	STD  Y+2,R22
0010c5 837b      	STD  Y+3,R23
0010c6 9508      	RET
                 
                 __PUTPARD1:
0010c7 937a      	ST   -Y,R23
0010c8 936a      	ST   -Y,R22
0010c9 93fa      	ST   -Y,R31
0010ca 93ea      	ST   -Y,R30
0010cb 9508      	RET
                 
                 __PUTPARD2:
0010cc 939a      	ST   -Y,R25
0010cd 938a      	ST   -Y,R24
0010ce 93ba      	ST   -Y,R27
0010cf 93aa      	ST   -Y,R26
0010d0 9508      	RET
                 
                 __SWAPD12:
0010d1 2e18      	MOV  R1,R24
0010d2 2f86      	MOV  R24,R22
0010d3 2d61      	MOV  R22,R1
0010d4 2e19      	MOV  R1,R25
0010d5 2f97      	MOV  R25,R23
0010d6 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0010d7 2e1b      	MOV  R1,R27
0010d8 2fbf      	MOV  R27,R31
0010d9 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0010da 2e1a      	MOV  R1,R26
0010db 2fae      	MOV  R26,R30
0010dc 2de1      	MOV  R30,R1
0010dd 9508      	RET
                 
                 __CPD10:
0010de 9730      	SBIW R30,0
0010df 4060      	SBCI R22,0
0010e0 4070      	SBCI R23,0
0010e1 9508      	RET
                 
                 __CPD02:
0010e2 2400      	CLR  R0
0010e3 160a      	CP   R0,R26
0010e4 060b      	CPC  R0,R27
0010e5 0608      	CPC  R0,R24
0010e6 0609      	CPC  R0,R25
0010e7 9508      	RET
                 
                 __CPD12:
0010e8 17ea      	CP   R30,R26
0010e9 07fb      	CPC  R31,R27
0010ea 0768      	CPC  R22,R24
0010eb 0779      	CPC  R23,R25
0010ec 9508      	RET
                 
                 __SAVELOCR6:
0010ed 935a      	ST   -Y,R21
                 __SAVELOCR5:
0010ee 934a      	ST   -Y,R20
                 __SAVELOCR4:
0010ef 933a      	ST   -Y,R19
                 __SAVELOCR3:
0010f0 932a      	ST   -Y,R18
                 __SAVELOCR2:
0010f1 931a      	ST   -Y,R17
0010f2 930a      	ST   -Y,R16
0010f3 9508      	RET
                 
                 __LOADLOCR6:
0010f4 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0010f5 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0010f6 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0010f7 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0010f8 8119      	LDD  R17,Y+1
0010f9 8108      	LD   R16,Y
0010fa 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  63 r1 :  41 r2 :   1 r3 :   0 r4 :  23 r5 :  10 r6 :   4 r7 :   2 
r8 :   8 r9 :   3 r10:  10 r11:   3 r12:   5 r13:   1 r14:   0 r15:   6 
r16:  80 r17:  66 r18:  53 r19:  29 r20:  48 r21:  93 r22: 128 r23: 119 
r24:  97 r25:  79 r26: 401 r27: 206 r28:  34 r29:   1 r30: 735 r31: 319 
x  :  30 y  : 430 z  :  22 
Registers used: 33 out of 35 (94.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  37 add   :  28 
adiw  :  44 and   :   7 andi  :   9 asr   :   1 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   8 brcs  :   1 break :   0 breq  :  46 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  18 
brlt  :   7 brmi  :  10 brne  :  96 brpl  :   8 brsh  :   5 brtc  :   7 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   5 call  : 367 
cbi   :   6 cbr   :   1 clc   :   3 clh   :   0 cli   :   2 cln   :   0 
clr   :  53 cls   :   0 clt   :   7 clv   :   0 clz   :   2 com   :  16 
cp    :  25 cpc   :  66 cpi   :  89 cpse  :   0 dec   :  14 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   9 inc   :   3 jmp   :  52 ld    :  73 ldd   : 171 
ldi   : 567 lds   :  97 lpm   :  20 lsl   :  17 lsr   :   5 mov   :  59 
movw  : 108 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   3 ori   :  11 out   :  29 pop   :  40 push  :  40 rcall : 110 
ret   : 128 reti  :   3 rjmp  : 198 rol   :  37 ror   :  18 sbc   :  16 
sbci  :  30 sbi   :   6 sbic  :  14 sbis  :  15 sbiw  :  56 sbr   :   4 
sbrc  :   5 sbrs  :  16 sec   :   5 seh   :   0 sei   :   2 sen   :   0 
ser   :   8 ses   :   0 set   :   7 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 154 std   :  69 sts   : 127 sub   :  10 subi  :  47 
swap  :   1 tst   :  21 wdr   :   1 
Instructions used: 84 out of 117 (71.8%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0021f6   8178    516   8694  131072   6.6%
[.dseg] 0x000100 0x000626      0    294    294    4096   7.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 13 warnings
