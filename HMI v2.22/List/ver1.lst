
AVRASM ver. 2.1.30  C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.21\List\ver1.asm Tue Feb 04 19:53:21 2020

C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.21\List\ver1.asm(1061): warning: Register r4 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.21\List\ver1.asm(1062): warning: Register r6 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.21\List\ver1.asm(1063): warning: Register r8 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.21\List\ver1.asm(1064): warning: Register r10 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.21\List\ver1.asm(1065): warning: Register r13 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.21\List\ver1.asm(1066): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _msg=R4
                 	.DEF _xmitMsg=R6
                 	.DEF _rec=R8
                 	.DEF _rdata=R10
                 	.DEF _tx_wr_index0=R13
                 	.DEF _tx_rd_index0=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 019e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0253 	JMP  _ext_int4_isr
00000c 940c 0254 	JMP  _ext_int5_isr
00000e 940c 0255 	JMP  _ext_int6_isr
000010 940c 0256 	JMP  _ext_int7_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0257 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0292 	JMP  _timer3_ovf_isr
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x6:
00004f 01e5
000050 01e6
000051 01ef
000052 0202      	.DB  LOW(_noOp),HIGH(_noOp),LOW(_mainOn),HIGH(_mainOn),LOW(_mainOff),HIGH(_mainOff),LOW(_resetFault),HIGH(_resetFault)
000053 0209
000054 020c      	.DB  LOW(_readVolt),HIGH(_readVolt),LOW(_readAmp),HIGH(_readAmp)
                 _0xF:
000055 0213
000056 0214
000057 021d
000058 0223      	.DB  LOW(_rnoOp),HIGH(_rnoOp),LOW(_rmainOn),HIGH(_rmainOn),LOW(_rmainOff),HIGH(_rmainOff),LOW(_rresetFault),HIGH(_rresetFault)
000059 0229
00005a 023a      	.DB  LOW(_rreadVolt),HIGH(_rreadVolt),LOW(_rreadAmp),HIGH(_rreadAmp)
                 _0x29:
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.21\List\ver1.asm(1124): warning: .cseg .db misalignment - padding zero byte
00005b 0001      	.DB  0x1
                 _0x2A:
00005c 614d
00005d 6863
00005e 6e69
00005f 2065      	.DB  0x4D,0x61,0x63,0x68,0x69,0x6E,0x65,0x20
000060 203a
000061 464f
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.21\List\ver1.asm(1127): warning: .cseg .db misalignment - padding zero byte
000062 0046      	.DB  0x3A,0x20,0x4F,0x46,0x46
                 _0xA8:
000063 0000      	.DB  0x0,0x0
                 _0x0:
000064 6854
000065 2065
000066 7953
000067 7473      	.DB  0x54,0x68,0x65,0x20,0x53,0x79,0x73,0x74
000068 6d65
000069 6920
00006a 2073
00006b 7574      	.DB  0x65,0x6D,0x20,0x69,0x73,0x20,0x74,0x75
00006c 6e72
00006d 6e69
00006e 2067
00006f 6e6f      	.DB  0x72,0x6E,0x69,0x6E,0x67,0x20,0x6F,0x6E
000070 3c00
000071 3030
000072 3e31
000073 5400      	.DB  0x0,0x3C,0x30,0x30,0x31,0x3E,0x0,0x54
000074 6568
000075 5320
000076 7379
000077 6574      	.DB  0x68,0x65,0x20,0x53,0x79,0x73,0x74,0x65
000078 206d
000079 7369
00007a 7420
00007b 7275      	.DB  0x6D,0x20,0x69,0x73,0x20,0x74,0x75,0x72
00007c 696e
00007d 676e
00007e 6f20
00007f 6666      	.DB  0x6E,0x69,0x6E,0x67,0x20,0x6F,0x66,0x66
000080 3c00
000081 3030
000082 3e32
000083 5200      	.DB  0x0,0x3C,0x30,0x30,0x32,0x3E,0x0,0x52
000084 7365
000085 7465
000086 6974
000087 676e      	.DB  0x65,0x73,0x65,0x74,0x74,0x69,0x6E,0x67
000088 4620
000089 7561
00008a 746c
00008b 0073      	.DB  0x20,0x46,0x61,0x75,0x6C,0x74,0x73,0x0
00008c 303c
00008d 3330
00008e 003e
00008f 303c      	.DB  0x3C,0x30,0x30,0x33,0x3E,0x0,0x3C,0x30
000090 3430
000091 003e
000092 303c
000093 3530      	.DB  0x30,0x34,0x3E,0x0,0x3C,0x30,0x30,0x35
000094 003e
000095 6854
000096 2065
000097 7953      	.DB  0x3E,0x0,0x54,0x68,0x65,0x20,0x53,0x79
000098 7473
000099 6d65
00009a 6820
00009b 7361      	.DB  0x73,0x74,0x65,0x6D,0x20,0x68,0x61,0x73
00009c 7420
00009d 7275
00009e 656e
00009f 2064      	.DB  0x20,0x74,0x75,0x72,0x6E,0x65,0x64,0x20
0000a0 6e6f
0000a1 5400
0000a2 6568
0000a3 5320      	.DB  0x6F,0x6E,0x0,0x54,0x68,0x65,0x20,0x53
0000a4 7379
0000a5 6574
0000a6 206d
0000a7 6168      	.DB  0x79,0x73,0x74,0x65,0x6D,0x20,0x68,0x61
0000a8 2073
0000a9 7574
0000aa 6e72
0000ab 6465      	.DB  0x73,0x20,0x74,0x75,0x72,0x6E,0x65,0x64
0000ac 6f20
0000ad 6666
0000ae 4600
0000af 7561      	.DB  0x20,0x6F,0x66,0x66,0x0,0x46,0x61,0x75
0000b0 746c
0000b1 2073
0000b2 6168
0000b3 6576      	.DB  0x6C,0x74,0x73,0x20,0x68,0x61,0x76,0x65
0000b4 6220
0000b5 6565
0000b6 206e
0000b7 6572      	.DB  0x20,0x62,0x65,0x65,0x6E,0x20,0x72,0x65
0000b8 6573
0000b9 0074
0000ba 0020
0000bb 005e      	.DB  0x73,0x65,0x74,0x0,0x20,0x0,0x5E,0x0
0000bc 3025
0000bd 6433
0000be 2500
0000bf 3230      	.DB  0x25,0x30,0x33,0x64,0x0,0x25,0x30,0x32
0000c0 0064
0000c1 614d
0000c2 6e69
0000c3 5320      	.DB  0x64,0x0,0x4D,0x61,0x69,0x6E,0x20,0x53
0000c4 7263
0000c5 6565
0000c6 006e
0000c7 6f56      	.DB  0x63,0x72,0x65,0x65,0x6E,0x0,0x56,0x6F
0000c8 746c
0000c9 6761
0000ca 2065
0000cb 6573      	.DB  0x6C,0x74,0x61,0x67,0x65,0x20,0x73,0x65
0000cc 2074
0000cd 6f74
0000ce 003a
0000cf 0056      	.DB  0x74,0x20,0x74,0x6F,0x3A,0x0,0x56,0x0
0000d0 6553
0000d1 2074
0000d2 6176
0000d3 756c      	.DB  0x53,0x65,0x74,0x20,0x76,0x61,0x6C,0x75
0000d4 2065
0000d5 6873
0000d6 756f
0000d7 646c      	.DB  0x65,0x20,0x73,0x68,0x6F,0x75,0x6C,0x64
0000d8 6200
0000d9 2065
0000da 6562
0000db 7774      	.DB  0x0,0x62,0x65,0x20,0x62,0x65,0x74,0x77
0000dc 6565
0000dd 206e
0000de 3131
0000df 2d30      	.DB  0x65,0x65,0x6E,0x20,0x31,0x31,0x30,0x2D
0000e0 3100
0000e1 3533
0000e2 7620
0000e3 6c6f      	.DB  0x0,0x31,0x33,0x35,0x20,0x76,0x6F,0x6C
0000e4 7374
0000e5 4300
0000e6 7275
0000e7 6572      	.DB  0x74,0x73,0x0,0x43,0x75,0x72,0x72,0x65
0000e8 746e
0000e9 7320
0000ea 7465
0000eb 7420      	.DB  0x6E,0x74,0x20,0x73,0x65,0x74,0x20,0x74
0000ec 3a6f
0000ed 4100
0000ee 6200
0000ef 2065      	.DB  0x6F,0x3A,0x0,0x41,0x0,0x62,0x65,0x20
0000f0 6562
0000f1 7774
0000f2 6565
0000f3 206e      	.DB  0x62,0x65,0x74,0x77,0x65,0x65,0x6E,0x20
0000f4 3031
0000f5 002d
0000f6 3032
0000f7 6120      	.DB  0x31,0x30,0x2D,0x0,0x32,0x30,0x20,0x61
0000f8 706d
0000f9 0073
0000fa 6557
0000fb 636c      	.DB  0x6D,0x70,0x73,0x0,0x57,0x65,0x6C,0x63
0000fc 6d6f
0000fd 2065
0000fe 6f74
0000ff 4820      	.DB  0x6F,0x6D,0x65,0x20,0x74,0x6F,0x20,0x48
000100 494d
000101 5300
000102 7465
000103 5020      	.DB  0x4D,0x49,0x0,0x53,0x65,0x74,0x20,0x50
000104 7261
000105 6d61
000106 7465
000107 7265      	.DB  0x61,0x72,0x61,0x6D,0x65,0x74,0x65,0x72
000108 0073
000109 6553
00010a 736e
00010b 726f      	.DB  0x73,0x0,0x53,0x65,0x6E,0x73,0x6F,0x72
00010c 5620
00010d 6c61
00010e 6575
00010f 0073      	.DB  0x20,0x56,0x61,0x6C,0x75,0x65,0x73,0x0
000110 4150
000111 4152
000112 454d
000113 4554      	.DB  0x50,0x41,0x52,0x41,0x4D,0x45,0x54,0x45
000114 5352
000115 5600
000116 6c6f
000117 6174      	.DB  0x52,0x53,0x0,0x56,0x6F,0x6C,0x74,0x61
000118 6567
000119 2820
00011a 4f56
00011b 544c      	.DB  0x67,0x65,0x20,0x28,0x56,0x4F,0x4C,0x54
00011c 2953
00011d 4300
00011e 7275
00011f 6572      	.DB  0x53,0x29,0x0,0x43,0x75,0x72,0x72,0x65
000120 746e
000121 2820
000122 4d41
000123 5350      	.DB  0x6E,0x74,0x20,0x28,0x41,0x4D,0x50,0x53
000124 0029
000125 6553
000126 2074
000127 6f76      	.DB  0x29,0x0,0x53,0x65,0x74,0x20,0x76,0x6F
000128 746c
000129 6761
00012a 3a65
00012b 5300      	.DB  0x6C,0x74,0x61,0x67,0x65,0x3A,0x0,0x53
00012c 7465
00012d 6320
00012e 7275
00012f 6572      	.DB  0x65,0x74,0x20,0x63,0x75,0x72,0x72,0x65
000130 746e
000131 003a
000132 4553
000133 534e      	.DB  0x6E,0x74,0x3A,0x0,0x53,0x45,0x4E,0x53
000134 524f
000135 0053
000136 6e41
000137 6c61      	.DB  0x4F,0x52,0x53,0x0,0x41,0x6E,0x61,0x6C
000138 676f
000139 4400
00013a 6769
00013b 7469      	.DB  0x6F,0x67,0x0,0x44,0x69,0x67,0x69,0x74
00013c 6c61
00013d 5400
00013e 6568
00013f 6d72      	.DB  0x61,0x6C,0x0,0x54,0x68,0x65,0x72,0x6D
000140 636f
000141 756f
000142 6c70
000143 0065      	.DB  0x6F,0x63,0x6F,0x75,0x70,0x6C,0x65,0x0
000144 6f4e
000145 6620
000146 6e75
000147 7463      	.DB  0x4E,0x6F,0x20,0x66,0x75,0x6E,0x63,0x74
000148 6f69
000149 736e
00014a 2020
00014b 2020      	.DB  0x69,0x6F,0x6E,0x73,0x20,0x20,0x20,0x20
00014c 2020
00014d 2020
00014e 2020
00014f 6461      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x64
000150 6564
000151 2064
000152 6579
000153 0074      	.DB  0x64,0x65,0x64,0x20,0x79,0x65,0x74,0x0
000154 6843
000155 3a30
000156 4300
000157 3168      	.DB  0x43,0x68,0x30,0x3A,0x0,0x43,0x68,0x31
000158 003a
000159 6843
00015a 3a32
00015b 4300      	.DB  0x3A,0x0,0x43,0x68,0x32,0x3A,0x0,0x43
00015c 3368
00015d 003a
00015e 6843
00015f 3a34      	.DB  0x68,0x33,0x3A,0x0,0x43,0x68,0x34,0x3A
000160 4300
000161 3568
000162 003a
000163 6843      	.DB  0x0,0x43,0x68,0x35,0x3A,0x0,0x43,0x68
000164 3a36
000165 4300
000166 3768
000167 003a      	.DB  0x36,0x3A,0x0,0x43,0x68,0x37,0x3A,0x0
000168 7245
000169 6f72
00016a 2e72
00016b 5200      	.DB  0x45,0x72,0x72,0x6F,0x72,0x2E,0x0,0x52
00016c 7365
00016d 6174
00016e 7472
00016f 6e69      	.DB  0x65,0x73,0x74,0x61,0x72,0x74,0x69,0x6E
000170 2067
000171 6e69
000172 3520
000173 7320      	.DB  0x67,0x20,0x69,0x6E,0x20,0x35,0x20,0x73
000174 6365
000175 6e6f
000176 7364
000177 002e      	.DB  0x65,0x63,0x6F,0x6E,0x64,0x73,0x2E,0x0
                 _0x2020060:
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.21\List\ver1.asm(1201): warning: .cseg .db misalignment - padding zero byte
000178 0001      	.DB  0x1
                 _0x2020000:
000179 4e2d
00017a 4e41
00017b 4900
00017c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\anwar\OneDrive\Desktop\PDC\PDC battery charger\HMI v2.21\List\ver1.asm(1204): warning: .cseg .db misalignment - padding zero byte
00017d 0000      	.DB  0x0
                 _0x2060003:
00017e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00017f 000c      	.DW  0x0C
000180 054f      	.DW  _recFunc_G000
000181 00aa      	.DW  _0xF*2
                 
000182 0001      	.DW  0x01
000183 065c      	.DW  _Screen
000184 00b6      	.DW  _0x29*2
                 
000185 0010      	.DW  0x10
000186 0500      	.DW  _0x55
000187 018e      	.DW  _0x0*2+198
                 
000188 0010      	.DW  0x10
000189 0510      	.DW  _0x6E
00018a 01cb      	.DW  _0x0*2+259
                 
00018b 000f      	.DW  0x0F
00018c 0520      	.DW  _0x76
00018d 01f4      	.DW  _0x0*2+300
                 
00018e 0007      	.DW  0x07
00018f 052f      	.DW  _0x9B
000190 02d0      	.DW  _0x0*2+520
                 
000191 0019      	.DW  0x19
000192 0536      	.DW  _0x9B+7
000193 02d7      	.DW  _0x0*2+527
                 
000194 0002      	.DW  0x02
000195 000c      	.DW  0x0C
000196 00c6      	.DW  _0xA8*2
                 
000197 0001      	.DW  0x01
000198 067a      	.DW  __seed_G101
000199 02f0      	.DW  _0x2020060*2
                 
00019a 0002      	.DW  0x02
00019b 067e      	.DW  __base_y_G103
00019c 02fc      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
00019d 0000      	.DW  0
                 
                 __RESET:
00019e 94f8      	CLI
00019f 27ee      	CLR  R30
0001a0 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001a1 e0f1      	LDI  R31,1
0001a2 bff5      	OUT  MCUCR,R31
0001a3 bfe5      	OUT  MCUCR,R30
0001a4 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0001a6 e1f8      	LDI  R31,0x18
0001a7 bdf1      	OUT  WDTCR,R31
0001a8 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0001a9 e08d      	LDI  R24,(14-2)+1
0001aa e0a2      	LDI  R26,2
0001ab 27bb      	CLR  R27
                 __CLEAR_REG:
0001ac 93ed      	ST   X+,R30
0001ad 958a      	DEC  R24
0001ae f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001af e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001b0 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001b1 e0a0      	LDI  R26,LOW(__SRAM_START)
0001b2 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0001b3 93ed      	ST   X+,R30
0001b4 9701      	SBIW R24,1
0001b5 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001b6 efee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001b7 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001b8 9185      	LPM  R24,Z+
0001b9 9195      	LPM  R25,Z+
0001ba 9700      	SBIW R24,0
0001bb f061      	BREQ __GLOBAL_INI_END
0001bc 91a5      	LPM  R26,Z+
0001bd 91b5      	LPM  R27,Z+
0001be 9005      	LPM  R0,Z+
0001bf 9015      	LPM  R1,Z+
0001c0 01bf      	MOVW R22,R30
0001c1 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001c2 9005      	LPM  R0,Z+
0001c3 920d      	ST   X+,R0
0001c4 9701      	SBIW R24,1
0001c5 f7e1      	BRNE __GLOBAL_INI_LOOP
0001c6 01fb      	MOVW R30,R22
0001c7 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0001c8 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001c9 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001ca bfed      	OUT  SPL,R30
0001cb e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001cc bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001cd e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001ce e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001cf 940c 068b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <Math.h>
                 ;#include "commands.c"
                 ;/*
                 ; * commands.c
                 ; *
                 ; *  Created on: Jan 10, 2020
                 ; *      Author: Mr.Yash
                 ; */
                 ;
                 ;//#include <Serial.h>
                 ;#include <commands.h>
                 ;#include <alcd.h>
                 ;#include <ver1.h>
                 ;flash char *msg;
                 ;flash char *xmitMsg;
                 ;flash char *rec;
                 ;flash char *rdata;
                 ;
                 ;
                 ;    //commands will be given a 3 digit numeric code based on the button pressed;
                 ;    //Stored values for the particular option-
                 ;
                 ;    //    000-  noOp
                 ;    //    001-  mainOn
                 ;    //    002-  mainOff
                 ;    //    003-  resetFault
                 ;    //    004-  readVolt
                 ;    //    005-  readAmp
                 ;    //    006-
                 ;    //    007-
                 ;    //    008-
                 ;    //    009-
                 ;    //    010-
                 ;    //    011-
                 ;    //    012-
                 ;    //    013-
                 ;    //    014-
                 ;    //    015-
                 ;    //    016-
                 ;    //    017-
                 ;    //    018-
                 ;    //    019-
                 ;    //    020-
                 ;    //    021-
                 ;    //    022-
                 ;    //    023-
                 ;    //    024-
                 ;    //    025-
                 ;    //    026-
                 ;    //    027-
                 ;    //    028-
                 ;    //    029-
                 ;    //    030-
                 ;    //    031-
                 ;    //    032-
                 ;    //    033-
                 ;    //    034-
                 ;    //    035-
                 ;    //    036-
                 ;    //    037-
                 ;    //    038-
                 ;    //    039-
                 ;
                 ;void xmitString(flash char * xmitMsg)
                 ; 0000 0007 {
                 
                 	.CSEG
                 _xmitString:
                 ;    int i =0;
                 ;    for(i = 0;*(xmitMsg+i)!= '\0';i++)
0001d1 931a      	ST   -Y,R17
0001d2 930a      	ST   -Y,R16
                 ;	*xmitMsg -> Y+2
                 ;	i -> R16,R17
                +
0001d3 e000     +LDI R16 , LOW ( 0 )
0001d4 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001d5 e000     +LDI R16 , LOW ( 0 )
0001d6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4:
0001d7 940e 0b50 	CALL SUBOPT_0x0
0001d9 30e0      	CPI  R30,0
0001da f039      	BREQ _0x5
                 ;    {
                 ;         putchar(xmitMsg[i]);
0001db 940e 0b50 	CALL SUBOPT_0x0
0001dd 93ea      	ST   -Y,R30
0001de d093      	RCALL _putchar
                 ;
                 ;    }
                +
0001df 5f0f     +SUBI R16 , LOW ( - 1 )
0001e0 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001e1 cff5      	RJMP _0x4
                 _0x5:
                 ;
                 ;
                 ;
                 ;}
0001e2 8119      	LDD  R17,Y+1
0001e3 8108      	LDD  R16,Y+0
0001e4 c06c      	RJMP _0x212000F
                 ;
                 ;void noOp()
                 ;{
                 _noOp:
                 ;
                 ;}
0001e5 9508      	RET
                 ;
                 ;void mainOn()
                 ;{
                 _mainOn:
                 ;    lcd_clear();
0001e6 940e 0a98 	CALL _lcd_clear
                 ;    lcd_putsf("The System is turning on");
                +
0001e8 ece8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001e9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001ea 940e 0b57 	CALL SUBOPT_0x1
                 ;    xmitMsg ="<001>";
                +
0001ec eee1     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
0001ed e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
0001ee c008      	RJMP _0x2120011
                 ;    xmitString(xmitMsg);
                 ;    delay_ms(500);
                 ;
                 ;     lcd_clear();
                 ;
                 ;
                 ;}
                 ;
                 ;void mainOff()
                 ;{
                 _mainOff:
                 ;    lcd_clear();
0001ef 940e 0a98 	CALL _lcd_clear
                 ;    lcd_putsf("The System is turning off");
                +
0001f1 eee7     +LDI R30 , LOW ( 2 * _0x0 + ( 31 ) )
0001f2 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 31 ) )
                 	__POINTW1FN _0x0,31
0001f3 940e 0b57 	CALL SUBOPT_0x1
                 ;    xmitMsg = "<002>";
                +
0001f5 e0e1     +LDI R30 , LOW ( 2 * _0x0 + ( 57 ) )
0001f6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 57 ) )
                 	__POINTW1FN _0x0,57
                 _0x2120011:
0001f7 013f      	MOVW R6,R30
                 ;    xmitString(xmitMsg);
0001f8 927a      	ST   -Y,R7
0001f9 926a      	ST   -Y,R6
0001fa dfd6      	RCALL _xmitString
                 ;    delay_ms(500);
0001fb efe4      	LDI  R30,LOW(500)
0001fc e0f1      	LDI  R31,HIGH(500)
0001fd 940e 0b5b 	CALL SUBOPT_0x2
                 ;    lcd_clear();
0001ff 940e 0a98 	CALL _lcd_clear
                 ;}
000201 9508      	RET
                 ;
                 ;void resetFault()
                 ;{
                 _resetFault:
                 ;    lcd_putsf("Resetting Faults");
                +
000202 e0e7     +LDI R30 , LOW ( 2 * _0x0 + ( 63 ) )
000203 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 63 ) )
                 	__POINTW1FN _0x0,63
000204 940e 0b57 	CALL SUBOPT_0x1
                 ;    xmitMsg = "<003>";
                +
000206 e1e8     +LDI R30 , LOW ( 2 * _0x0 + ( 80 ) )
000207 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 80 ) )
                 	__POINTW1FN _0x0,80
000208 c005      	RJMP _0x2120010
                 ;    xmitString(xmitMsg);
                 ;
                 ;}
                 ;
                 ;void readVolt()
                 ;{
                 _readVolt:
                 ;    xmitMsg = "<004>";
                +
000209 e1ee     +LDI R30 , LOW ( 2 * _0x0 + ( 86 ) )
00020a e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 86 ) )
                 	__POINTW1FN _0x0,86
00020b c002      	RJMP _0x2120010
                 ;    xmitString(xmitMsg);
                 ;    //voltVal = recVolt();
                 ;    //msg = sprintf("\nVoltage is: %d",voltVal);
                 ;    //lcd_putsf(msg);
                 ;
                 ;}
                 ;
                 ;void readAmp()
                 ;{
                 _readAmp:
                 ;    xmitMsg = "<005>";
                +
00020c e2e4     +LDI R30 , LOW ( 2 * _0x0 + ( 92 ) )
00020d e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 92 ) )
                 	__POINTW1FN _0x0,92
                 _0x2120010:
00020e 013f      	MOVW R6,R30
                 ;    xmitString(xmitMsg);
00020f 927a      	ST   -Y,R7
000210 926a      	ST   -Y,R6
000211 dfbf      	RCALL _xmitString
                 ;    //ampVal = recAmp();
                 ;    //msg = sprintf("\nCurrent is: %d",ampVal);
                 ;    //lcd_putsf(msg);
                 ;}
000212 9508      	RET
                 ;
                 ;static void (*xmitFunc[100])() = {
                 ;    noOp,mainOn,mainOff,resetFault,readVolt,readAmp
                 ;    };
                 
                 	.DSEG
                 ;
                 ;
                 ;
                 ;
                 ;//On receiving response from the TMS, further actions are taken by recFunc array
                 ;void rnoOp()
                 ;{
                 
                 	.CSEG
                 _rnoOp:
                 ;
                 ;}
000213 9508      	RET
                 ;
                 ;
                 ;void rmainOn()
                 ;{
                 _rmainOn:
                 ;    flash char*msg ="The System has turned on";
                 ;    lcd_putsf(msg);                            //function to display message on the lcd
000214 931a      	ST   -Y,R17
000215 930a      	ST   -Y,R16
                 ;	*msg -> R16,R17
000216 931a      	ST   -Y,R17
000217 930a      	ST   -Y,R16
000218 940e 0ad6 	CALL _lcd_putsf
                 ;
                 ;}
00021a 9109      	LD   R16,Y+
00021b 9119      	LD   R17,Y+
00021c 9508      	RET
                 ;
                 ;void rmainOff()
                 ;{
                 _rmainOff:
                 ;    msg = "The System has turned off";
                +
00021d e4e3     +LDI R30 , LOW ( 2 * _0x0 + ( 123 ) )
00021e e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW1FN _0x0,123
00021f 012f      	MOVW R4,R30
                 ;    lcd_putsf(msg);
000220 925a      	ST   -Y,R5
000221 924a      	ST   -Y,R4
000222 c0fb      	RJMP _0x212000C
                 ;
                 ;}
                 ;
                 ;void rresetFault()
                 ;{
                 _rresetFault:
                 ;    msg = "Faults have been reset";
                +
000223 e5ed     +LDI R30 , LOW ( 2 * _0x0 + ( 149 ) )
000224 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 149 ) )
                 	__POINTW1FN _0x0,149
000225 012f      	MOVW R4,R30
                 ;    lcd_putsf(msg);
000226 925a      	ST   -Y,R5
000227 924a      	ST   -Y,R4
000228 c0f5      	RJMP _0x212000C
                 ;
                 ;}
                 ;
                 ;void rreadVolt()
                 ;{
                 _rreadVolt:
                 ;    int i;flash char *tempRdata;
                 ;    for(i=5;*(rec+i-1)!='\0';i++)
000229 940e 1026 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	*tempRdata -> R18,R19
                +
00022b e005     +LDI R16 , LOW ( 5 )
00022c e010     +LDI R17 , HIGH ( 5 )
                 	__GETWRN 16,17,5
                 _0x8:
00022d 940e 0b5f 	CALL SUBOPT_0x3
00022f f049      	BREQ _0x9
                 ;    {
                 ;        tempRdata= (rec+i);
000230 940e 0b66 	CALL SUBOPT_0x4
                 ;        if(i==5)  rdata = tempRdata;
000232 f409      	BRNE _0xA
000233 0159      	MOVW R10,R18
                 ;        tempRdata++;
                 _0xA:
                +
000234 5f2f     +SUBI R18 , LOW ( - 1 )
000235 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
                +
000236 5f0f     +SUBI R16 , LOW ( - 1 )
000237 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000238 cff4      	RJMP _0x8
                 _0x9:
                 ;
                 ;    msg = rdata;
000239 c010      	RJMP _0x212000E
                 ;    lcd_putsf(msg);
                 ;
                 ;}
                 ;
                 ;void rreadAmp()
                 ;{
                 _rreadAmp:
                 ;    int i;flash char *tempRdata;
                 ;    for(i=5;*(rec+i-1)!='\0';i++)
00023a 940e 1026 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	*tempRdata -> R18,R19
                +
00023c e005     +LDI R16 , LOW ( 5 )
00023d e010     +LDI R17 , HIGH ( 5 )
                 	__GETWRN 16,17,5
                 _0xC:
00023e 940e 0b5f 	CALL SUBOPT_0x3
000240 f049      	BREQ _0xD
                 ;    {
                 ;        tempRdata= (rec+i);
000241 940e 0b66 	CALL SUBOPT_0x4
                 ;        if(i==5)  rdata = tempRdata;
000243 f409      	BRNE _0xE
000244 0159      	MOVW R10,R18
                 ;        tempRdata++;
                 _0xE:
                +
000245 5f2f     +SUBI R18 , LOW ( - 1 )
000246 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
                +
000247 5f0f     +SUBI R16 , LOW ( - 1 )
000248 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000249 cff4      	RJMP _0xC
                 _0xD:
                 ;    msg = rdata;
                 _0x212000E:
00024a 0125      	MOVW R4,R10
                 ;    lcd_putsf(msg);
00024b 925a      	ST   -Y,R5
00024c 924a      	ST   -Y,R4
00024d 940e 0ad6 	CALL _lcd_putsf
                 ;
                 ;}
00024f 940e 102d 	CALL __LOADLOCR4
                 _0x212000F:
000251 9624      	ADIW R28,4
000252 9508      	RET
                 ;
                 ;
                 ;static void (*recFunc[100])() = {rnoOp,rmainOn,rmainOff,rresetFault,rreadVolt,rreadAmp
                 ;    };
                 
                 	.DSEG
                 ;
                 ;
                 ;void recOp()
                 ;{
                 
                 	.CSEG
                 ;    char recArray[100];
                 ;    char cmd[3]={'','',''};
                 ;    int icmd = 0;
                 ;    int i = 0;
                 ;    //char tempRec[100];
                 ;    do
                 ;	recArray -> Y+7
                 ;	cmd -> Y+4
                 ;	icmd -> R16,R17
                 ;	i -> R18,R19
                 ;    {
                 ;        recArray[i++] = getchar();
                 ;
                 ;    }while(recArray[i]!='\0');
                 ;//    char *rec = "<001-anyData>";
                 ;    for(i=1;i<4;i++)
                 ;    {
                 ;       cmd[i-1] = *(recArray+i);
                 ;    }
                 ;
                 ;    icmd = cmd[2]-'0'+((cmd[1]-'0')*10)+((cmd[0]-'0')*100);
                 ;    recFunc[icmd]();
                 ;}
                 ;
                 ;
                 ;
                 ;// I2C Bus functions
                 ;#asm
                    .equ __i2c_port=0x12 ;PORTD
                    .equ __sda_bit=1
                    .equ __scl_bit=0
                 ; 0000 000D #endasm
                 ;
                 ;#include <i2c.h>
                 ;
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#include <alcd.h>
                 ;
                 ;// External Interrupt 4 service routine
                 ;interrupt [EXT_INT4] void ext_int4_isr(void)
                 ; 0000 0019 {
                 _ext_int4_isr:
                 ; 0000 001A 
                 ; 0000 001B 
                 ; 0000 001C }
000253 9518      	RETI
                 ;
                 ;// External Interrupt 5 service routine
                 ;interrupt [EXT_INT5] void ext_int5_isr(void)
                 ; 0000 0020 {
                 _ext_int5_isr:
                 ; 0000 0021 // Place your code here
                 ; 0000 0022 
                 ; 0000 0023 }
000254 9518      	RETI
                 ;
                 ;// External Interrupt 6 service routine
                 ;interrupt [EXT_INT6] void ext_int6_isr(void)
                 ; 0000 0027 {
                 _ext_int6_isr:
                 ; 0000 0028 // Place your code here
                 ; 0000 0029 
                 ; 0000 002A }
000255 9518      	RETI
                 ;
                 ;// External Interrupt 7 service routine
                 ;interrupt [EXT_INT7] void ext_int7_isr(void)
                 ; 0000 002E {
                 _ext_int7_isr:
                 ; 0000 002F // Place your code here
                 ; 0000 0030 
                 ; 0000 0031 }
000256 9518      	RETI
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;/*
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;
                 ;// Get a character from the USART1 Receiver
                 ;#pragma used+
                 ;char getchar(void)
                 ;{
                 ;char status,data;
                 ;while (1)
                 ;      {
                 ;      while (((status=UCSR0A) & RX_COMPLETE)==0);
                 ;      data=UDR0;
                 ;      if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
                 ;         return data;
                 ;      }
                 ;}
                 ;#pragma used-
                 ;
                 ;// Write a character to the USART1 Transmitter
                 ;#pragma used+
                 ;void putchar(char c)
                 ;{
                 ;while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
                 ;UDR0=c;
                 ;}
                 ;#pragma used-
                 ;                 */
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 64
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 008A {
                 _usart0_tx_isr:
000257 93ea      	ST   -Y,R30
000258 93fa      	ST   -Y,R31
000259 b7ef      	IN   R30,SREG
00025a 93ea      	ST   -Y,R30
                 ; 0000 008B if (tx_counter0)
00025b 91e0 0657 	LDS  R30,_tx_counter0
00025d 30e0      	CPI  R30,0
00025e f071      	BREQ _0x16
                 ; 0000 008C    {
                 ; 0000 008D    --tx_counter0;
00025f 50e1      	SUBI R30,LOW(1)
000260 93e0 0657 	STS  _tx_counter0,R30
                 ; 0000 008E    UDR0=tx_buffer0[tx_rd_index0++];
000262 2dec      	MOV  R30,R12
000263 94c3      	INC  R12
000264 e0f0      	LDI  R31,0
000265 5ee9      	SUBI R30,LOW(-_tx_buffer0)
000266 4ff9      	SBCI R31,HIGH(-_tx_buffer0)
000267 81e0      	LD   R30,Z
000268 b9ec      	OUT  0xC,R30
                 ; 0000 008F #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0090    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000269 e4e0      	LDI  R30,LOW(64)
00026a 15ec      	CP   R30,R12
00026b f409      	BRNE _0x17
00026c 24cc      	CLR  R12
                 ; 0000 0091 #endif
                 ; 0000 0092    }
                 _0x17:
                 ; 0000 0093 }
                 _0x16:
00026d 91e9      	LD   R30,Y+
00026e bfef      	OUT  SREG,R30
00026f 91f9      	LD   R31,Y+
000270 91e9      	LD   R30,Y+
000271 9518      	RETI
                 ;
                 ;
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 009C {
                 _putchar:
                 ; 0000 009D while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0x18:
000272 91a0 0657 	LDS  R26,_tx_counter0
000274 34a0      	CPI  R26,LOW(0x40)
000275 f3e1      	BREQ _0x18
                 ; 0000 009E #asm("cli")
000276 94f8      	cli
                 ; 0000 009F if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000277 91e0 0657 	LDS  R30,_tx_counter0
000279 30e0      	CPI  R30,0
00027a f411      	BRNE _0x1C
00027b 995d      	SBIC 0xB,5
00027c c011      	RJMP _0x1B
                 _0x1C:
                 ; 0000 00A0    {
                 ; 0000 00A1    tx_buffer0[tx_wr_index0++]=c;
00027d 2ded      	MOV  R30,R13
00027e 94d3      	INC  R13
00027f e0f0      	LDI  R31,0
000280 5ee9      	SUBI R30,LOW(-_tx_buffer0)
000281 4ff9      	SBCI R31,HIGH(-_tx_buffer0)
000282 81a8      	LD   R26,Y
000283 83a0      	STD  Z+0,R26
                 ; 0000 00A2 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00A3    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000284 e4e0      	LDI  R30,LOW(64)
000285 15ed      	CP   R30,R13
000286 f409      	BRNE _0x1E
000287 24dd      	CLR  R13
                 ; 0000 00A4 #endif
                 ; 0000 00A5    ++tx_counter0;
                 _0x1E:
000288 91e0 0657 	LDS  R30,_tx_counter0
00028a 5fef      	SUBI R30,-LOW(1)
00028b 93e0 0657 	STS  _tx_counter0,R30
                 ; 0000 00A6    }
                 ; 0000 00A7 else
00028d c002      	RJMP _0x1F
                 _0x1B:
                 ; 0000 00A8    UDR0=c;
00028e 81e8      	LD   R30,Y
00028f b9ec      	OUT  0xC,R30
                 ; 0000 00A9 #asm("sei")
                 _0x1F:
000290 9478      	sei
                 ; 0000 00AA }
000291 c05e      	RJMP _0x212000D
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;/*#define DATA_REGISTER_EMPTY (1<<UDRE0) //buffer change
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 8
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ;{
                 ;char status,data;
                 ;status=UCSR0A;
                 ;data=UDR0;
                 ;if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
                 ;   {
                 ;   rx_buffer0[rx_wr_index0++]=data;
                 ;#if RX_BUFFER_SIZE0 == 256
                 ;   // special case for receiver buffer size=256
                 ;   if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ;#else
                 ;   if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
                 ;   if (++rx_counter0 == RX_BUFFER_SIZE0)
                 ;      {
                 ;      rx_counter0=0;
                 ;      rx_buffer_overflow0=1;
                 ;      }
                 ;#endif
                 ; recOp();}
                 ;}
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ;{
                 ;char data;
                 ;while (rx_counter0==0);
                 ;data=rx_buffer0[rx_rd_index0++];
                 ;#if RX_BUFFER_SIZE0 != 256
                 ;if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ;#endif
                 ;#asm("cli")
                 ;--rx_counter0;
                 ;#asm("sei")
                 ;return data;
                 ;}
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ;{
                 ;if (tx_counter0)
                 ;   {
                 ;   --tx_counter0;
                 ;   UDR0=tx_buffer0[tx_rd_index0++];
                 ;#if TX_BUFFER_SIZE0 != 256
                 ;   if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
                 ;#endif
                 ;   }
                 ;}
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ;{
                 ;while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;#asm("cli")
                 ;if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
                 ;   {
                 ;   tx_buffer0[tx_wr_index0++]=c;
                 ;#if TX_BUFFER_SIZE0 != 256
                 ;   if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
                 ;#endif
                 ;   ++tx_counter0;
                 ;   }
                 ;else
                 ;   UDR0=c;
                 ;#asm("sei")
                 ;}
                 ;#pragma used-
                 ;#endif
                 ;
                 ;*/
                 ;short int on_button_state = 0x0000;
                 ;short int off_button_state = 0x0000;
                 ;
                 ;
                 ;// Timer3 overflow interrupt service routine
                 ;interrupt[TIM3_OVF] void timer3_ovf_isr(void) {
                 ; 0000 012D interrupt[30] void timer3_ovf_isr(void) {
                 _timer3_ovf_isr:
000292 920a      	ST   -Y,R0
000293 921a      	ST   -Y,R1
000294 92fa      	ST   -Y,R15
000295 936a      	ST   -Y,R22
000296 937a      	ST   -Y,R23
000297 938a      	ST   -Y,R24
000298 939a      	ST   -Y,R25
000299 93aa      	ST   -Y,R26
00029a 93ba      	ST   -Y,R27
00029b 93ea      	ST   -Y,R30
00029c 93fa      	ST   -Y,R31
00029d b7ef      	IN   R30,SREG
00029e 93ea      	ST   -Y,R30
                 ; 0000 012E 
                 ; 0000 012F     // ISR called every 8.595 msec when TCCRB = 0x09, and OCR3A = 0xFFFF
                 ; 0000 0130 
                 ; 0000 0131     // switch debounce logic. refer: https://www.embedded.com/electronics-blogs/break-points/4024981/My-favorite-software-debouncers
                 ; 0000 0132     // 16 bit shifts = approx 130msec debounce delay
                 ; 0000 0133 on_button_state = (0x8000 | !PIND.7) | (on_button_state << 1);
00029f e0e0      	LDI  R30,0
0002a0 9b87      	SBIS 0x10,7
0002a1 e0e1      	LDI  R30,1
0002a2 e0f0      	LDI  R31,0
0002a3 68f0      	ORI  R31,HIGH(0x8000)
0002a4 01df      	MOVW R26,R30
0002a5 91e0 0658 	LDS  R30,_on_button_state
0002a7 91f0 0659 	LDS  R31,_on_button_state+1
0002a9 0fee      	LSL  R30
0002aa 1fff      	ROL  R31
0002ab 2bea      	OR   R30,R26
0002ac 2bfb      	OR   R31,R27
0002ad 93e0 0658 	STS  _on_button_state,R30
0002af 93f0 0659 	STS  _on_button_state+1,R31
                 ; 0000 0134     if(on_button_state == 0xC000) {
0002b1 91a0 0658 	LDS  R26,_on_button_state
0002b3 91b0 0659 	LDS  R27,_on_button_state+1
0002b5 30a0      	CPI  R26,LOW(0xC000)
0002b6 ece0      	LDI  R30,HIGH(0xC000)
0002b7 07be      	CPC  R27,R30
0002b8 f411      	BRNE _0x20
                 ; 0000 0135        PORTC.3 = 0;
0002b9 98ab      	CBI  0x15,3
                 ; 0000 0136        mainOn();
0002ba df2b      	RCALL _mainOn
                 ; 0000 0137 
                 ; 0000 0138     }
                 ; 0000 0139 
                 ; 0000 013A     off_button_state = (0x8000 | !PIND.6) | (off_button_state << 1);
                 _0x20:
0002bb e0e0      	LDI  R30,0
0002bc 9b86      	SBIS 0x10,6
0002bd e0e1      	LDI  R30,1
0002be e0f0      	LDI  R31,0
0002bf 68f0      	ORI  R31,HIGH(0x8000)
0002c0 01df      	MOVW R26,R30
0002c1 91e0 065a 	LDS  R30,_off_button_state
0002c3 91f0 065b 	LDS  R31,_off_button_state+1
0002c5 0fee      	LSL  R30
0002c6 1fff      	ROL  R31
0002c7 2bea      	OR   R30,R26
0002c8 2bfb      	OR   R31,R27
0002c9 93e0 065a 	STS  _off_button_state,R30
0002cb 93f0 065b 	STS  _off_button_state+1,R31
                 ; 0000 013B     if(off_button_state == 0xC000 ) {
0002cd 91a0 065a 	LDS  R26,_off_button_state
0002cf 91b0 065b 	LDS  R27,_off_button_state+1
0002d1 30a0      	CPI  R26,LOW(0xC000)
0002d2 ece0      	LDI  R30,HIGH(0xC000)
0002d3 07be      	CPC  R27,R30
0002d4 f411      	BRNE _0x23
                 ; 0000 013C         PORTC.3 = 1;
0002d5 9aab      	SBI  0x15,3
                 ; 0000 013D         mainOff();
0002d6 df18      	RCALL _mainOff
                 ; 0000 013E     }
                 ; 0000 013F 
                 ; 0000 0140 
                 ; 0000 0141 }
                 _0x23:
0002d7 91e9      	LD   R30,Y+
0002d8 bfef      	OUT  SREG,R30
0002d9 91f9      	LD   R31,Y+
0002da 91e9      	LD   R30,Y+
0002db 91b9      	LD   R27,Y+
0002dc 91a9      	LD   R26,Y+
0002dd 9199      	LD   R25,Y+
0002de 9189      	LD   R24,Y+
0002df 9179      	LD   R23,Y+
0002e0 9169      	LD   R22,Y+
0002e1 90f9      	LD   R15,Y+
0002e2 9019      	LD   R1,Y+
0002e3 9009      	LD   R0,Y+
0002e4 9518      	RETI
                 ;
                 ;
                 ;#define ADC_VREF_TYPE 0x00
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0147 {
                 _read_adc:
                 ; 0000 0148 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
0002e5 81e8      	LD   R30,Y
0002e6 b9e7      	OUT  0x7,R30
                 ; 0000 0149 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 014A delay_us(10);
                +
0002e7 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0002e8 958a     +DEC R24
0002e9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 014B // Start the AD conversion
                 ; 0000 014C ADCSRA|=0x40;
0002ea 9a36      	SBI  0x6,6
                 ; 0000 014D // Wait for the AD conversion to complete
                 ; 0000 014E while ((ADCSRA & 0x10)==0);
                 _0x26:
0002eb 9b34      	SBIS 0x6,4
0002ec cffe      	RJMP _0x26
                 ; 0000 014F ADCSRA|=0x10;
0002ed 9a34      	SBI  0x6,4
                 ; 0000 0150 return ADCW;
0002ee b1e4      	IN   R30,0x4
0002ef b1f5      	IN   R31,0x4+1
                 _0x212000D:
0002f0 9621      	ADIW R28,1
0002f1 9508      	RET
                 ; 0000 0151 }
                 ;
                 ;
                 ;
                 ;// SPI functions
                 ;#include <spi.h>
                 ;//---------------THERMOCOUPLE------------
                 ;#include "Thermocouple.c"
                 ;//ThermoInit(void);
                 ;/*
                 ;/*
                 ; *  Define literals for the SPI port accesses and the thermocouple chip
                 ; *  select line.
                 ; */
                 ;#define  PORT_THERMO_CS           PORTE
                 ;#define  DDR_THERMO_CS            DDRE
                 ;#define  BIT_THERMO_CS            3
                 ;#define  MASK_THERMO_CS           (1<<BIT_THERMO_CS)
                 ;
                 ;#define  PORT_SPI                 PORTB
                 ;#define  DDR_SPI                  DDRB
                 ;#define  BIT_SPI_SCK              1
                 ;#define  MASK_SPI_SCK             (1<<BIT_SPI_SCK)
                 ;#define  BIT_SPI_SS               0
                 ;#define  MASK_SPI_SS              (1<<BIT_SPI_SS)
                 ;#define  BIT_SPI_MISO             3
                 ;#define  MASK_SPI_MISO            (1<<BIT_SPI_MISO)
                 ;
                 ;/*
                 ; *  ThermoInit      set up hardware for using the MAX31855
                 ; *
                 ; *  This routine configures the SPI as a master for exchanging
                 ; *  data with the MAX31855 thermocouple converter.  All pins
                 ; *  and registers for accessing the various port lines are
                 ; *  defined at the top of this code as named literals.
                 ; */
                 ;/*
                 ;void  ThermoInit(void)
                 ;{
                 ;    PORT_THERMO_CS |= MASK_THERMO_CS;        // start with CS high
                 ;    DDR_THERMO_CS |= MASK_THERMO_CS;         // now make that line an output
                 ;
                 ;    PORT_SPI |= MASK_SPI_SS;                 // SS* is not used but must be driven high
                 ;    DDR_SPI |= MASK_SPI_SS;                  // SS* is not used but must be driven high
                 ;    PORT_SPI &= ~MASK_SPI_SCK;               // drive SCK low
                 ;    DDR_SPI |= MASK_SPI_SCK;                 // now make SCK an output
                 ;
                 ;    SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0) | (1<<SPR1) | (1<<CPHA);
                 ;                                             // enable SPI as master, slowest clock,
                 ;                                             // data active on trailing edge of SCK
                 ;}
                 ;
                 ;
                 ;/*
                 ; *  ThermoReadRaw      return 32-bit raw value from MAX31855
                 ; *
                 ; *  This routine uses a four-byte SPI exchange to collect a
                 ; *  raw reading from the MAX31855 thermocouple converter.  That
                 ; *  value is returned unprocessed to the calling routine.
                 ; *
                 ; *  Note that this routine does NO processing.  It does not
                 ; *  check for error flags or reasonable data ranges.
                 ;
                 ;//  d = 0x01900000;            // thermocouple = +25C, reference = 0C, no faults
                 ;//  d = 0xfff00000;            // thermocouple = -1C, reference = 0C, no faults
                 ;//  d = 0xf0600000;            // thermocouple = -250C, reference = 0C, no faults
                 ;//  d = 0x00010001;            // thermocouple = N/A, reference = N/A, open fault
                 ;//  d = 0x00010002;            // thermocouple = N/A, reference = N/A, short to GND
                 ;//  d = 0x00010004;            // thermocouple = N/A, refernece = N/A, short to VCC
                 ;*/
                 ;
                 ;/*
                 ;signed int  ThermoReadRaw (void)
                 ;{
                 ;    signed int                   d;
                 ;    unsigned char                n;
                 ;
                 ;    PORT_THERMO_CS &= ~MASK_THERMO_CS;    // pull thermo CS low
                 ;    d = 0;                                // start with nothing
                 ;    for (n=3; n!=0xff; n--)
                 ;    {
                 ;        SPDR = 0;                         // send a null byte
                 ;        while ((SPSR & (1<<SPIF)) == 0)  ;    // wait until transfer ends
                 ;        d = (d<<8) + SPDR;                // add next byte, starting with MSB
                 ;    }
                 ;    PORT_THERMO_CS |= MASK_THERMO_CS;     // done, pull CS high
                 ;    return  d;
                 ;}
                 ;
                 ;/*
                 ; *  ThermoReadC      return thermocouple temperature in degrees C
                 ; *
                 ; *  This routine takes a raw reading from the thermocouple converter
                 ; *  and translates that value into a temperature in degrees C.  That
                 ; *  value is returned to the calling routine as an integer value,
                 ; *  rounded.
                 ; *
                 ; *  The thermocouple value is stored in bits 31-18 as a signed 14-bit
                 ; *  value, where the LSB represents 0.25 degC.  To convert to an
                 ; *  integer value with no intermediate float operations, this code
                 ; *  shifts the value 20 places right, rather than 18, effectively
                 ; *  dividing the raw value by 4 and scaling it to unit degrees.
                 ; *
                 ; *  Note that this routine does NOT check the error flags in the
                 ; *  raw value.  This would be a nice thing to add later, when I've
                 ; *  figured out how I want to propagate the error conditions...
                 ; */
                 ; /*
                 ;int  ThermoReadC(void)
                 ;{
                 ;    signed int d;
                 ;    int neg;
                 ;
                 ;
                 ;    neg = 0;                    // assume a positive raw value
                 ;    d = ThermoReadRaw();        // get a raw value
                 ;    d = ((d >> 10) & 0x3fff);   // leave only thermocouple value in d
                 ;    if (d & 0x2000)             // if thermocouple reading is negative...
                 ;    {
                 ;        d = -d & 0x3fff;        // always work with positive values
                 ;        neg = 1;                // but note original value was negative
                 ;    }
                 ;    d = d + 2;                  // round up by 0.5 degC (2 LSBs)
                 ;    d = d >> 2;                 // now convert from 0.25 degC units to degC
                 ;    if (neg)  d = -d;           // convert to negative if needed
                 ;    return  d;                  // return as integer
                 ;}
                 ;   */
                 ;
                 ;/*
                 ; *  ThermoReadF      return thermocouple temperature in degrees F
                 ; *
                 ; *  This routine takes a reading from the thermocouple converter in
                 ; *  degC and converts it to degF.
                 ; *
                 ; *  Note that this routine simply calls ThermoReadC and converts
                 ; *  from degC to degF using integer math.  This routine does not
                 ; *  see the raw converter value and cannot do any error checking.
                 ; */
                 ;/*int  ThermoReadF(void)
                 ;{
                 ;    int t;
                 ;
                 ;    t = ThermoReadC();           // get the value in degC
                 ;    t = ((t * 90) / 50) + 32;    // convert to degF
                 ;    return  t;                   // all done
                 ;}*/
                 ;
                 ;
                 ;//---------------Variables---------------
                 ;#include <variables.h>
                 
                 	.DSEG
                 ;//-------------Display Functions---------
                 ;#include "Display_functions.c"
                 ;//#include <variables.h>
                 ;
                 ;void pointer_display_horiz()                          //checks the cursor position.
                 ; 0000 015C {
                 
                 	.CSEG
                 _pointer_display_horiz:
                 ;    lcd_gotoxy(0,2);
0002f2 940e 0b6f 	CALL SUBOPT_0x5
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(1,2);
0002f4 940e 0b78 	CALL SUBOPT_0x6
                 ;    lcd_putsf(" ");
0002f6 940e 0b7e 	CALL SUBOPT_0x7
                 ;    lcd_gotoxy(2,2);
0002f8 e0e2      	LDI  R30,LOW(2)
0002f9 940e 0b81 	CALL SUBOPT_0x8
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(3,2);
0002fb e0e3      	LDI  R30,LOW(3)
0002fc 940e 0b81 	CALL SUBOPT_0x8
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(Pointer_horiz,2);                      //Pointer displays arrow at that position
0002fe 91e0 0660 	LDS  R30,_Pointer_horiz
000300 940e 0b87 	CALL SUBOPT_0x9
                 ;    lcd_putsf("^");
                +
000302 e7e6     +LDI R30 , LOW ( 2 * _0x0 + ( 174 ) )
000303 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 174 ) )
                 	__POINTW1FN _0x0,174
000304 c017      	RJMP _0x212000B
                 ;}
                 ;
                 ;void pointer_display_vert()                          //checks the cursor position.
                 ;{
                 _pointer_display_vert:
                 ;    lcd_gotoxy(0,0);
000305 940e 0b8c 	CALL SUBOPT_0xA
                 ;    lcd_putsf(" ");
000307 940e 0b7e 	CALL SUBOPT_0x7
                 ;    lcd_gotoxy(0,1);
000309 940e 0b91 	CALL SUBOPT_0xB
                 ;    lcd_putsf(" ");
00030b 940e 0b7e 	CALL SUBOPT_0x7
                 ;    lcd_gotoxy(0,2);
00030d 940e 0b6f 	CALL SUBOPT_0x5
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(0,3);
00030f 940e 0b97 	CALL SUBOPT_0xC
                 ;    lcd_putsf(" ");
000311 940e 0b7e 	CALL SUBOPT_0x7
                 ;    lcd_gotoxy(0,Pointer_vert);                      //Pointer displays arrow at that position
000313 e0e0      	LDI  R30,LOW(0)
000314 93ea      	ST   -Y,R30
000315 91e0 0662 	LDS  R30,_Pointer_vert
000317 93ea      	ST   -Y,R30
000318 940e 0a87 	CALL _lcd_gotoxy
                 ;    lcd_putsf(">");
                +
00031a eee5     +LDI R30 , LOW ( 2 * _0x0 + ( 29 ) )
00031b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW1FN _0x0,29
                 _0x212000B:
00031c 93fa      	ST   -Y,R31
00031d 93ea      	ST   -Y,R30
                 _0x212000C:
00031e 940e 0ad6 	CALL _lcd_putsf
                 ;}
000320 9508      	RET
                 ;
                 ;
                 ;
                 ;void show_volt()
                 ;{
                 _show_volt:
                 ;    sprintf(disp_volt,"%03d",voltage);
000321 e7e4      	LDI  R30,LOW(_disp_volt)
000322 e0f6      	LDI  R31,HIGH(_disp_volt)
000323 940e 0b9d 	CALL SUBOPT_0xD
000325 940e 0ba4 	CALL SUBOPT_0xE
000327 940e 0bad 	CALL SUBOPT_0xF
                 ;    lcd_gotoxy(0,1);
                 ;    lcd_puts(disp_volt);
000329 e7e4      	LDI  R30,LOW(_disp_volt)
00032a e0f6      	LDI  R31,HIGH(_disp_volt)
00032b c00e      	RJMP _0x212000A
                 ;}
                 ;void show_current()
                 ;{
                 _show_current:
                 ;    sprintf(disp_current,"%02d",current);
00032c e7e7      	LDI  R30,LOW(_disp_current)
00032d e0f6      	LDI  R31,HIGH(_disp_current)
00032e 93fa      	ST   -Y,R31
00032f 93ea      	ST   -Y,R30
                +
000330 e7ed     +LDI R30 , LOW ( 2 * _0x0 + ( 181 ) )
000331 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 181 ) )
                 	__POINTW1FN _0x0,181
000332 93fa      	ST   -Y,R31
000333 93ea      	ST   -Y,R30
000334 940e 0bb4 	CALL SUBOPT_0x10
000336 940e 0bad 	CALL SUBOPT_0xF
                 ;    lcd_gotoxy(0,1);
                 ;    lcd_puts(disp_current);
000338 e7e7      	LDI  R30,LOW(_disp_current)
000339 e0f6      	LDI  R31,HIGH(_disp_current)
                 _0x212000A:
00033a 93fa      	ST   -Y,R31
00033b 93ea      	ST   -Y,R30
00033c 940e 0ac8 	CALL _lcd_puts
                 ;}
00033e 9508      	RET
                 ;
                 ;//----Input and val change functions-----
                 ;#include "Change.c"
                 ;#include "Inputs.c"
                 ;//#include <variables.h>
                 ;
                 ;
                 ;
                 ;void input(int next)                         //next recieves value no of options we will have in the next menu
                 ; 0000 015F {
                 _input:
                 ;    Pt = Pointer_vert;
                 ;	next -> Y+0
00033f 91e0 0662 	LDS  R30,_Pointer_vert
000341 91f0 0663 	LDS  R31,_Pointer_vert+1
000343 93e0 0664 	STS  _Pt,R30
000345 93f0 0665 	STS  _Pt+1,R31
                 ;    pointer_display_vert();
000347 dfbd      	RCALL _pointer_display_vert
                 ;    delay_ms(100);
000348 940e 0bbd 	CALL SUBOPT_0x11
                 ;    if (PINE.2 == 0)                                            //UP
00034a 990a      	SBIC 0x1,2
00034b c01f      	RJMP _0x2B
                 ;       {
                 ;        while(PINE.2 == 0);
                 _0x2C:
00034c 9b0a      	SBIS 0x1,2
00034d cffe      	RJMP _0x2C
                 ;        Pt--;
00034e e6a4      	LDI  R26,LOW(_Pt)
00034f e0b6      	LDI  R27,HIGH(_Pt)
000350 91ed      	LD   R30,X+
000351 91fd      	LD   R31,X+
000352 9731      	SBIW R30,1
000353 93fe      	ST   -X,R31
000354 93ee      	ST   -X,R30
                 ;        Pointer_vert = ((Pt < 0) ? (next+Pt): Pt) % next;
000355 91a0 0665 	LDS  R26,_Pt+1
000357 23aa      	TST  R26
000358 f44a      	BRPL _0x2F
000359 91e0 0664 	LDS  R30,_Pt
00035b 91f0 0665 	LDS  R31,_Pt+1
00035d 81a8      	LD   R26,Y
00035e 81b9      	LDD  R27,Y+1
00035f 0fea      	ADD  R30,R26
000360 1ffb      	ADC  R31,R27
000361 c004      	RJMP _0x30
                 _0x2F:
000362 91e0 0664 	LDS  R30,_Pt
000364 91f0 0665 	LDS  R31,_Pt+1
                 _0x30:
000366 01df      	MOVW R26,R30
000367 81e8      	LD   R30,Y
000368 81f9      	LDD  R31,Y+1
000369 940e 0bc0 	CALL SUBOPT_0x12
                 ;        pointer_display_vert();
                 ;       }
                 ;
                 ;    if (PINE.3 == 0)                                            //DOWN
                 _0x2B:
00036b 990b      	SBIC 0x1,3
00036c c00e      	RJMP _0x32
                 ;       {
                 ;        while(PINE.3 == 0);
                 _0x33:
00036d 9b0b      	SBIS 0x1,3
00036e cffe      	RJMP _0x33
                 ;        Pointer_vert++;
00036f e6a2      	LDI  R26,LOW(_Pointer_vert)
000370 e0b6      	LDI  R27,HIGH(_Pointer_vert)
000371 940e 0bc8 	CALL SUBOPT_0x13
                 ;        Pointer_vert = Pointer_vert % next;
000373 81e8      	LD   R30,Y
000374 81f9      	LDD  R31,Y+1
000375 91a0 0662 	LDS  R26,_Pointer_vert
000377 91b0 0663 	LDS  R27,_Pointer_vert+1
000379 940e 0bc0 	CALL SUBOPT_0x12
                 ;        pointer_display_vert();
                 ;       }
                 ;
                 ;    if (PINE.0 == 0)                                            //ENTER
                 _0x32:
00037b 9908      	SBIC 0x1,0
00037c c018      	RJMP _0x36
                 ;       {
                 ;        while(PINE.0 == 0);
                 _0x37:
00037d 9b08      	SBIS 0x1,0
00037e cffe      	RJMP _0x37
                 ;        if(Screen < 10)
00037f 940e 0bce 	CALL SUBOPT_0x14
000381 971a      	SBIW R26,10
000382 f424      	BRGE _0x3A
                 ;        {
                 ;            Screen = ((Screen+1)*10) + Pointer_vert;
000383 940e 0bd3 	CALL SUBOPT_0x15
000385 9631      	ADIW R30,1
000386 c002      	RJMP _0xA0
                 ;        }
                 ;        else
                 _0x3A:
                 ;        {
                 ;            Screen = ((Screen)*10) + Pointer_vert;
000387 940e 0bd3 	CALL SUBOPT_0x15
                 _0xA0:
000389 e0aa      	LDI  R26,LOW(10)
00038a e0b0      	LDI  R27,HIGH(10)
00038b 940e 0f7a 	CALL __MULW12
00038d 91a0 0662 	LDS  R26,_Pointer_vert
00038f 91b0 0663 	LDS  R27,_Pointer_vert+1
000391 0fea      	ADD  R30,R26
000392 1ffb      	ADC  R31,R27
000393 940e 0bd8 	CALL SUBOPT_0x16
                 ;        }
                 ;
                 ;
                 ;       }
                 ;
                 ;    if (PINE.1 == 0)                                            //ESCAPE
                 _0x36:
000395 9909      	SBIC 0x1,1
000396 c02d      	RJMP _0x3C
                 ;       {
                 ;        while(PINE.1 == 0);
                 _0x3D:
000397 9b09      	SBIS 0x1,1
000398 cffe      	RJMP _0x3D
                 ;
                 ;            if (Screen == 2)
000399 940e 0bce 	CALL SUBOPT_0x14
00039b 9712      	SBIW R26,2
00039c f4d1      	BRNE _0x40
                 ;            {
                 ;              lcd_clear();
00039d 940e 0bdd 	CALL SUBOPT_0x17
                 ;              lcd_gotoxy(0,0);
                 ;              lcd_putsf("Main Screen");
                +
00039f e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 186 ) )
0003a0 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 186 ) )
                 	__POINTW1FN _0x0,186
0003a1 940e 0b57 	CALL SUBOPT_0x1
                 ;              delay_ms(1000);
0003a3 940e 0be0 	CALL SUBOPT_0x18
                 ;              main_screen_trigger = 1;
0003a5 e0e1      	LDI  R30,LOW(1)
0003a6 e0f0      	LDI  R31,HIGH(1)
0003a7 93e0 0672 	STS  _main_screen_trigger,R30
0003a9 93f0 0673 	STS  _main_screen_trigger+1,R31
                 ;              Current_Screen = 0;
0003ab e0e0      	LDI  R30,LOW(0)
0003ac 93e0 065e 	STS  _Current_Screen,R30
0003ae 93e0 065f 	STS  _Current_Screen+1,R30
                 ;              set_flag = 1;
0003b0 e0e1      	LDI  R30,LOW(1)
0003b1 e0f0      	LDI  R31,HIGH(1)
0003b2 93e0 066e 	STS  _set_flag,R30
0003b4 93f0 066f 	STS  _set_flag+1,R31
                 ;              //Screen = 2;
                 ;            }
                 ;            else if(Screen > 100)
0003b6 c00d      	RJMP _0x41
                 _0x40:
0003b7 940e 0be3 	CALL SUBOPT_0x19
0003b9 f01c      	BRLT _0x42
                 ;            {
                 ;                Screen = Screen/10;
0003ba 940e 0be8 	CALL SUBOPT_0x1A
0003bc c003      	RJMP _0xA1
                 ;            }
                 ;            else
                 _0x42:
                 ;            {
                 ;                Screen = (Screen/10)-1;
0003bd 940e 0be8 	CALL SUBOPT_0x1A
0003bf 9731      	SBIW R30,1
                 _0xA1:
0003c0 93e0 065c 	STS  _Screen,R30
0003c2 93f0 065d 	STS  _Screen+1,R31
                 ;            }
                 _0x41:
                 ;
                 ;
                 ;       }
                 ;
                 ;}
                 _0x3C:
0003c4 9622      	ADIW R28,2
0003c5 9508      	RET
                 ;
                 ;
                 ;void input_volt(int next)
                 ;{
                 _input_volt:
                 ;    int change = pow(10,(next-Pointer_horiz-1));
                 ;    pointer_display_horiz();
0003c6 940e 0bee 	CALL SUBOPT_0x1B
                 ;	next -> Y+2
                 ;	change -> R16,R17
                 ;    delay_ms(100);
                 ;    if (PINE.2 == 0)                                            //UP     1
0003c8 990a      	SBIC 0x1,2
0003c9 c01d      	RJMP _0x44
                 ;       {
                 ;        while(PINE.2 == 0);
                 _0x45:
0003ca 9b0a      	SBIS 0x1,2
0003cb cffe      	RJMP _0x45
                 ;        if(change == 1)
0003cc e0e1      	LDI  R30,LOW(1)
0003cd e0f0      	LDI  R31,HIGH(1)
0003ce 17e0      	CP   R30,R16
0003cf 07f1      	CPC  R31,R17
0003d0 f421      	BRNE _0x48
                 ;        {voltage = voltage + (change);}
0003d1 01f8      	MOVW R30,R16
0003d2 940e 0c0d 	CALL SUBOPT_0x1C
0003d4 c004      	RJMP _0xA2
                 ;        else
                 _0x48:
                 ;        {voltage = voltage + 1 + (change);}
0003d5 940e 0ba4 	CALL SUBOPT_0xE
0003d7 940e 0c16 	CALL SUBOPT_0x1D
                 _0xA2:
0003d9 940e 0f6d 	CALL __CWD1
0003db 940e 0f57 	CALL __ADDD12
0003dd 940e 0c1e 	CALL SUBOPT_0x1E
                 ;        voltage = voltage % 1000;
0003df 940e 0c0d 	CALL SUBOPT_0x1C
0003e1 940e 0c27 	CALL SUBOPT_0x1F
0003e3 940e 0c1e 	CALL SUBOPT_0x1E
                 ;        show_volt();
0003e5 df3b      	RCALL _show_volt
                 ;        pointer_display_horiz();
0003e6 df0b      	RCALL _pointer_display_horiz
                 ;       }
                 ;
                 ;    if (PINE.3 == 0)                                            //Next   2
                 _0x44:
0003e7 990b      	SBIC 0x1,3
0003e8 c008      	RJMP _0x4A
                 ;       {
                 ;        while(PINE.3 == 0);
                 _0x4B:
0003e9 9b0b      	SBIS 0x1,3
0003ea cffe      	RJMP _0x4B
                 ;        Pointer_horiz++;
0003eb e6a0      	LDI  R26,LOW(_Pointer_horiz)
0003ec e0b6      	LDI  R27,HIGH(_Pointer_horiz)
0003ed 940e 0bc8 	CALL SUBOPT_0x13
                 ;
                 ;        Pointer_horiz = Pointer_horiz % next;
0003ef 940e 0c2e 	CALL SUBOPT_0x20
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINE.0 == 0)                                             //ENTER 3
                 _0x4A:
0003f1 9908      	SBIC 0x1,0
0003f2 c04d      	RJMP _0x4E
                 ;        {
                 ;         while(PINE.0 == 0);
                 _0x4F:
0003f3 9b08      	SBIS 0x1,0
0003f4 cffe      	RJMP _0x4F
                 ;         if(110 <= voltage && voltage <= 135)
0003f5 940e 0ba4 	CALL SUBOPT_0xE
                +
0003f7 36ee     +CPI R30 , LOW ( 0x6E )
0003f8 e0a0     +LDI R26 , HIGH ( 0x6E )
0003f9 07fa     +CPC R31 , R26
0003fa e0a0     +LDI R26 , BYTE3 ( 0x6E )
0003fb 076a     +CPC R22 , R26
0003fc e0a0     +LDI R26 , BYTE4 ( 0x6E )
0003fd 077a     +CPC R23 , R26
                 	__CPD1N 0x6E
0003fe f054      	BRLT _0x53
0003ff 940e 0c0d 	CALL SUBOPT_0x1C
                +
000401 38a8     +CPI R26 , LOW ( 0x88 )
000402 e0e0     +LDI R30 , HIGH ( 0x88 )
000403 07be     +CPC R27 , R30
000404 e0e0     +LDI R30 , BYTE3 ( 0x88 )
000405 078e     +CPC R24 , R30
000406 e0e0     +LDI R30 , BYTE4 ( 0x88 )
000407 079e     +CPC R25 , R30
                 	__CPD2N 0x88
000408 f00c      	BRLT _0x54
                 _0x53:
000409 c012      	RJMP _0x52
                 _0x54:
                 ;         {
                 ;            lcd_clear();
00040a 940e 0bdd 	CALL SUBOPT_0x17
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_puts("Voltage set to:");
                +
00040c e0e0     +LDI R30 , LOW ( _0x55 + ( 0 ) )
00040d e0f5     +LDI R31 , HIGH ( _0x55 + ( 0 ) )
                 	__POINTW1MN _0x55,0
00040e 940e 0c3c 	CALL SUBOPT_0x21
                 ;            lcd_gotoxy(4,1);
000410 940e 0c40 	CALL SUBOPT_0x22
                 ;            lcd_putsf("V");
                +
000412 e9ee     +LDI R30 , LOW ( 2 * _0x0 + ( 214 ) )
000413 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 214 ) )
                 	__POINTW1FN _0x0,214
000414 940e 0b57 	CALL SUBOPT_0x1
                 ;            show_volt();
000416 df0a      	RCALL _show_volt
                 ;            //Voltage = temp_volt;
                 ;            flag = 11;
000417 940e 0c46 	CALL SUBOPT_0x23
                 ;            Screen = 30;
000419 940e 0c4d 	CALL SUBOPT_0x24
                 ;            delay_ms(2000);
00041b c020      	RJMP _0xA3
                 ;         }
                 ;         else
                 _0x52:
                 ;         {
                 ;            lcd_clear();
00041c 940e 0bdd 	CALL SUBOPT_0x17
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_putsf("Set value should");
                +
00041e eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 216 ) )
00041f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 216 ) )
                 	__POINTW1FN _0x0,216
000420 940e 0b57 	CALL SUBOPT_0x1
                 ;            lcd_gotoxy(0,1);
000422 940e 0b91 	CALL SUBOPT_0xB
                 ;            lcd_putsf("be between 110-");
                +
000424 ebe1     +LDI R30 , LOW ( 2 * _0x0 + ( 233 ) )
000425 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 233 ) )
                 	__POINTW1FN _0x0,233
000426 940e 0b57 	CALL SUBOPT_0x1
                 ;            lcd_gotoxy(0,2);
000428 e0e0      	LDI  R30,LOW(0)
000429 940e 0b87 	CALL SUBOPT_0x9
                 ;            lcd_putsf("135 volts");
                +
00042b ece1     +LDI R30 , LOW ( 2 * _0x0 + ( 249 ) )
00042c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 249 ) )
                 	__POINTW1FN _0x0,249
00042d 940e 0b57 	CALL SUBOPT_0x1
                 ;            voltage = 000;
00042f e0e0      	LDI  R30,LOW(0)
000430 93e0 0666 	STS  _voltage,R30
000432 93e0 0667 	STS  _voltage+1,R30
000434 93e0 0668 	STS  _voltage+2,R30
000436 93e0 0669 	STS  _voltage+3,R30
                 ;            Screen = 30;
000438 940e 0c4d 	CALL SUBOPT_0x24
                 ;            flag = 11;
00043a 940e 0c46 	CALL SUBOPT_0x23
                 ;            delay_ms(2000);
                 _0xA3:
00043c ede0      	LDI  R30,LOW(2000)
00043d e0f7      	LDI  R31,HIGH(2000)
00043e 940e 0b5b 	CALL SUBOPT_0x2
                 ;         }
                 ;        }
                 ;
                 ;    if (PINE.1 == 0)                                            //ESCAPE 4
                 _0x4E:
000440 9909      	SBIC 0x1,1
000441 c011      	RJMP _0x57
                 ;       {
                 ;        while(PINE.1 == 0);
                 _0x58:
000442 9b09      	SBIS 0x1,1
000443 cffe      	RJMP _0x58
                 ;        flag = 11;
000444 940e 0c46 	CALL SUBOPT_0x23
                 ;        if(Screen > 100)
000446 940e 0be3 	CALL SUBOPT_0x19
000448 f01c      	BRLT _0x5B
                 ;        {Screen = Screen/10;}
000449 940e 0be8 	CALL SUBOPT_0x1A
00044b c003      	RJMP _0xA4
                 ;        else
                 _0x5B:
                 ;        {Screen = (Screen/10)-1;}
00044c 940e 0be8 	CALL SUBOPT_0x1A
00044e 9731      	SBIW R30,1
                 _0xA4:
00044f 93e0 065c 	STS  _Screen,R30
000451 93f0 065d 	STS  _Screen+1,R31
                 ;        //flag = 1;
                 ;       }
                 ;}
                 _0x57:
000453 8119      	LDD  R17,Y+1
000454 8108      	LDD  R16,Y+0
000455 940c 08e7 	JMP  _0x2120006
                 
                 	.DSEG
                 _0x55:
000500           	.BYTE 0x10
                 ;
                 ;void input_current(int next)
                 ;{
                 
                 	.CSEG
                 _input_current:
                 ;    int change = pow(10,(next-Pointer_horiz-1));
                 ;    pointer_display_horiz();
000457 940e 0bee 	CALL SUBOPT_0x1B
                 ;	next -> Y+2
                 ;	change -> R16,R17
                 ;    delay_ms(100);
                 ;    if (PINE.2 == 0)                                            //UP     1
000459 990a      	SBIC 0x1,2
00045a c01d      	RJMP _0x5D
                 ;       {
                 ;        while(PINE.2 == 0);
                 _0x5E:
00045b 9b0a      	SBIS 0x1,2
00045c cffe      	RJMP _0x5E
                 ;        if(change == 1)
00045d e0e1      	LDI  R30,LOW(1)
00045e e0f0      	LDI  R31,HIGH(1)
00045f 17e0      	CP   R30,R16
000460 07f1      	CPC  R31,R17
000461 f421      	BRNE _0x61
                 ;        {current = current + (change);}
000462 01f8      	MOVW R30,R16
000463 940e 0c50 	CALL SUBOPT_0x25
000465 c004      	RJMP _0xA5
                 ;        else
                 _0x61:
                 ;        {current = current + 1 + (change);}
000466 940e 0bb4 	CALL SUBOPT_0x10
000468 940e 0c16 	CALL SUBOPT_0x1D
                 _0xA5:
00046a 940e 0f6d 	CALL __CWD1
00046c 940e 0f57 	CALL __ADDD12
00046e 940e 0c59 	CALL SUBOPT_0x26
                 ;        current = current % 1000;
000470 940e 0c50 	CALL SUBOPT_0x25
000472 940e 0c27 	CALL SUBOPT_0x1F
000474 940e 0c59 	CALL SUBOPT_0x26
                 ;        show_current();
000476 deb5      	RCALL _show_current
                 ;        pointer_display_horiz();
000477 de7a      	RCALL _pointer_display_horiz
                 ;       }
                 ;
                 ;    if (PINE.3 == 0)                                            //Next   2
                 _0x5D:
000478 990b      	SBIC 0x1,3
000479 c008      	RJMP _0x63
                 ;       {
                 ;        while(PINE.3 == 0);
                 _0x64:
00047a 9b0b      	SBIS 0x1,3
00047b cffe      	RJMP _0x64
                 ;        Pointer_horiz++;
00047c e6a0      	LDI  R26,LOW(_Pointer_horiz)
00047d e0b6      	LDI  R27,HIGH(_Pointer_horiz)
00047e 940e 0bc8 	CALL SUBOPT_0x13
                 ;
                 ;        Pointer_horiz = Pointer_horiz % next;
000480 940e 0c2e 	CALL SUBOPT_0x20
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINE.0 == 0)                                             //ENTER 3
                 _0x63:
000482 9908      	SBIC 0x1,0
000483 c04e      	RJMP _0x67
                 ;        {
                 ;         while(PINE.0 == 0);
                 _0x68:
000484 9b08      	SBIS 0x1,0
000485 cffe      	RJMP _0x68
                 ;         if(10 <= current && current <= 20)
000486 940e 0bb4 	CALL SUBOPT_0x10
                +
000488 30ea     +CPI R30 , LOW ( 0xA )
000489 e0a0     +LDI R26 , HIGH ( 0xA )
00048a 07fa     +CPC R31 , R26
00048b e0a0     +LDI R26 , BYTE3 ( 0xA )
00048c 076a     +CPC R22 , R26
00048d e0a0     +LDI R26 , BYTE4 ( 0xA )
00048e 077a     +CPC R23 , R26
                 	__CPD1N 0xA
00048f f054      	BRLT _0x6C
000490 940e 0c50 	CALL SUBOPT_0x25
                +
000492 31a5     +CPI R26 , LOW ( 0x15 )
000493 e0e0     +LDI R30 , HIGH ( 0x15 )
000494 07be     +CPC R27 , R30
000495 e0e0     +LDI R30 , BYTE3 ( 0x15 )
000496 078e     +CPC R24 , R30
000497 e0e0     +LDI R30 , BYTE4 ( 0x15 )
000498 079e     +CPC R25 , R30
                 	__CPD2N 0x15
000499 f00c      	BRLT _0x6D
                 _0x6C:
00049a c013      	RJMP _0x6B
                 _0x6D:
                 ;         {
                 ;            lcd_clear();
00049b 940e 0bdd 	CALL SUBOPT_0x17
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_puts("Current set to:");
                +
00049d e1e0     +LDI R30 , LOW ( _0x6E + ( 0 ) )
00049e e0f5     +LDI R31 , HIGH ( _0x6E + ( 0 ) )
                 	__POINTW1MN _0x6E,0
00049f 940e 0c3c 	CALL SUBOPT_0x21
                 ;            lcd_gotoxy(3,1);
0004a1 e0e3      	LDI  R30,LOW(3)
0004a2 940e 0c62 	CALL SUBOPT_0x27
                 ;            lcd_putsf("A");
                +
0004a4 edeb     +LDI R30 , LOW ( 2 * _0x0 + ( 275 ) )
0004a5 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 275 ) )
                 	__POINTW1FN _0x0,275
0004a6 940e 0b57 	CALL SUBOPT_0x1
                 ;            show_current();
0004a8 de83      	RCALL _show_current
                 ;            flag = 11;
0004a9 940e 0c46 	CALL SUBOPT_0x23
                 ;            Screen = 30;
0004ab 940e 0c4d 	CALL SUBOPT_0x24
                 ;            delay_ms(2000);
0004ad c020      	RJMP _0xA6
                 ;         }
                 ;         else
                 _0x6B:
                 ;         {
                 ;            lcd_clear();
0004ae 940e 0bdd 	CALL SUBOPT_0x17
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_putsf("Set value should");
                +
0004b0 eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 216 ) )
0004b1 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 216 ) )
                 	__POINTW1FN _0x0,216
0004b2 940e 0b57 	CALL SUBOPT_0x1
                 ;            lcd_gotoxy(0,1);
0004b4 940e 0b91 	CALL SUBOPT_0xB
                 ;            lcd_putsf("be between 10-");
                +
0004b6 eded     +LDI R30 , LOW ( 2 * _0x0 + ( 277 ) )
0004b7 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 277 ) )
                 	__POINTW1FN _0x0,277
0004b8 940e 0b57 	CALL SUBOPT_0x1
                 ;            lcd_gotoxy(0,2);
0004ba e0e0      	LDI  R30,LOW(0)
0004bb 940e 0b87 	CALL SUBOPT_0x9
                 ;            lcd_putsf("20 amps");
                +
0004bd eeec     +LDI R30 , LOW ( 2 * _0x0 + ( 292 ) )
0004be e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 292 ) )
                 	__POINTW1FN _0x0,292
0004bf 940e 0b57 	CALL SUBOPT_0x1
                 ;            current = 000;
0004c1 e0e0      	LDI  R30,LOW(0)
0004c2 93e0 066a 	STS  _current,R30
0004c4 93e0 066b 	STS  _current+1,R30
0004c6 93e0 066c 	STS  _current+2,R30
0004c8 93e0 066d 	STS  _current+3,R30
                 ;            Screen = 30;
0004ca 940e 0c4d 	CALL SUBOPT_0x24
                 ;            flag = 11;
0004cc 940e 0c46 	CALL SUBOPT_0x23
                 ;            delay_ms(2000);
                 _0xA6:
0004ce ede0      	LDI  R30,LOW(2000)
0004cf e0f7      	LDI  R31,HIGH(2000)
0004d0 940e 0b5b 	CALL SUBOPT_0x2
                 ;         }
                 ;        }
                 ;
                 ;    if (PINE.1 == 0)                                            //ESCAPE 4
                 _0x67:
0004d2 9909      	SBIC 0x1,1
0004d3 c011      	RJMP _0x70
                 ;       {
                 ;        while(PINE.1 == 0);
                 _0x71:
0004d4 9b09      	SBIS 0x1,1
0004d5 cffe      	RJMP _0x71
                 ;        flag = 11;
0004d6 940e 0c46 	CALL SUBOPT_0x23
                 ;        if(Screen > 100)
0004d8 940e 0be3 	CALL SUBOPT_0x19
0004da f01c      	BRLT _0x74
                 ;        {Screen = Screen/10;}
0004db 940e 0be8 	CALL SUBOPT_0x1A
0004dd c003      	RJMP _0xA7
                 ;        else
                 _0x74:
                 ;        {Screen = (Screen/10)-1;}
0004de 940e 0be8 	CALL SUBOPT_0x1A
0004e0 9731      	SBIW R30,1
                 _0xA7:
0004e1 93e0 065c 	STS  _Screen,R30
0004e3 93f0 065d 	STS  _Screen+1,R31
                 ;        //flag = 1;
                 ;       }
                 ;
                 ;
                 ;}
                 _0x70:
0004e5 8119      	LDD  R17,Y+1
0004e6 8108      	LDD  R16,Y+0
0004e7 940c 08e7 	JMP  _0x2120006
                 
                 	.DSEG
                 _0x6E:
000510           	.BYTE 0x10
                 ;
                 ;
                 ;
                 ;
                 ;void Screen1()
                 ; 0000 0165 {
                 
                 	.CSEG
                 _Screen1:
                 ; 0000 0166     Screen = 1;
0004e9 e0e1      	LDI  R30,LOW(1)
0004ea e0f0      	LDI  R31,HIGH(1)
0004eb 940e 0bd8 	CALL SUBOPT_0x16
                 ; 0000 0167     Pointer_horiz = 0;
0004ed e0e0      	LDI  R30,LOW(0)
0004ee 93e0 0660 	STS  _Pointer_horiz,R30
0004f0 93e0 0661 	STS  _Pointer_horiz+1,R30
                 ; 0000 0168     Pointer_vert = 0;
0004f2 940e 0c67 	CALL SUBOPT_0x28
                 ; 0000 0169     lcd_clear();
0004f4 940e 0bdd 	CALL SUBOPT_0x17
                 ; 0000 016A     lcd_gotoxy(0,0);
                 ; 0000 016B     lcd_puts("Welcome to HMI");
                +
0004f6 e2e0     +LDI R30 , LOW ( _0x76 + ( 0 ) )
0004f7 e0f5     +LDI R31 , HIGH ( _0x76 + ( 0 ) )
                 	__POINTW1MN _0x76,0
0004f8 940e 0c3c 	CALL SUBOPT_0x21
                 ; 0000 016C 
                 ; 0000 016D     delay_ms(1000);
0004fa 940e 0be0 	CALL SUBOPT_0x18
                 ; 0000 016E 
                 ; 0000 016F     Screen = 2;
0004fc e0e2      	LDI  R30,LOW(2)
0004fd e0f0      	LDI  R31,HIGH(2)
0004fe c0ad      	RJMP _0x2120009
                 ; 0000 0170 }
                 
                 	.DSEG
                 _0x76:
000520           	.BYTE 0xF
                 ;
                 ;void Screen2()
                 ; 0000 0173 {
                 
                 	.CSEG
                 _Screen2:
                 ; 0000 0174     lcd_clear();
0004ff 940e 0a98 	CALL _lcd_clear
                 ; 0000 0175 
                 ; 0000 0176     Screen = 2;
000501 e0e2      	LDI  R30,LOW(2)
000502 e0f0      	LDI  R31,HIGH(2)
000503 940e 0bd8 	CALL SUBOPT_0x16
                 ; 0000 0177     Pointer_vert = 0;
000505 940e 0c67 	CALL SUBOPT_0x28
                 ; 0000 0178     Pointer_horiz= 0;
000507 e0e0      	LDI  R30,LOW(0)
000508 93e0 0660 	STS  _Pointer_horiz,R30
00050a 93e0 0661 	STS  _Pointer_horiz+1,R30
                 ; 0000 0179     while(Screen == 2)
                 _0x77:
00050c 940e 0bce 	CALL SUBOPT_0x14
00050e 9712      	SBIW R26,2
00050f f481      	BRNE _0x79
                 ; 0000 017A     {
                 ; 0000 017B 
                 ; 0000 017C 
                 ; 0000 017D         lcd_gotoxy(1,0);
000510 940e 0c6d 	CALL SUBOPT_0x29
                 ; 0000 017E         lcd_putsf("Set Parameters");
                +
000512 e0e3     +LDI R30 , LOW ( 2 * _0x0 + ( 315 ) )
000513 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 315 ) )
                 	__POINTW1FN _0x0,315
000514 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 017F         lcd_gotoxy(1,1) ;
000516 e0e1      	LDI  R30,LOW(1)
000517 940e 0c62 	CALL SUBOPT_0x27
                 ; 0000 0180         lcd_putsf("Sensor Values");
                +
000519 e1e2     +LDI R30 , LOW ( 2 * _0x0 + ( 330 ) )
00051a e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 330 ) )
                 	__POINTW1FN _0x0,330
00051b 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 0181 
                 ; 0000 0182         input(2);
00051d 940e 0c73 	CALL SUBOPT_0x2A
                 ; 0000 0183     }
00051f cfec      	RJMP _0x77
                 _0x79:
                 ; 0000 0184 
                 ; 0000 0185 }
000520 9508      	RET
                 ;
                 ;
                 ;
                 ;void Screen30()
                 ; 0000 018A {
                 _Screen30:
                 ; 0000 018B     lcd_clear();
000521 940e 0a98 	CALL _lcd_clear
                 ; 0000 018C     while(Screen == 30)
                 _0x7A:
000523 940e 0bce 	CALL SUBOPT_0x14
000525 975e      	SBIW R26,30
000526 f4b9      	BRNE _0x7C
                 ; 0000 018D     {
                 ; 0000 018E     lcd_gotoxy(3,3);
000527 e0e3      	LDI  R30,LOW(3)
000528 940e 0c79 	CALL SUBOPT_0x2B
                 ; 0000 018F     lcd_putsf("PARAMETERS");
                +
00052a e2e0     +LDI R30 , LOW ( 2 * _0x0 + ( 344 ) )
00052b e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 344 ) )
                 	__POINTW1FN _0x0,344
00052c 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 0190     lcd_gotoxy(1,0);
00052e 940e 0c6d 	CALL SUBOPT_0x29
                 ; 0000 0191     lcd_putsf("Voltage (VOLTS)");
                +
000530 e2eb     +LDI R30 , LOW ( 2 * _0x0 + ( 355 ) )
000531 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 355 ) )
                 	__POINTW1FN _0x0,355
000532 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 0192     lcd_gotoxy(1,1);
000534 e0e1      	LDI  R30,LOW(1)
000535 940e 0c62 	CALL SUBOPT_0x27
                 ; 0000 0193     lcd_putsf("Current (AMPS)");
                +
000537 e3eb     +LDI R30 , LOW ( 2 * _0x0 + ( 371 ) )
000538 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 371 ) )
                 	__POINTW1FN _0x0,371
000539 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 0194 
                 ; 0000 0195         input(2);
00053b 940e 0c73 	CALL SUBOPT_0x2A
                 ; 0000 0196 
                 ; 0000 0197     /*if (PINE.1 == 0)                                            //ESCAPE Pressed 4
                 ; 0000 0198        {
                 ; 0000 0199         while(PINE.1 == 0);
                 ; 0000 019A         Screen = 2;
                 ; 0000 019B        }*/
                 ; 0000 019C     }
00053d cfe5      	RJMP _0x7A
                 _0x7C:
                 ; 0000 019D 
                 ; 0000 019E 
                 ; 0000 019F }
00053e 9508      	RET
                 ;
                 ;void Screen300()      //SET VOLTAGE
                 ; 0000 01A2 {
                 _Screen300:
                 ; 0000 01A3     while(Screen == 300)
                 _0x7D:
00053f 940e 0bce 	CALL SUBOPT_0x14
000541 32ac      	CPI  R26,LOW(0x12C)
000542 e0e1      	LDI  R30,HIGH(0x12C)
000543 07be      	CPC  R27,R30
000544 f4b9      	BRNE _0x7F
                 ; 0000 01A4     {
                 ; 0000 01A5     lcd_clear();
000545 940e 0bdd 	CALL SUBOPT_0x17
                 ; 0000 01A6     lcd_gotoxy(0,0);
                 ; 0000 01A7     lcd_putsf("Set voltage:");
                +
000547 e4ea     +LDI R30 , LOW ( 2 * _0x0 + ( 386 ) )
000548 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 386 ) )
                 	__POINTW1FN _0x0,386
000549 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01A8     show_volt();
00054b ddd5      	RCALL _show_volt
                 ; 0000 01A9     while(flag != 11)
                 _0x80:
00054c 91a0 0670 	LDS  R26,_flag
00054e 91b0 0671 	LDS  R27,_flag+1
000550 971b      	SBIW R26,11
000551 f021      	BREQ _0x82
                 ; 0000 01AA     {
                 ; 0000 01AB         input_volt(3);
000552 940e 0c7e 	CALL SUBOPT_0x2C
000554 de71      	RCALL _input_volt
                 ; 0000 01AC     }
000555 cff6      	RJMP _0x80
                 _0x82:
                 ; 0000 01AD     flag = 0;
000556 e0e0      	LDI  R30,LOW(0)
000557 93e0 0670 	STS  _flag,R30
000559 93e0 0671 	STS  _flag+1,R30
                 ; 0000 01AE     }
00055b cfe3      	RJMP _0x7D
                 _0x7F:
                 ; 0000 01AF }
00055c 9508      	RET
                 ;void Screen301()     //SET CURRENT
                 ; 0000 01B1 {
                 _Screen301:
                 ; 0000 01B2     while (Screen == 301)
                 _0x83:
00055d 940e 0bce 	CALL SUBOPT_0x14
00055f 32ad      	CPI  R26,LOW(0x12D)
000560 e0e1      	LDI  R30,HIGH(0x12D)
000561 07be      	CPC  R27,R30
000562 f4b9      	BRNE _0x85
                 ; 0000 01B3     {
                 ; 0000 01B4     lcd_clear();
000563 940e 0bdd 	CALL SUBOPT_0x17
                 ; 0000 01B5     lcd_gotoxy(0,0);
                 ; 0000 01B6     lcd_putsf("Set current:");
                +
000565 e5e7     +LDI R30 , LOW ( 2 * _0x0 + ( 399 ) )
000566 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 399 ) )
                 	__POINTW1FN _0x0,399
000567 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01B7     show_current();
000569 ddc2      	RCALL _show_current
                 ; 0000 01B8     while(flag != 11)
                 _0x86:
00056a 91a0 0670 	LDS  R26,_flag
00056c 91b0 0671 	LDS  R27,_flag+1
00056e 971b      	SBIW R26,11
00056f f021      	BREQ _0x88
                 ; 0000 01B9     {
                 ; 0000 01BA         input_current(3);
000570 940e 0c7e 	CALL SUBOPT_0x2C
000572 dee4      	RCALL _input_current
                 ; 0000 01BB     }
000573 cff6      	RJMP _0x86
                 _0x88:
                 ; 0000 01BC     flag = 0;
000574 e0e0      	LDI  R30,LOW(0)
000575 93e0 0670 	STS  _flag,R30
000577 93e0 0671 	STS  _flag+1,R30
                 ; 0000 01BD     }
000579 cfe3      	RJMP _0x83
                 _0x85:
                 ; 0000 01BE }
00057a 9508      	RET
                 ;
                 ;
                 ;void Screen31()
                 ; 0000 01C2 {
                 _Screen31:
                 ; 0000 01C3     lcd_clear();
00057b 940e 0a98 	CALL _lcd_clear
                 ; 0000 01C4     Pointer_vert = 0;
00057d 940e 0c67 	CALL SUBOPT_0x28
                 ; 0000 01C5     while(Screen == 31)
                 _0x89:
00057f 940e 0bce 	CALL SUBOPT_0x14
000581 975f      	SBIW R26,31
000582 f4f1      	BRNE _0x8B
                 ; 0000 01C6     {
                 ; 0000 01C7     lcd_gotoxy(4,3);
000583 e0e4      	LDI  R30,LOW(4)
000584 940e 0c79 	CALL SUBOPT_0x2B
                 ; 0000 01C8     lcd_putsf("SENSORS");
                +
000586 e6e4     +LDI R30 , LOW ( 2 * _0x0 + ( 412 ) )
000587 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 412 ) )
                 	__POINTW1FN _0x0,412
000588 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01C9     lcd_gotoxy(1,0);
00058a 940e 0c6d 	CALL SUBOPT_0x29
                 ; 0000 01CA     lcd_putsf("Analog");
                +
00058c e6ec     +LDI R30 , LOW ( 2 * _0x0 + ( 420 ) )
00058d e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 420 ) )
                 	__POINTW1FN _0x0,420
00058e 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01CB     lcd_gotoxy(1,1);
000590 e0e1      	LDI  R30,LOW(1)
000591 940e 0c62 	CALL SUBOPT_0x27
                 ; 0000 01CC     lcd_putsf("Digital");
                +
000593 e7e3     +LDI R30 , LOW ( 2 * _0x0 + ( 427 ) )
000594 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 427 ) )
                 	__POINTW1FN _0x0,427
000595 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01CD     lcd_gotoxy(1,2);
000597 940e 0b78 	CALL SUBOPT_0x6
                 ; 0000 01CE     lcd_putsf("Thermocouple");
                +
000599 e7eb     +LDI R30 , LOW ( 2 * _0x0 + ( 435 ) )
00059a e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 435 ) )
                 	__POINTW1FN _0x0,435
00059b 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01CF 
                 ; 0000 01D0         input(3);
00059d 940e 0c7e 	CALL SUBOPT_0x2C
00059f dd9f      	RCALL _input
                 ; 0000 01D1     }
0005a0 cfde      	RJMP _0x89
                 _0x8B:
                 ; 0000 01D2 }
0005a1 9508      	RET
                 ;
                 ;void Screen310()  // Analog Values
                 ; 0000 01D5 {
                 _Screen310:
                 ; 0000 01D6     lcd_gotoxy(0,0);
0005a2 940e 0b8c 	CALL SUBOPT_0xA
                 ; 0000 01D7     lcd_putsf("No functions          added yet");
                +
0005a4 e8e8     +LDI R30 , LOW ( 2 * _0x0 + ( 448 ) )
0005a5 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 448 ) )
                 	__POINTW1FN _0x0,448
0005a6 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01D8     delay_ms(1000);
0005a8 940e 0be0 	CALL SUBOPT_0x18
                 ; 0000 01D9     Screen = 31;
0005aa e1ef      	LDI  R30,LOW(31)
0005ab e0f0      	LDI  R31,HIGH(31)
                 _0x2120009:
0005ac 93e0 065c 	STS  _Screen,R30
0005ae 93f0 065d 	STS  _Screen+1,R31
                 ; 0000 01DA }
0005b0 9508      	RET
                 ;
                 ;void Screen311()        // Digital Values
                 ; 0000 01DD {
                 _Screen311:
                 ; 0000 01DE     int x = 0;
                 ; 0000 01DF     char disp_ch[3];
                 ; 0000 01E0     lcd_clear();
0005b1 9723      	SBIW R28,3
0005b2 931a      	ST   -Y,R17
0005b3 930a      	ST   -Y,R16
                 ;	x -> R16,R17
                 ;	disp_ch -> Y+2
                +
0005b4 e000     +LDI R16 , LOW ( 0 )
0005b5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0005b6 940e 0bdd 	CALL SUBOPT_0x17
                 ; 0000 01E1     lcd_gotoxy(0,0);
                 ; 0000 01E2     lcd_putsf("Ch0:");
                +
0005b8 eae8     +LDI R30 , LOW ( 2 * _0x0 + ( 480 ) )
0005b9 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 480 ) )
                 	__POINTW1FN _0x0,480
0005ba 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01E3     lcd_gotoxy(0,1);
0005bc 940e 0b91 	CALL SUBOPT_0xB
                 ; 0000 01E4     lcd_putsf("Ch1:");
                +
0005be eaed     +LDI R30 , LOW ( 2 * _0x0 + ( 485 ) )
0005bf e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 485 ) )
                 	__POINTW1FN _0x0,485
0005c0 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01E5     lcd_gotoxy(0,2);
0005c2 e0e0      	LDI  R30,LOW(0)
0005c3 940e 0b87 	CALL SUBOPT_0x9
                 ; 0000 01E6     lcd_putsf("Ch2:");
                +
0005c5 ebe2     +LDI R30 , LOW ( 2 * _0x0 + ( 490 ) )
0005c6 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 490 ) )
                 	__POINTW1FN _0x0,490
0005c7 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01E7     lcd_gotoxy(0,3);
0005c9 940e 0b97 	CALL SUBOPT_0xC
                 ; 0000 01E8     lcd_putsf("Ch3:");
                +
0005cb ebe7     +LDI R30 , LOW ( 2 * _0x0 + ( 495 ) )
0005cc e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 495 ) )
                 	__POINTW1FN _0x0,495
0005cd 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01E9     lcd_gotoxy(9,0);
0005cf e0e9      	LDI  R30,LOW(9)
0005d0 940e 0c83 	CALL SUBOPT_0x2D
                 ; 0000 01EA     lcd_putsf("Ch4:");
                +
0005d2 ebec     +LDI R30 , LOW ( 2 * _0x0 + ( 500 ) )
0005d3 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 500 ) )
                 	__POINTW1FN _0x0,500
0005d4 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01EB     lcd_gotoxy(9,1);
0005d6 e0e9      	LDI  R30,LOW(9)
0005d7 940e 0c62 	CALL SUBOPT_0x27
                 ; 0000 01EC     lcd_putsf("Ch5:");
                +
0005d9 ece1     +LDI R30 , LOW ( 2 * _0x0 + ( 505 ) )
0005da e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 505 ) )
                 	__POINTW1FN _0x0,505
0005db 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01ED     lcd_gotoxy(9,2);
0005dd e0e9      	LDI  R30,LOW(9)
0005de 940e 0b87 	CALL SUBOPT_0x9
                 ; 0000 01EE     lcd_putsf("Ch6:");
                +
0005e0 ece6     +LDI R30 , LOW ( 2 * _0x0 + ( 510 ) )
0005e1 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 510 ) )
                 	__POINTW1FN _0x0,510
0005e2 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01EF     lcd_gotoxy(9,3);
0005e4 e0e9      	LDI  R30,LOW(9)
0005e5 940e 0c79 	CALL SUBOPT_0x2B
                 ; 0000 01F0     lcd_putsf("Ch7:");
                +
0005e7 eceb     +LDI R30 , LOW ( 2 * _0x0 + ( 515 ) )
0005e8 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 515 ) )
                 	__POINTW1FN _0x0,515
0005e9 940e 0b57 	CALL SUBOPT_0x1
                 ; 0000 01F1 
                 ; 0000 01F2     while (PINE.1 != 0)
                 _0x8C:
0005eb 9b09      	SBIS 0x1,1
0005ec c052      	RJMP _0x8E
                 ; 0000 01F3     {
                 ; 0000 01F4         x = read_adc(0x00)/4;
0005ed e0e0      	LDI  R30,LOW(0)
0005ee 940e 0c88 	CALL SUBOPT_0x2E
                 ; 0000 01F5         sprintf(disp_ch,"%03d",x);
0005f0 940e 0c91 	CALL SUBOPT_0x2F
                 ; 0000 01F6         lcd_gotoxy(4,0);
0005f2 e0e4      	LDI  R30,LOW(4)
0005f3 940e 0c83 	CALL SUBOPT_0x2D
                 ; 0000 01F7         lcd_puts(disp_ch);
0005f5 940e 0c9b 	CALL SUBOPT_0x30
                 ; 0000 01F8         x = read_adc(0x01)/4;
0005f7 e0e1      	LDI  R30,LOW(1)
0005f8 940e 0c88 	CALL SUBOPT_0x2E
                 ; 0000 01F9         sprintf(disp_ch,"%03d",x);
0005fa 940e 0c91 	CALL SUBOPT_0x2F
                 ; 0000 01FA         lcd_gotoxy(4,1);
0005fc 940e 0c40 	CALL SUBOPT_0x22
                 ; 0000 01FB         lcd_puts(disp_ch);
0005fe 940e 0c9b 	CALL SUBOPT_0x30
                 ; 0000 01FC         x = read_adc(0x02)/4;
000600 e0e2      	LDI  R30,LOW(2)
000601 940e 0c88 	CALL SUBOPT_0x2E
                 ; 0000 01FD         sprintf(disp_ch,"%03d",x);
000603 940e 0c91 	CALL SUBOPT_0x2F
                 ; 0000 01FE         lcd_gotoxy(4,2);
000605 e0e4      	LDI  R30,LOW(4)
000606 940e 0b87 	CALL SUBOPT_0x9
                 ; 0000 01FF         lcd_puts(disp_ch);
000608 940e 0c9b 	CALL SUBOPT_0x30
                 ; 0000 0200         x = read_adc(0x03)/4;
00060a e0e3      	LDI  R30,LOW(3)
00060b 940e 0c88 	CALL SUBOPT_0x2E
                 ; 0000 0201         sprintf(disp_ch,"%03d",x);
00060d 940e 0c91 	CALL SUBOPT_0x2F
                 ; 0000 0202         lcd_gotoxy(4,3);
00060f e0e4      	LDI  R30,LOW(4)
000610 940e 0c79 	CALL SUBOPT_0x2B
                 ; 0000 0203         lcd_puts(disp_ch);
000612 940e 0c9b 	CALL SUBOPT_0x30
                 ; 0000 0204         x = read_adc(0x04)/4;
000614 e0e4      	LDI  R30,LOW(4)
000615 940e 0c88 	CALL SUBOPT_0x2E
                 ; 0000 0205         sprintf(disp_ch,"%03d",x);
000617 940e 0c91 	CALL SUBOPT_0x2F
                 ; 0000 0206         lcd_gotoxy(13,0);
000619 e0ed      	LDI  R30,LOW(13)
00061a 940e 0c83 	CALL SUBOPT_0x2D
                 ; 0000 0207         lcd_puts(disp_ch);
00061c 940e 0c9b 	CALL SUBOPT_0x30
                 ; 0000 0208         x = read_adc(0x05)/4;
00061e e0e5      	LDI  R30,LOW(5)
00061f 940e 0c88 	CALL SUBOPT_0x2E
                 ; 0000 0209         sprintf(disp_ch,"%03d",x);
000621 940e 0c91 	CALL SUBOPT_0x2F
                 ; 0000 020A         lcd_gotoxy(13,1);
000623 e0ed      	LDI  R30,LOW(13)
000624 940e 0c62 	CALL SUBOPT_0x27
                 ; 0000 020B         lcd_puts(disp_ch);
000626 940e 0c9b 	CALL SUBOPT_0x30
                 ; 0000 020C         x = read_adc(0x06)/4;
000628 e0e6      	LDI  R30,LOW(6)
000629 940e 0c88 	CALL SUBOPT_0x2E
                 ; 0000 020D         sprintf(disp_ch,"%03d",x);
00062b 940e 0c91 	CALL SUBOPT_0x2F
                 ; 0000 020E         lcd_gotoxy(13,2);
00062d e0ed      	LDI  R30,LOW(13)
00062e 940e 0b87 	CALL SUBOPT_0x9
                 ; 0000 020F         lcd_puts(disp_ch);
000630 940e 0c9b 	CALL SUBOPT_0x30
                 ; 0000 0210         x = read_adc(0x07)/4;
000632 e0e7      	LDI  R30,LOW(7)
000633 940e 0c88 	CALL SUBOPT_0x2E
                 ; 0000 0211         sprintf(disp_ch,"%03d",x);
000635 940e 0c91 	CALL SUBOPT_0x2F
                 ; 0000 0212         lcd_gotoxy(13,3);
000637 e0ed      	LDI  R30,LOW(13)
000638 940e 0c79 	CALL SUBOPT_0x2B
                 ; 0000 0213         lcd_puts(disp_ch);
00063a 940e 0c9b 	CALL SUBOPT_0x30
                 ; 0000 0214         delay_ms(1000);
00063c 940e 0be0 	CALL SUBOPT_0x18
                 ; 0000 0215     }
00063e cfac      	RJMP _0x8C
                 _0x8E:
                 ; 0000 0216     Screen = 31;
00063f e1ef      	LDI  R30,LOW(31)
000640 e0f0      	LDI  R31,HIGH(31)
000641 940e 0bd8 	CALL SUBOPT_0x16
                 ; 0000 0217 }
000643 c0f4      	RJMP _0x2120008
                 ;
                 ;
                 ;void Screen_sel()
                 ; 0000 021B {
                 _Screen_sel:
                 ; 0000 021C     switch(Screen)
000644 940e 0bd3 	CALL SUBOPT_0x15
                 ; 0000 021D     {
                 ; 0000 021E         case 1:
000646 30e1      	CPI  R30,LOW(0x1)
000647 e0a0      	LDI  R26,HIGH(0x1)
000648 07fa      	CPC  R31,R26
000649 f411      	BRNE _0x92
                 ; 0000 021F             Screen1();
00064a de9e      	RCALL _Screen1
                 ; 0000 0220         break;
00064b c03e      	RJMP _0x91
                 ; 0000 0221         case 2:
                 _0x92:
00064c 30e2      	CPI  R30,LOW(0x2)
00064d e0a0      	LDI  R26,HIGH(0x2)
00064e 07fa      	CPC  R31,R26
00064f f411      	BRNE _0x93
                 ; 0000 0222             Screen2();
000650 deae      	RCALL _Screen2
                 ; 0000 0223         break;
000651 c038      	RJMP _0x91
                 ; 0000 0224 
                 ; 0000 0225         case 30:                           //Ports
                 _0x93:
000652 31ee      	CPI  R30,LOW(0x1E)
000653 e0a0      	LDI  R26,HIGH(0x1E)
000654 07fa      	CPC  R31,R26
000655 f411      	BRNE _0x94
                 ; 0000 0226             Screen30();
000656 deca      	RCALL _Screen30
                 ; 0000 0227         break;
000657 c032      	RJMP _0x91
                 ; 0000 0228 
                 ; 0000 0229         case 300:
                 _0x94:
000658 32ec      	CPI  R30,LOW(0x12C)
000659 e0a1      	LDI  R26,HIGH(0x12C)
00065a 07fa      	CPC  R31,R26
00065b f411      	BRNE _0x95
                 ; 0000 022A             Screen300();                   //Set Voltage
00065c dee2      	RCALL _Screen300
                 ; 0000 022B         break;
00065d c02c      	RJMP _0x91
                 ; 0000 022C         case 301:
                 _0x95:
00065e 32ed      	CPI  R30,LOW(0x12D)
00065f e0a1      	LDI  R26,HIGH(0x12D)
000660 07fa      	CPC  R31,R26
000661 f411      	BRNE _0x96
                 ; 0000 022D             Screen301();
000662 defa      	RCALL _Screen301
                 ; 0000 022E         break;
000663 c026      	RJMP _0x91
                 ; 0000 022F 
                 ; 0000 0230         case 31:
                 _0x96:
000664 31ef      	CPI  R30,LOW(0x1F)
000665 e0a0      	LDI  R26,HIGH(0x1F)
000666 07fa      	CPC  R31,R26
000667 f411      	BRNE _0x97
                 ; 0000 0231             Screen31();
000668 df12      	RCALL _Screen31
                 ; 0000 0232         break;
000669 c020      	RJMP _0x91
                 ; 0000 0233         case 310:                           //Analog
                 _0x97:
00066a 33e6      	CPI  R30,LOW(0x136)
00066b e0a1      	LDI  R26,HIGH(0x136)
00066c 07fa      	CPC  R31,R26
00066d f411      	BRNE _0x98
                 ; 0000 0234             Screen310();
00066e df33      	RCALL _Screen310
                 ; 0000 0235         break;
00066f c01a      	RJMP _0x91
                 ; 0000 0236         case 311:                           //Digital
                 _0x98:
000670 33e7      	CPI  R30,LOW(0x137)
000671 e0a1      	LDI  R26,HIGH(0x137)
000672 07fa      	CPC  R31,R26
000673 f411      	BRNE _0x9A
                 ; 0000 0237             Screen311();
000674 df3c      	RCALL _Screen311
                 ; 0000 0238         break;
000675 c014      	RJMP _0x91
                 ; 0000 0239 
                 ; 0000 023A         default:
                 _0x9A:
                 ; 0000 023B             lcd_clear();
000676 940e 0bdd 	CALL SUBOPT_0x17
                 ; 0000 023C             lcd_gotoxy(0,0);
                 ; 0000 023D             lcd_puts("Error.");
                +
000678 e2ef     +LDI R30 , LOW ( _0x9B + ( 0 ) )
000679 e0f5     +LDI R31 , HIGH ( _0x9B + ( 0 ) )
                 	__POINTW1MN _0x9B,0
00067a 940e 0c3c 	CALL SUBOPT_0x21
                 ; 0000 023E             lcd_gotoxy(0,1);
00067c 940e 0b91 	CALL SUBOPT_0xB
                 ; 0000 023F             lcd_puts("Restarting in 5 seconds.");
                +
00067e e3e6     +LDI R30 , LOW ( _0x9B + ( 7 ) )
00067f e0f5     +LDI R31 , HIGH ( _0x9B + ( 7 ) )
                 	__POINTW1MN _0x9B,7
000680 940e 0c3c 	CALL SUBOPT_0x21
                 ; 0000 0240             delay_ms(2000);
000682 ede0      	LDI  R30,LOW(2000)
000683 e0f7      	LDI  R31,HIGH(2000)
000684 940e 0b5b 	CALL SUBOPT_0x2
                 ; 0000 0241             Screen = 1;
000686 e0e1      	LDI  R30,LOW(1)
000687 e0f0      	LDI  R31,HIGH(1)
000688 940e 0bd8 	CALL SUBOPT_0x16
                 ; 0000 0242         break;
                 ; 0000 0243     }
                 _0x91:
                 ; 0000 0244 }
00068a 9508      	RET
                 
                 	.DSEG
                 _0x9B:
00052f           	.BYTE 0x20
                 ;
                 ;void main(void)
                 ; 0000 0247 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0248 
                 ; 0000 0249 
                 ; 0000 024A PORTA=0x00;
00068b e0e0      	LDI  R30,LOW(0)
00068c bbeb      	OUT  0x1B,R30
                 ; 0000 024B DDRA=0x00;
00068d bbea      	OUT  0x1A,R30
                 ; 0000 024C 
                 ; 0000 024D 
                 ; 0000 024E PORTB=0x00;
00068e bbe8      	OUT  0x18,R30
                 ; 0000 024F DDRB=0x07;
00068f e0e7      	LDI  R30,LOW(7)
000690 bbe7      	OUT  0x17,R30
                 ; 0000 0250 
                 ; 0000 0251 
                 ; 0000 0252 PORTC=0xFF;
000691 efef      	LDI  R30,LOW(255)
000692 bbe5      	OUT  0x15,R30
                 ; 0000 0253 DDRC=0xFF;
000693 bbe4      	OUT  0x14,R30
                 ; 0000 0254 
                 ; 0000 0255 
                 ; 0000 0256 PORTD=0xC0;
000694 ece0      	LDI  R30,LOW(192)
000695 bbe2      	OUT  0x12,R30
                 ; 0000 0257 DDRD=0x00;
000696 e0e0      	LDI  R30,LOW(0)
000697 bbe1      	OUT  0x11,R30
                 ; 0000 0258 
                 ; 0000 0259 
                 ; 0000 025A 
                 ; 0000 025B PORTE=0x0F;
000698 e0ef      	LDI  R30,LOW(15)
000699 b9e3      	OUT  0x3,R30
                 ; 0000 025C DDRE=0x00;
00069a e0e0      	LDI  R30,LOW(0)
00069b b9e2      	OUT  0x2,R30
                 ; 0000 025D 
                 ; 0000 025E 
                 ; 0000 025F 
                 ; 0000 0260 PORTF=0x00;
00069c 93e0 0062 	STS  98,R30
                 ; 0000 0261 DDRF=0x00;
00069e 93e0 0061 	STS  97,R30
                 ; 0000 0262 
                 ; 0000 0263 
                 ; 0000 0264 PORTG=0x00;
0006a0 93e0 0065 	STS  101,R30
                 ; 0000 0265 DDRG=0x00;
0006a2 93e0 0064 	STS  100,R30
                 ; 0000 0266 
                 ; 0000 0267 TCCR3A=0x00;
0006a4 93e0 008b 	STS  139,R30
                 ; 0000 0268 TCCR3B=0x09;
0006a6 e0e9      	LDI  R30,LOW(9)
0006a7 93e0 008a 	STS  138,R30
                 ; 0000 0269 TCNT3H=0x00;
0006a9 e0e0      	LDI  R30,LOW(0)
0006aa 93e0 0089 	STS  137,R30
                 ; 0000 026A TCNT3L=0x00;
0006ac 93e0 0088 	STS  136,R30
                 ; 0000 026B ICR3H=0x00;
0006ae 93e0 0081 	STS  129,R30
                 ; 0000 026C ICR3L=0x00;
0006b0 93e0 0080 	STS  128,R30
                 ; 0000 026D OCR3AH=0xFF;
0006b2 efef      	LDI  R30,LOW(255)
0006b3 93e0 0087 	STS  135,R30
                 ; 0000 026E OCR3AL=0xFF;
0006b5 93e0 0086 	STS  134,R30
                 ; 0000 026F OCR3BH=0x00;
0006b7 e0e0      	LDI  R30,LOW(0)
0006b8 93e0 0085 	STS  133,R30
                 ; 0000 0270 OCR3BL=0x00;
0006ba 93e0 0084 	STS  132,R30
                 ; 0000 0271 OCR3CH=0x00;
0006bc 93e0 0083 	STS  131,R30
                 ; 0000 0272 OCR3CL=0x00;
0006be 93e0 0082 	STS  130,R30
                 ; 0000 0273 
                 ; 0000 0274 // External Interrupt(s) initialization
                 ; 0000 0275 EICRA=0x00;
0006c0 93e0 006a 	STS  106,R30
                 ; 0000 0276 EICRB=0xAA;
0006c2 eaea      	LDI  R30,LOW(170)
0006c3 bfea      	OUT  0x3A,R30
                 ; 0000 0277 EIMSK=0xF0;
0006c4 efe0      	LDI  R30,LOW(240)
0006c5 bfe9      	OUT  0x39,R30
                 ; 0000 0278 EIFR=0xF0;
0006c6 bfe8      	OUT  0x38,R30
                 ; 0000 0279 
                 ; 0000 027A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 027B TIMSK=0x00;
0006c7 e0e0      	LDI  R30,LOW(0)
0006c8 bfe7      	OUT  0x37,R30
                 ; 0000 027C ETIMSK=0x04;
0006c9 e0e4      	LDI  R30,LOW(4)
0006ca 93e0 007d 	STS  125,R30
                 ; 0000 027D 
                 ; 0000 027E // USART0 initialization
                 ; 0000 027F /*
                 ; 0000 0280 UCSR0A=0x00;
                 ; 0000 0281 UCSR0B=0x18;
                 ; 0000 0282 UCSR0C=0x06;
                 ; 0000 0283 UBRR0H=0x00;
                 ; 0000 0284 UBRR0L=0x67;
                 ; 0000 0285 */
                 ; 0000 0286 // USART0 initialization
                 ; 0000 0287 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0288 // USART0 Receiver: Off
                 ; 0000 0289 // USART0 Transmitter: On
                 ; 0000 028A // USART0 Mode: Asynchronous
                 ; 0000 028B // USART0 Baud Rate: 9600
                 ; 0000 028C UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
0006cc e0e0      	LDI  R30,LOW(0)
0006cd b9eb      	OUT  0xB,R30
                 ; 0000 028D UCSR0B=(0<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0006ce e4e8      	LDI  R30,LOW(72)
0006cf b9ea      	OUT  0xA,R30
                 ; 0000 028E UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
0006d0 e0e6      	LDI  R30,LOW(6)
0006d1 93e0 0095 	STS  149,R30
                 ; 0000 028F UBRR0H=0x00;
0006d3 e0e0      	LDI  R30,LOW(0)
0006d4 93e0 0090 	STS  144,R30
                 ; 0000 0290 UBRR0L=0x33;
0006d6 e3e3      	LDI  R30,LOW(51)
0006d7 b9e9      	OUT  0x9,R30
                 ; 0000 0291 
                 ; 0000 0292 // USART1 initialization
                 ; 0000 0293 UCSR1A=0x00;
0006d8 e0e0      	LDI  R30,LOW(0)
0006d9 93e0 009b 	STS  155,R30
                 ; 0000 0294 UCSR1B=0x18;
0006db e1e8      	LDI  R30,LOW(24)
0006dc 93e0 009a 	STS  154,R30
                 ; 0000 0295 UCSR1C=0x06;
0006de e0e6      	LDI  R30,LOW(6)
0006df 93e0 009d 	STS  157,R30
                 ; 0000 0296 UBRR1H=0x00;
0006e1 e0e0      	LDI  R30,LOW(0)
0006e2 93e0 0098 	STS  152,R30
                 ; 0000 0297 UBRR1L=0x67;
0006e4 e6e7      	LDI  R30,LOW(103)
0006e5 93e0 0099 	STS  153,R30
                 ; 0000 0298 
                 ; 0000 0299 // Analog Comparator initialization
                 ; 0000 029A ACSR=0x80;
0006e7 e8e0      	LDI  R30,LOW(128)
0006e8 b9e8      	OUT  0x8,R30
                 ; 0000 029B SFIOR=0x00;
0006e9 e0e0      	LDI  R30,LOW(0)
0006ea bde0      	OUT  0x20,R30
                 ; 0000 029C 
                 ; 0000 029D // ADC initialization
                 ; 0000 029E ADMUX=ADC_VREF_TYPE & 0xff;
0006eb b9e7      	OUT  0x7,R30
                 ; 0000 029F ADCSRA=0x84;
0006ec e8e4      	LDI  R30,LOW(132)
0006ed b9e6      	OUT  0x6,R30
                 ; 0000 02A0 
                 ; 0000 02A1 // SPI initialization
                 ; 0000 02A2 SPCR=0x50;
0006ee e5e0      	LDI  R30,LOW(80)
0006ef b9ed      	OUT  0xD,R30
                 ; 0000 02A3 SPSR=0x00;
0006f0 e0e0      	LDI  R30,LOW(0)
0006f1 b9ee      	OUT  0xE,R30
                 ; 0000 02A4 
                 ; 0000 02A5 // TWI initializatioN
                 ; 0000 02A6 TWCR=0x00;
0006f2 93e0 0074 	STS  116,R30
                 ; 0000 02A7 
                 ; 0000 02A8 // I2C Bus initialization
                 ; 0000 02A9 i2c_init();
0006f4 940e 0d2b 	CALL _i2c_init
                 ; 0000 02AA 
                 ; 0000 02AB // DS1307 Real Time Clock initialization
                 ; 0000 02AC rtc_init(0,0,0);
0006f6 e0e0      	LDI  R30,LOW(0)
0006f7 93ea      	ST   -Y,R30
0006f8 93ea      	ST   -Y,R30
0006f9 93ea      	ST   -Y,R30
0006fa 940e 0b1a 	CALL _rtc_init
                 ; 0000 02AD 
                 ; 0000 02AE 
                 ; 0000 02AF lcd_init(16);
0006fc e1e0      	LDI  R30,LOW(16)
0006fd 93ea      	ST   -Y,R30
0006fe 940e 0ae6 	CALL _lcd_init
                 ; 0000 02B0 
                 ; 0000 02B1 // Global enable interrupts
                 ; 0000 02B2 #asm("sei")
000700 9478      	sei
                 ; 0000 02B3 
                 ; 0000 02B4 
                 ; 0000 02B5 while(1)
                 _0x9C:
                 ; 0000 02B6 {
                 ; 0000 02B7 
                 ; 0000 02B8    Screen_sel();
000701 df42      	RCALL _Screen_sel
                 ; 0000 02B9 }
000702 cffe      	RJMP _0x9C
                 ; 0000 02BA 
                 ; 0000 02BB }
                 _0x9F:
000703 cfff      	RJMP _0x9F
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
000704 931a      	ST   -Y,R17
000705 930a      	ST   -Y,R16
000706 81aa      	LDD  R26,Y+2
000707 81bb      	LDD  R27,Y+2+1
000708 9612      	ADIW R26,2
000709 940e 0fec 	CALL __GETW1P
00070b 9730      	SBIW R30,0
00070c f129      	BREQ _0x2000010
00070d 81aa      	LDD  R26,Y+2
00070e 81bb      	LDD  R27,Y+2+1
00070f 9614      	ADIW R26,4
000710 940e 0fec 	CALL __GETW1P
000712 018f      	MOVW R16,R30
000713 9730      	SBIW R30,0
000714 f061      	BREQ _0x2000012
                +
000715 3002     +CPI R16 , LOW ( 2 )
000716 e0e0     +LDI R30 , HIGH ( 2 )
000717 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000718 f0c0      	BRLO _0x2000013
000719 01f8      	MOVW R30,R16
00071a 9731      	SBIW R30,1
00071b 018f      	MOVW R16,R30
                +
00071c 81aa     +LDD R26 , Y + 2
00071d 81bb     +LDD R27 , Y + 2 + 1
00071e 9614     +ADIW R26 , 4
00071f 93ed     +ST X + , R30
000720 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000721 81aa      	LDD  R26,Y+2
000722 81bb      	LDD  R27,Y+2+1
000723 9612      	ADIW R26,2
000724 940e 0bc8 	CALL SUBOPT_0x13
000726 9731      	SBIW R30,1
000727 81ac      	LDD  R26,Y+4
000728 83a0      	STD  Z+0,R26
000729 81aa      	LDD  R26,Y+2
00072a 81bb      	LDD  R27,Y+2+1
00072b 940e 0fec 	CALL __GETW1P
00072d 23ff      	TST  R31
00072e f012      	BRMI _0x2000014
00072f 940e 0bc8 	CALL SUBOPT_0x13
                 _0x2000014:
                 _0x2000013:
000731 c006      	RJMP _0x2000015
                 _0x2000010:
000732 81aa      	LDD  R26,Y+2
000733 81bb      	LDD  R27,Y+2+1
000734 efef      	LDI  R30,LOW(65535)
000735 efff      	LDI  R31,HIGH(65535)
000736 93ed      	ST   X+,R30
000737 93fc      	ST   X,R31
                 _0x2000015:
                 _0x2120008:
000738 8119      	LDD  R17,Y+1
000739 8108      	LDD  R16,Y+0
00073a 9625      	ADIW R28,5
00073b 9508      	RET
                 __print_G100:
00073c 9726      	SBIW R28,6
00073d 940e 1024 	CALL __SAVELOCR6
00073f e010      	LDI  R17,0
000740 85ac      	LDD  R26,Y+12
000741 85bd      	LDD  R27,Y+12+1
000742 e0e0      	LDI  R30,LOW(0)
000743 e0f0      	LDI  R31,HIGH(0)
000744 93ed      	ST   X+,R30
000745 93fc      	ST   X,R31
                 _0x2000016:
000746 89ea      	LDD  R30,Y+18
000747 89fb      	LDD  R31,Y+18+1
000748 9631      	ADIW R30,1
000749 8bea      	STD  Y+18,R30
00074a 8bfb      	STD  Y+18+1,R31
00074b 9731      	SBIW R30,1
00074c 91e4      	LPM  R30,Z
00074d 2f2e      	MOV  R18,R30
00074e 30e0      	CPI  R30,0
00074f f411      	BRNE PC+3
000750 940c 0869 	JMP _0x2000018
000752 2fe1      	MOV  R30,R17
000753 30e0      	CPI  R30,0
000754 f439      	BRNE _0x200001C
000755 3225      	CPI  R18,37
000756 f411      	BRNE _0x200001D
000757 e011      	LDI  R17,LOW(1)
000758 c002      	RJMP _0x200001E
                 _0x200001D:
000759 940e 0c9e 	CALL SUBOPT_0x31
                 _0x200001E:
00075b c10c      	RJMP _0x200001B
                 _0x200001C:
00075c 30e1      	CPI  R30,LOW(0x1)
00075d f4a9      	BRNE _0x200001F
00075e 3225      	CPI  R18,37
00075f f419      	BRNE _0x2000020
000760 940e 0c9e 	CALL SUBOPT_0x31
000762 c104      	RJMP _0x20000C9
                 _0x2000020:
000763 e012      	LDI  R17,LOW(2)
000764 e040      	LDI  R20,LOW(0)
000765 e000      	LDI  R16,LOW(0)
000766 322d      	CPI  R18,45
000767 f411      	BRNE _0x2000021
000768 e001      	LDI  R16,LOW(1)
000769 c0fe      	RJMP _0x200001B
                 _0x2000021:
00076a 322b      	CPI  R18,43
00076b f411      	BRNE _0x2000022
00076c e24b      	LDI  R20,LOW(43)
00076d c0fa      	RJMP _0x200001B
                 _0x2000022:
00076e 3220      	CPI  R18,32
00076f f411      	BRNE _0x2000023
000770 e240      	LDI  R20,LOW(32)
000771 c0f6      	RJMP _0x200001B
                 _0x2000023:
000772 c002      	RJMP _0x2000024
                 _0x200001F:
000773 30e2      	CPI  R30,LOW(0x2)
000774 f439      	BRNE _0x2000025
                 _0x2000024:
000775 e050      	LDI  R21,LOW(0)
000776 e013      	LDI  R17,LOW(3)
000777 3320      	CPI  R18,48
000778 f411      	BRNE _0x2000026
000779 6800      	ORI  R16,LOW(128)
00077a c0ed      	RJMP _0x200001B
                 _0x2000026:
00077b c004      	RJMP _0x2000027
                 _0x2000025:
00077c 30e3      	CPI  R30,LOW(0x3)
00077d f011      	BREQ PC+3
00077e 940c 0868 	JMP _0x200001B
                 _0x2000027:
000780 3320      	CPI  R18,48
000781 f010      	BRLO _0x200002A
000782 332a      	CPI  R18,58
000783 f008      	BRLO _0x200002B
                 _0x200002A:
000784 c007      	RJMP _0x2000029
                 _0x200002B:
000785 e0aa      	LDI  R26,LOW(10)
000786 9f5a      	MUL  R21,R26
000787 2d50      	MOV  R21,R0
000788 2fe2      	MOV  R30,R18
000789 53e0      	SUBI R30,LOW(48)
00078a 0f5e      	ADD  R21,R30
00078b c0dc      	RJMP _0x200001B
                 _0x2000029:
00078c 2fe2      	MOV  R30,R18
00078d 36e3      	CPI  R30,LOW(0x63)
00078e f449      	BRNE _0x200002F
00078f 940e 0ca7 	CALL SUBOPT_0x32
000791 89e8      	LDD  R30,Y+16
000792 89f9      	LDD  R31,Y+16+1
000793 81a4      	LDD  R26,Z+4
000794 93aa      	ST   -Y,R26
000795 940e 0cad 	CALL SUBOPT_0x33
000797 c0cf      	RJMP _0x2000030
                 _0x200002F:
000798 37e3      	CPI  R30,LOW(0x73)
000799 f441      	BRNE _0x2000032
00079a 940e 0ca7 	CALL SUBOPT_0x32
00079c 940e 0cb5 	CALL SUBOPT_0x34
00079e 940e 0b3b 	CALL _strlen
0007a0 2f1e      	MOV  R17,R30
0007a1 c00a      	RJMP _0x2000033
                 _0x2000032:
0007a2 37e0      	CPI  R30,LOW(0x70)
0007a3 f461      	BRNE _0x2000035
0007a4 940e 0ca7 	CALL SUBOPT_0x32
0007a6 940e 0cb5 	CALL SUBOPT_0x34
0007a8 940e 0b45 	CALL _strlenf
0007aa 2f1e      	MOV  R17,R30
0007ab 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0007ac 6002      	ORI  R16,LOW(2)
0007ad 770f      	ANDI R16,LOW(127)
0007ae e030      	LDI  R19,LOW(0)
0007af c035      	RJMP _0x2000036
                 _0x2000035:
0007b0 36e4      	CPI  R30,LOW(0x64)
0007b1 f011      	BREQ _0x2000039
0007b2 36e9      	CPI  R30,LOW(0x69)
0007b3 f411      	BRNE _0x200003A
                 _0x2000039:
0007b4 6004      	ORI  R16,LOW(4)
0007b5 c002      	RJMP _0x200003B
                 _0x200003A:
0007b6 37e5      	CPI  R30,LOW(0x75)
0007b7 f431      	BRNE _0x200003C
                 _0x200003B:
0007b8 e8ec      	LDI  R30,LOW(_tbl10_G100*2)
0007b9 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0007ba 83ee      	STD  Y+6,R30
0007bb 83ff      	STD  Y+6+1,R31
0007bc e015      	LDI  R17,LOW(5)
0007bd c00d      	RJMP _0x200003D
                 _0x200003C:
0007be 35e8      	CPI  R30,LOW(0x58)
0007bf f411      	BRNE _0x200003F
0007c0 6008      	ORI  R16,LOW(8)
0007c1 c004      	RJMP _0x2000040
                 _0x200003F:
0007c2 37e8      	CPI  R30,LOW(0x78)
0007c3 f011      	BREQ PC+3
0007c4 940c 0867 	JMP _0x2000071
                 _0x2000040:
0007c6 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
0007c7 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0007c8 83ee      	STD  Y+6,R30
0007c9 83ff      	STD  Y+6+1,R31
0007ca e014      	LDI  R17,LOW(4)
                 _0x200003D:
0007cb ff02      	SBRS R16,2
0007cc c014      	RJMP _0x2000042
0007cd 940e 0ca7 	CALL SUBOPT_0x32
0007cf 940e 0cbf 	CALL SUBOPT_0x35
0007d1 85ab      	LDD  R26,Y+11
0007d2 23aa      	TST  R26
0007d3 f43a      	BRPL _0x2000043
0007d4 85ea      	LDD  R30,Y+10
0007d5 85fb      	LDD  R31,Y+10+1
0007d6 940e 0f5c 	CALL __ANEGW1
0007d8 87ea      	STD  Y+10,R30
0007d9 87fb      	STD  Y+10+1,R31
0007da e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0007db 3040      	CPI  R20,0
0007dc f011      	BREQ _0x2000044
0007dd 5f1f      	SUBI R17,-LOW(1)
0007de c001      	RJMP _0x2000045
                 _0x2000044:
0007df 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0007e0 c004      	RJMP _0x2000046
                 _0x2000042:
0007e1 940e 0ca7 	CALL SUBOPT_0x32
0007e3 940e 0cbf 	CALL SUBOPT_0x35
                 _0x2000046:
                 _0x2000036:
0007e5 fd00      	SBRC R16,0
0007e6 c011      	RJMP _0x2000047
                 _0x2000048:
0007e7 1715      	CP   R17,R21
0007e8 f478      	BRSH _0x200004A
0007e9 ff07      	SBRS R16,7
0007ea c008      	RJMP _0x200004B
0007eb ff02      	SBRS R16,2
0007ec c004      	RJMP _0x200004C
0007ed 7f0b      	ANDI R16,LOW(251)
0007ee 2f24      	MOV  R18,R20
0007ef 5011      	SUBI R17,LOW(1)
0007f0 c001      	RJMP _0x200004D
                 _0x200004C:
0007f1 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0007f2 c001      	RJMP _0x200004E
                 _0x200004B:
0007f3 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0007f4 940e 0c9e 	CALL SUBOPT_0x31
0007f6 5051      	SUBI R21,LOW(1)
0007f7 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0007f8 2f31      	MOV  R19,R17
0007f9 ff01      	SBRS R16,1
0007fa c017      	RJMP _0x200004F
                 _0x2000050:
0007fb 3030      	CPI  R19,0
0007fc f0a1      	BREQ _0x2000052
0007fd ff03      	SBRS R16,3
0007fe c006      	RJMP _0x2000053
0007ff 81ee      	LDD  R30,Y+6
000800 81ff      	LDD  R31,Y+6+1
000801 9125      	LPM  R18,Z+
000802 83ee      	STD  Y+6,R30
000803 83ff      	STD  Y+6+1,R31
000804 c005      	RJMP _0x2000054
                 _0x2000053:
000805 81ae      	LDD  R26,Y+6
000806 81bf      	LDD  R27,Y+6+1
000807 912d      	LD   R18,X+
000808 83ae      	STD  Y+6,R26
000809 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00080a 940e 0c9e 	CALL SUBOPT_0x31
00080c 3050      	CPI  R21,0
00080d f009      	BREQ _0x2000055
00080e 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00080f 5031      	SUBI R19,LOW(1)
000810 cfea      	RJMP _0x2000050
                 _0x2000052:
000811 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000812 e320      	LDI  R18,LOW(48)
000813 81ee      	LDD  R30,Y+6
000814 81ff      	LDD  R31,Y+6+1
000815 940e 0ff5 	CALL __GETW1PF
000817 87e8      	STD  Y+8,R30
000818 87f9      	STD  Y+8+1,R31
000819 81ee      	LDD  R30,Y+6
00081a 81ff      	LDD  R31,Y+6+1
00081b 9632      	ADIW R30,2
00081c 83ee      	STD  Y+6,R30
00081d 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00081e 85e8      	LDD  R30,Y+8
00081f 85f9      	LDD  R31,Y+8+1
000820 85aa      	LDD  R26,Y+10
000821 85bb      	LDD  R27,Y+10+1
000822 17ae      	CP   R26,R30
000823 07bf      	CPC  R27,R31
000824 f050      	BRLO _0x200005C
000825 5f2f      	SUBI R18,-LOW(1)
000826 85a8      	LDD  R26,Y+8
000827 85b9      	LDD  R27,Y+8+1
000828 85ea      	LDD  R30,Y+10
000829 85fb      	LDD  R31,Y+10+1
00082a 1bea      	SUB  R30,R26
00082b 0bfb      	SBC  R31,R27
00082c 87ea      	STD  Y+10,R30
00082d 87fb      	STD  Y+10+1,R31
00082e cfef      	RJMP _0x200005A
                 _0x200005C:
00082f 332a      	CPI  R18,58
000830 f028      	BRLO _0x200005D
000831 ff03      	SBRS R16,3
000832 c002      	RJMP _0x200005E
000833 5f29      	SUBI R18,-LOW(7)
000834 c001      	RJMP _0x200005F
                 _0x200005E:
000835 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000836 fd04      	SBRC R16,4
000837 c01a      	RJMP _0x2000061
000838 3321      	CPI  R18,49
000839 f420      	BRSH _0x2000063
00083a 85a8      	LDD  R26,Y+8
00083b 85b9      	LDD  R27,Y+8+1
00083c 9711      	SBIW R26,1
00083d f409      	BRNE _0x2000062
                 _0x2000063:
00083e c009      	RJMP _0x20000CA
                 _0x2000062:
00083f 1753      	CP   R21,R19
000840 f010      	BRLO _0x2000067
000841 ff00      	SBRS R16,0
000842 c001      	RJMP _0x2000068
                 _0x2000067:
000843 c013      	RJMP _0x2000066
                 _0x2000068:
000844 e220      	LDI  R18,LOW(32)
000845 ff07      	SBRS R16,7
000846 c00b      	RJMP _0x2000069
000847 e320      	LDI  R18,LOW(48)
                 _0x20000CA:
000848 6100      	ORI  R16,LOW(16)
000849 ff02      	SBRS R16,2
00084a c007      	RJMP _0x200006A
00084b 7f0b      	ANDI R16,LOW(251)
00084c 934a      	ST   -Y,R20
00084d 940e 0cad 	CALL SUBOPT_0x33
00084f 3050      	CPI  R21,0
000850 f009      	BREQ _0x200006B
000851 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000852 940e 0c9e 	CALL SUBOPT_0x31
000854 3050      	CPI  R21,0
000855 f009      	BREQ _0x200006C
000856 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000857 5031      	SUBI R19,LOW(1)
000858 85a8      	LDD  R26,Y+8
000859 85b9      	LDD  R27,Y+8+1
00085a 9712      	SBIW R26,2
00085b f008      	BRLO _0x2000059
00085c cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00085d ff00      	SBRS R16,0
00085e c008      	RJMP _0x200006D
                 _0x200006E:
00085f 3050      	CPI  R21,0
000860 f031      	BREQ _0x2000070
000861 5051      	SUBI R21,LOW(1)
000862 e2e0      	LDI  R30,LOW(32)
000863 93ea      	ST   -Y,R30
000864 940e 0cad 	CALL SUBOPT_0x33
000866 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
000867 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000868 cedd      	RJMP _0x2000016
                 _0x2000018:
000869 85ac      	LDD  R26,Y+12
00086a 85bd      	LDD  R27,Y+12+1
00086b 940e 0fec 	CALL __GETW1P
00086d 940e 102b 	CALL __LOADLOCR6
00086f 9664      	ADIW R28,20
000870 9508      	RET
                 _sprintf:
000871 92ff      	PUSH R15
000872 2ef8      	MOV  R15,R24
000873 9726      	SBIW R28,6
000874 940e 1026 	CALL __SAVELOCR4
000876 940e 0cc7 	CALL SUBOPT_0x36
000878 9730      	SBIW R30,0
000879 f419      	BRNE _0x2000072
00087a efef      	LDI  R30,LOW(65535)
00087b efff      	LDI  R31,HIGH(65535)
00087c c025      	RJMP _0x2120007
                 _0x2000072:
00087d 01de      	MOVW R26,R28
00087e 9616      	ADIW R26,6
00087f 940e 0f53 	CALL __ADDW2R15
000881 018d      	MOVW R16,R26
000882 940e 0cc7 	CALL SUBOPT_0x36
000884 83ee      	STD  Y+6,R30
000885 83ff      	STD  Y+6+1,R31
000886 e0e0      	LDI  R30,LOW(0)
000887 87e8      	STD  Y+8,R30
000888 87e9      	STD  Y+8+1,R30
000889 01de      	MOVW R26,R28
00088a 961a      	ADIW R26,10
00088b 940e 0f53 	CALL __ADDW2R15
00088d 940e 0fec 	CALL __GETW1P
00088f 93fa      	ST   -Y,R31
000890 93ea      	ST   -Y,R30
000891 931a      	ST   -Y,R17
000892 930a      	ST   -Y,R16
000893 e0e4      	LDI  R30,LOW(_put_buff_G100)
000894 e0f7      	LDI  R31,HIGH(_put_buff_G100)
000895 93fa      	ST   -Y,R31
000896 93ea      	ST   -Y,R30
000897 01fe      	MOVW R30,R28
000898 963a      	ADIW R30,10
000899 93fa      	ST   -Y,R31
00089a 93ea      	ST   -Y,R30
00089b dea0      	RCALL __print_G100
00089c 019f      	MOVW R18,R30
00089d 81ae      	LDD  R26,Y+6
00089e 81bf      	LDD  R27,Y+6+1
00089f e0e0      	LDI  R30,LOW(0)
0008a0 93ec      	ST   X,R30
0008a1 01f9      	MOVW R30,R18
                 _0x2120007:
0008a2 940e 102d 	CALL __LOADLOCR4
0008a4 962a      	ADIW R28,10
0008a5 90ff      	POP  R15
0008a6 9508      	RET
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
0008a7 817b         ldd  r23,y+3
0008a8 816a         ldd  r22,y+2
0008a9 81f9         ldd  r31,y+1
0008aa 81e8         ld   r30,y
0008ab fb77         bst  r23,7
0008ac 0f77         lsl  r23
0008ad fd67         sbrc r22,7
0008ae 6071         sbr  r23,1
0008af 2f97         mov  r25,r23
0008b0 579e         subi r25,0x7e
0008b1 f081         breq __ftrunc0
0008b2 f078         brcs __ftrunc0
0008b3 3198         cpi  r25,24
0008b4 f490         brsh __ftrunc1
0008b5 27aa         clr  r26
0008b6 27bb         clr  r27
0008b7 2788         clr  r24
                 __ftrunc2:
0008b8 9408         sec
0008b9 9587         ror  r24
0008ba 95b7         ror  r27
0008bb 95a7         ror  r26
0008bc 959a         dec  r25
0008bd f7d1         brne __ftrunc2
0008be 23ea         and  r30,r26
0008bf 23fb         and  r31,r27
0008c0 2368         and  r22,r24
0008c1 c005         rjmp __ftrunc1
                 __ftrunc0:
0008c2 94e8         clt
0008c3 2777         clr  r23
0008c4 27ee         clr  r30
0008c5 27ff         clr  r31
0008c6 2766         clr  r22
                 __ftrunc1:
0008c7 776f         cbr  r22,0x80
0008c8 9576         lsr  r23
0008c9 f408         brcc __ftrunc3
0008ca 6860         sbr  r22,0x80
                 __ftrunc3:
0008cb f977         bld  r23,7
0008cc 91a9         ld   r26,y+
0008cd 91b9         ld   r27,y+
0008ce 9189         ld   r24,y+
0008cf 9199         ld   r25,y+
0008d0 17ea         cp   r30,r26
0008d1 07fb         cpc  r31,r27
0008d2 0768         cpc  r22,r24
0008d3 0779         cpc  r23,r25
0008d4 fb97         bst  r25,7
0008d5 9508         ret
                 _floor:
0008d6 940e 0cce 	CALL SUBOPT_0x37
0008d8 940e 1003 	CALL __PUTPARD1
0008da 940e 08a7 	CALL _ftrunc
0008dc 940e 0ffe 	CALL __PUTD1S0
0008de f419          brne __floor1
                 __floor0:
0008df 940e 0cce 	CALL SUBOPT_0x37
0008e1 c005      	RJMP _0x2120006
                 __floor1:
0008e2 f7e6          brtc __floor0
0008e3 940e 0cce 	CALL SUBOPT_0x37
0008e5 940e 0cd1 	CALL SUBOPT_0x38
                 _0x2120006:
0008e7 9624      	ADIW R28,4
0008e8 9508      	RET
                 _log:
0008e9 9724      	SBIW R28,4
0008ea 931a      	ST   -Y,R17
0008eb 930a      	ST   -Y,R16
0008ec 940e 0cd8 	CALL SUBOPT_0x39
0008ee 940e 1019 	CALL __CPD02
0008f0 f02c      	BRLT _0x204000C
                +
0008f1 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
0008f2 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
0008f3 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
0008f4 ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0008f5 c077      	RJMP _0x2120005
                 _0x204000C:
0008f6 940e 0cdd 	CALL SUBOPT_0x3A
0008f8 940e 1003 	CALL __PUTPARD1
0008fa b7ed      	IN   R30,SPL
0008fb b7fe      	IN   R31,SPH
0008fc 9731      	SBIW R30,1
0008fd 93fa      	ST   -Y,R31
0008fe 93ea      	ST   -Y,R30
0008ff 931f      	PUSH R17
000900 930f      	PUSH R16
000901 940e 0d89 	CALL _frexp
000903 910f      	POP  R16
000904 911f      	POP  R17
000905 940e 0ce2 	CALL SUBOPT_0x3B
000907 940e 0cd8 	CALL SUBOPT_0x39
                +
000909 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
00090a e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
00090b e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
00090c e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
00090d 940e 0f33 	CALL __CMPF12
00090f f440      	BRSH _0x204000D
000910 940e 0ce7 	CALL SUBOPT_0x3C
000912 940e 0e50 	CALL __ADDF12
000914 940e 0ce2 	CALL SUBOPT_0x3B
                +
000916 5001     +SUBI R16 , LOW ( 1 )
000917 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x204000D:
000918 940e 0cdd 	CALL SUBOPT_0x3A
00091a 940e 0cd1 	CALL SUBOPT_0x38
00091c 937f      	PUSH R23
00091d 936f      	PUSH R22
00091e 93ff      	PUSH R31
00091f 93ef      	PUSH R30
000920 940e 0cdd 	CALL SUBOPT_0x3A
                +
000922 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000923 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000924 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000925 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000926 940e 0e50 	CALL __ADDF12
000928 91af      	POP  R26
000929 91bf      	POP  R27
00092a 918f      	POP  R24
00092b 919f      	POP  R25
00092c 940e 0eee 	CALL __DIVF21
00092e 940e 0ce2 	CALL SUBOPT_0x3B
000930 940e 0ce7 	CALL SUBOPT_0x3C
000932 940e 0ce9 	CALL SUBOPT_0x3D
                +
000934 e2a6     +LDI R26 , LOW ( 0x3F654226 )
000935 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
000936 e685     +LDI R24 , BYTE3 ( 0x3F654226 )
000937 e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
000938 940e 0ea0 	CALL __MULF12
00093a 01df      	MOVW R26,R30
00093b 01cb      	MOVW R24,R22
                +
00093c e4ee     +LDI R30 , LOW ( 0x4054114E )
00093d e1f1     +LDI R31 , HIGH ( 0x4054114E )
00093e e564     +LDI R22 , BYTE3 ( 0x4054114E )
00093f e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
000940 940e 0cf0 	CALL SUBOPT_0x3E
000942 940e 0cd8 	CALL SUBOPT_0x39
000944 940e 0ea0 	CALL __MULF12
000946 937f      	PUSH R23
000947 936f      	PUSH R22
000948 93ff      	PUSH R31
000949 93ef      	PUSH R30
00094a 940e 0cf5 	CALL SUBOPT_0x3F
                +
00094c e4ad     +LDI R26 , LOW ( 0x3FD4114D )
00094d e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
00094e ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
00094f e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
000950 940e 0e49 	CALL __SUBF12
000952 91af      	POP  R26
000953 91bf      	POP  R27
000954 918f      	POP  R24
000955 919f      	POP  R25
000956 940e 0eee 	CALL __DIVF21
000958 937f      	PUSH R23
000959 936f      	PUSH R22
00095a 93ff      	PUSH R31
00095b 93ef      	PUSH R30
00095c 01f8      	MOVW R30,R16
00095d 940e 0f6d 	CALL __CWD1
00095f 940e 0e16 	CALL __CDF1
                +
000961 e1a8     +LDI R26 , LOW ( 0x3F317218 )
000962 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
000963 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
000964 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
000965 940e 0ea0 	CALL __MULF12
000967 91af      	POP  R26
000968 91bf      	POP  R27
000969 918f      	POP  R24
00096a 919f      	POP  R25
00096b 940e 0e50 	CALL __ADDF12
                 _0x2120005:
00096d 8119      	LDD  R17,Y+1
00096e 8108      	LDD  R16,Y+0
00096f 962a      	ADIW R28,10
000970 9508      	RET
                 _exp:
000971 9728      	SBIW R28,8
000972 931a      	ST   -Y,R17
000973 930a      	ST   -Y,R16
000974 940e 0cfa 	CALL SUBOPT_0x40
                +
000976 e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
000977 eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
000978 ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
000979 ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
00097a 940e 0f33 	CALL __CMPF12
00097c f418      	BRSH _0x204000F
00097d 940e 0cff 	CALL SUBOPT_0x41
00097f c088      	RJMP _0x2120004
                 _0x204000F:
                +
000980 85ea     +LDD R30 , Y + 10
000981 85fb     +LDD R31 , Y + 10 + 1
000982 856c     +LDD R22 , Y + 10 + 2
000983 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000984 940e 1015 	CALL __CPD10
000986 f429      	BRNE _0x2040010
                +
000987 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000988 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000989 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
00098a e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
00098b c07c      	RJMP _0x2120004
                 _0x2040010:
00098c 940e 0cfa 	CALL SUBOPT_0x40
                +
00098e e1e8     +LDI R30 , LOW ( 0x42B17218 )
00098f e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000990 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000991 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
000992 940e 0f33 	CALL __CMPF12
000994 f009      	BREQ PC+2
000995 f410      	BRCC PC+3
000996 940c 099d 	JMP  _0x2040011
                +
000998 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
000999 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
00099a e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
00099b e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
00099c c06b      	RJMP _0x2120004
                 _0x2040011:
00099d 940e 0cfa 	CALL SUBOPT_0x40
                +
00099f e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
0009a0 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
0009a1 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
0009a2 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
0009a3 940e 0ea0 	CALL __MULF12
                +
0009a5 87ea     +STD Y + 10 , R30
0009a6 87fb     +STD Y + 10 + 1 , R31
0009a7 876c     +STD Y + 10 + 2 , R22
0009a8 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0009a9 940e 1003 	CALL __PUTPARD1
0009ab df2a      	RCALL _floor
0009ac 940e 0ddf 	CALL __CFD1
0009ae 018f      	MOVW R16,R30
0009af 01f8      	MOVW R30,R16
0009b0 940e 0cfa 	CALL SUBOPT_0x40
0009b2 940e 0f6d 	CALL __CWD1
0009b4 940e 0e16 	CALL __CDF1
0009b6 940e 0cf0 	CALL SUBOPT_0x3E
0009b8 01df      	MOVW R26,R30
0009b9 01cb      	MOVW R24,R22
                +
0009ba e0e0     +LDI R30 , LOW ( 0x3F000000 )
0009bb e0f0     +LDI R31 , HIGH ( 0x3F000000 )
0009bc e060     +LDI R22 , BYTE3 ( 0x3F000000 )
0009bd e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
0009be 940e 0cf0 	CALL SUBOPT_0x3E
0009c0 940e 0ce2 	CALL SUBOPT_0x3B
0009c2 940e 0ce7 	CALL SUBOPT_0x3C
0009c4 940e 0ce9 	CALL SUBOPT_0x3D
                +
0009c6 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
0009c7 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
0009c8 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
0009c9 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
0009ca 940e 0ea0 	CALL __MULF12
                +
0009cc eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
0009cd eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
0009ce ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
0009cf e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
0009d0 940e 0e50 	CALL __ADDF12
0009d2 940e 0cd8 	CALL SUBOPT_0x39
0009d4 940e 0ea0 	CALL __MULF12
0009d6 940e 0ce2 	CALL SUBOPT_0x3B
0009d8 940e 0cf5 	CALL SUBOPT_0x3F
                +
0009da e2a8     +LDI R26 , LOW ( 0x41A68D28 )
0009db e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
0009dc ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
0009dd e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
0009de 940e 0e50 	CALL __ADDF12
                +
0009e0 83ea     +STD Y + 2 , R30
0009e1 83fb     +STD Y + 2 + 1 , R31
0009e2 836c     +STD Y + 2 + 2 , R22
0009e3 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0009e4 940e 0cdd 	CALL SUBOPT_0x3A
                +
0009e6 81aa     +LDD R26 , Y + 2
0009e7 81bb     +LDD R27 , Y + 2 + 1
0009e8 818c     +LDD R24 , Y + 2 + 2
0009e9 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0009ea 940e 0e50 	CALL __ADDF12
                +
0009ec efa3     +LDI R26 , LOW ( 0x3FB504F3 )
0009ed e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
0009ee eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
0009ef e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
0009f0 940e 0ea0 	CALL __MULF12
0009f2 937f      	PUSH R23
0009f3 936f      	PUSH R22
0009f4 93ff      	PUSH R31
0009f5 93ef      	PUSH R30
0009f6 940e 0cd8 	CALL SUBOPT_0x39
0009f8 940e 0cf5 	CALL SUBOPT_0x3F
0009fa 940e 0e49 	CALL __SUBF12
0009fc 91af      	POP  R26
0009fd 91bf      	POP  R27
0009fe 918f      	POP  R24
0009ff 919f      	POP  R25
000a00 940e 0eee 	CALL __DIVF21
000a02 940e 1003 	CALL __PUTPARD1
000a04 931a      	ST   -Y,R17
000a05 930a      	ST   -Y,R16
000a06 940e 0d9c 	CALL _ldexp
                 _0x2120004:
000a08 8119      	LDD  R17,Y+1
000a09 8108      	LDD  R16,Y+0
000a0a 962e      	ADIW R28,14
000a0b 9508      	RET
                 _pow:
000a0c 9724      	SBIW R28,4
000a0d 940e 0d04 	CALL SUBOPT_0x42
000a0f 940e 1015 	CALL __CPD10
000a11 f419      	BRNE _0x2040012
000a12 940e 0cff 	CALL SUBOPT_0x41
000a14 c03f      	RJMP _0x2120003
                 _0x2040012:
                +
000a15 85a8     +LDD R26 , Y + 8
000a16 85b9     +LDD R27 , Y + 8 + 1
000a17 858a     +LDD R24 , Y + 8 + 2
000a18 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000a19 940e 1019 	CALL __CPD02
000a1b f47c      	BRGE _0x2040013
000a1c 940e 0d09 	CALL SUBOPT_0x43
000a1e 940e 1015 	CALL __CPD10
000a20 f429      	BRNE _0x2040014
                +
000a21 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000a22 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000a23 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000a24 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000a25 c02e      	RJMP _0x2120003
                 _0x2040014:
000a26 940e 0d04 	CALL SUBOPT_0x42
000a28 940e 0d0e 	CALL SUBOPT_0x44
000a2a c029      	RJMP _0x2120003
                 _0x2040013:
000a2b 940e 0d09 	CALL SUBOPT_0x43
000a2d 01de      	MOVW R26,R28
000a2e 940e 0ddf 	CALL __CFD1
000a30 940e 0ff0 	CALL __PUTDP1
000a32 940e 0cce 	CALL SUBOPT_0x37
000a34 940e 0e16 	CALL __CDF1
000a36 01df      	MOVW R26,R30
000a37 01cb      	MOVW R24,R22
000a38 940e 0d09 	CALL SUBOPT_0x43
000a3a 940e 101f 	CALL __CPD12
000a3c f019      	BREQ _0x2040015
000a3d 940e 0cff 	CALL SUBOPT_0x41
000a3f c014      	RJMP _0x2120003
                 _0x2040015:
000a40 940e 0d04 	CALL SUBOPT_0x42
000a42 940e 0daa 	CALL __ANEGF1
000a44 940e 0d0e 	CALL SUBOPT_0x44
                +
000a46 87e8     +STD Y + 8 , R30
000a47 87f9     +STD Y + 8 + 1 , R31
000a48 876a     +STD Y + 8 + 2 , R22
000a49 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000a4a 81e8      	LD   R30,Y
000a4b 70e1      	ANDI R30,LOW(0x1)
000a4c f419      	BRNE _0x2040016
000a4d 940e 0d04 	CALL SUBOPT_0x42
000a4f c004      	RJMP _0x2120003
                 _0x2040016:
000a50 940e 0d04 	CALL SUBOPT_0x42
000a52 940e 0daa 	CALL __ANEGF1
                 _0x2120003:
000a54 962c      	ADIW R28,12
000a55 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
000a56 81e8      	LD   R30,Y
000a57 71e0      	ANDI R30,LOW(0x10)
000a58 f011      	BREQ _0x2060004
000a59 9aac      	SBI  0x15,4
000a5a c001      	RJMP _0x2060005
                 _0x2060004:
000a5b 98ac      	CBI  0x15,4
                 _0x2060005:
000a5c 81e8      	LD   R30,Y
000a5d 72e0      	ANDI R30,LOW(0x20)
000a5e f011      	BREQ _0x2060006
000a5f 9aad      	SBI  0x15,5
000a60 c001      	RJMP _0x2060007
                 _0x2060006:
000a61 98ad      	CBI  0x15,5
                 _0x2060007:
000a62 81e8      	LD   R30,Y
000a63 74e0      	ANDI R30,LOW(0x40)
000a64 f011      	BREQ _0x2060008
000a65 9aae      	SBI  0x15,6
000a66 c001      	RJMP _0x2060009
                 _0x2060008:
000a67 98ae      	CBI  0x15,6
                 _0x2060009:
000a68 81e8      	LD   R30,Y
000a69 78e0      	ANDI R30,LOW(0x80)
000a6a f011      	BREQ _0x206000A
000a6b 9aaf      	SBI  0x15,7
000a6c c001      	RJMP _0x206000B
                 _0x206000A:
000a6d 98af      	CBI  0x15,7
                 _0x206000B:
                +
000a6e e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000a6f 958a     +DEC R24
000a70 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000a71 9aaa      	SBI  0x15,2
                +
000a72 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000a73 958a     +DEC R24
000a74 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000a75 98aa      	CBI  0x15,2
                +
000a76 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000a77 958a     +DEC R24
000a78 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000a79 c09e      	RJMP _0x2120002
                 __lcd_write_data:
000a7a 81e8      	LD   R30,Y
000a7b 93ea      	ST   -Y,R30
000a7c dfd9      	RCALL __lcd_write_nibble_G103
000a7d 81e8          ld    r30,y
000a7e 95e2          swap  r30
000a7f 83e8          st    y,r30
000a80 81e8      	LD   R30,Y
000a81 93ea      	ST   -Y,R30
000a82 dfd3      	RCALL __lcd_write_nibble_G103
                +
000a83 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000a84 958a     +DEC R24
000a85 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000a86 c091      	RJMP _0x2120002
                 _lcd_gotoxy:
000a87 81e8      	LD   R30,Y
000a88 e0f0      	LDI  R31,0
000a89 58e2      	SUBI R30,LOW(-__base_y_G103)
000a8a 4ff9      	SBCI R31,HIGH(-__base_y_G103)
000a8b 81e0      	LD   R30,Z
000a8c 81a9      	LDD  R26,Y+1
000a8d 0fea      	ADD  R30,R26
000a8e 93ea      	ST   -Y,R30
000a8f dfea      	RCALL __lcd_write_data
000a90 81e9      	LDD  R30,Y+1
000a91 93e0 0682 	STS  __lcd_x,R30
000a93 81e8      	LD   R30,Y
000a94 93e0 0683 	STS  __lcd_y,R30
000a96 9622      	ADIW R28,2
000a97 9508      	RET
                 _lcd_clear:
000a98 e0e2      	LDI  R30,LOW(2)
000a99 940e 0d1c 	CALL SUBOPT_0x45
000a9b e0ec      	LDI  R30,LOW(12)
000a9c 93ea      	ST   -Y,R30
000a9d dfdc      	RCALL __lcd_write_data
000a9e e0e1      	LDI  R30,LOW(1)
000a9f 940e 0d1c 	CALL SUBOPT_0x45
000aa1 e0e0      	LDI  R30,LOW(0)
000aa2 93e0 0683 	STS  __lcd_y,R30
000aa4 93e0 0682 	STS  __lcd_x,R30
000aa6 9508      	RET
                 _lcd_putchar:
000aa7 81a8      	LD   R26,Y
000aa8 30aa      	CPI  R26,LOW(0xA)
000aa9 f031      	BREQ _0x2060011
000aaa 91e0 0684 	LDS  R30,__lcd_maxx
000aac 91a0 0682 	LDS  R26,__lcd_x
000aae 17ae      	CP   R26,R30
000aaf f068      	BRLO _0x2060010
                 _0x2060011:
000ab0 e0e0      	LDI  R30,LOW(0)
000ab1 93ea      	ST   -Y,R30
000ab2 91e0 0683 	LDS  R30,__lcd_y
000ab4 5fef      	SUBI R30,-LOW(1)
000ab5 93e0 0683 	STS  __lcd_y,R30
000ab7 93ea      	ST   -Y,R30
000ab8 dfce      	RCALL _lcd_gotoxy
000ab9 81a8      	LD   R26,Y
000aba 30aa      	CPI  R26,LOW(0xA)
000abb f409      	BRNE _0x2060013
000abc c05b      	RJMP _0x2120002
                 _0x2060013:
                 _0x2060010:
000abd 91e0 0682 	LDS  R30,__lcd_x
000abf 5fef      	SUBI R30,-LOW(1)
000ac0 93e0 0682 	STS  __lcd_x,R30
000ac2 9aa8      	SBI  0x15,0
000ac3 81e8      	LD   R30,Y
000ac4 93ea      	ST   -Y,R30
000ac5 dfb4      	RCALL __lcd_write_data
000ac6 98a8      	CBI  0x15,0
000ac7 c050      	RJMP _0x2120002
                 _lcd_puts:
000ac8 931a      	ST   -Y,R17
                 _0x2060014:
000ac9 81a9      	LDD  R26,Y+1
000aca 81ba      	LDD  R27,Y+1+1
000acb 91ed      	LD   R30,X+
000acc 83a9      	STD  Y+1,R26
000acd 83ba      	STD  Y+1+1,R27
000ace 2f1e      	MOV  R17,R30
000acf 30e0      	CPI  R30,0
000ad0 f019      	BREQ _0x2060016
000ad1 931a      	ST   -Y,R17
000ad2 dfd4      	RCALL _lcd_putchar
000ad3 cff5      	RJMP _0x2060014
                 _0x2060016:
000ad4 8118      	LDD  R17,Y+0
000ad5 c063      	RJMP _0x2120001
                 _lcd_putsf:
000ad6 931a      	ST   -Y,R17
                 _0x2060017:
000ad7 81e9      	LDD  R30,Y+1
000ad8 81fa      	LDD  R31,Y+1+1
000ad9 9631      	ADIW R30,1
000ada 83e9      	STD  Y+1,R30
000adb 83fa      	STD  Y+1+1,R31
000adc 9731      	SBIW R30,1
000add 91e4      	LPM  R30,Z
000ade 2f1e      	MOV  R17,R30
000adf 30e0      	CPI  R30,0
000ae0 f019      	BREQ _0x2060019
000ae1 931a      	ST   -Y,R17
000ae2 dfc4      	RCALL _lcd_putchar
000ae3 cff3      	RJMP _0x2060017
                 _0x2060019:
000ae4 8118      	LDD  R17,Y+0
000ae5 c053      	RJMP _0x2120001
                 _lcd_init:
000ae6 9aa4      	SBI  0x14,4
000ae7 9aa5      	SBI  0x14,5
000ae8 9aa6      	SBI  0x14,6
000ae9 9aa7      	SBI  0x14,7
000aea 9aa2      	SBI  0x14,2
000aeb 9aa0      	SBI  0x14,0
000aec 9aa1      	SBI  0x14,1
000aed 98aa      	CBI  0x15,2
000aee 98a8      	CBI  0x15,0
000aef 98a9      	CBI  0x15,1
000af0 81e8      	LD   R30,Y
000af1 93e0 0684 	STS  __lcd_maxx,R30
000af3 58e0      	SUBI R30,-LOW(128)
                +
000af4 93e0 0680+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000af6 81e8      	LD   R30,Y
000af7 54e0      	SUBI R30,-LOW(192)
                +
000af8 93e0 0681+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000afa e1e4      	LDI  R30,LOW(20)
000afb e0f0      	LDI  R31,HIGH(20)
000afc 940e 0b5b 	CALL SUBOPT_0x2
000afe 940e 0d22 	CALL SUBOPT_0x46
000b00 940e 0d22 	CALL SUBOPT_0x46
000b02 940e 0d22 	CALL SUBOPT_0x46
000b04 e2e0      	LDI  R30,LOW(32)
000b05 93ea      	ST   -Y,R30
000b06 df4f      	RCALL __lcd_write_nibble_G103
                +
000b07 ec88     +LDI R24 , LOW ( 200 )
000b08 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000b09 9701     +SBIW R24 , 1
000b0a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000b0b e2e8      	LDI  R30,LOW(40)
000b0c 93ea      	ST   -Y,R30
000b0d df6c      	RCALL __lcd_write_data
000b0e e0e4      	LDI  R30,LOW(4)
000b0f 93ea      	ST   -Y,R30
000b10 df69      	RCALL __lcd_write_data
000b11 e8e5      	LDI  R30,LOW(133)
000b12 93ea      	ST   -Y,R30
000b13 df66      	RCALL __lcd_write_data
000b14 e0e6      	LDI  R30,LOW(6)
000b15 93ea      	ST   -Y,R30
000b16 df63      	RCALL __lcd_write_data
000b17 df80      	RCALL _lcd_clear
                 _0x2120002:
000b18 9621      	ADIW R28,1
000b19 9508      	RET
                 
                 	.CSEG
                 _rtc_init:
000b1a 81ea      	LDD  R30,Y+2
000b1b 70e3      	ANDI R30,LOW(0x3)
000b1c 83ea      	STD  Y+2,R30
000b1d 81e9      	LDD  R30,Y+1
000b1e 30e0      	CPI  R30,0
000b1f f019      	BREQ _0x2080003
000b20 81ea      	LDD  R30,Y+2
000b21 61e0      	ORI  R30,0x10
000b22 83ea      	STD  Y+2,R30
                 _0x2080003:
000b23 81e8      	LD   R30,Y
000b24 30e0      	CPI  R30,0
000b25 f019      	BREQ _0x2080004
000b26 81ea      	LDD  R30,Y+2
000b27 68e0      	ORI  R30,0x80
000b28 83ea      	STD  Y+2,R30
                 _0x2080004:
000b29 940e 0d30 	CALL _i2c_start
000b2b ede0      	LDI  R30,LOW(208)
000b2c 93ea      	ST   -Y,R30
000b2d 940e 0d64 	CALL _i2c_write
000b2f e0e7      	LDI  R30,LOW(7)
000b30 93ea      	ST   -Y,R30
000b31 940e 0d64 	CALL _i2c_write
000b33 81ea      	LDD  R30,Y+2
000b34 93ea      	ST   -Y,R30
000b35 940e 0d64 	CALL _i2c_write
000b37 940e 0d3f 	CALL _i2c_stop
                 _0x2120001:
000b39 9623      	ADIW R28,3
000b3a 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
000b3b 91a9          ld   r26,y+
000b3c 91b9          ld   r27,y+
000b3d 27ee          clr  r30
000b3e 27ff          clr  r31
                 strlen0:
000b3f 916d          ld   r22,x+
000b40 2366          tst  r22
000b41 f011          breq strlen1
000b42 9631          adiw r30,1
000b43 cffb          rjmp strlen0
                 strlen1:
000b44 9508          ret
                 _strlenf:
000b45 27aa          clr  r26
000b46 27bb          clr  r27
000b47 91e9          ld   r30,y+
000b48 91f9          ld   r31,y+
                 strlenf0:
000b49 9005      	lpm  r0,z+
000b4a 2000          tst  r0
000b4b f011          breq strlenf1
000b4c 9611          adiw r26,1
000b4d cffb          rjmp strlenf0
                 strlenf1:
000b4e 01fd          movw r30,r26
000b4f 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _recFunc_G000:
00054f           	.BYTE 0xC8
                 _tx_buffer0:
000617           	.BYTE 0x40
                 _tx_counter0:
000657           	.BYTE 0x1
                 _on_button_state:
000658           	.BYTE 0x2
                 _off_button_state:
00065a           	.BYTE 0x2
                 _Screen:
00065c           	.BYTE 0x2
                 _Current_Screen:
00065e           	.BYTE 0x2
                 _Pointer_horiz:
000660           	.BYTE 0x2
                 _Pointer_vert:
000662           	.BYTE 0x2
                 _Pt:
000664           	.BYTE 0x2
                 _voltage:
000666           	.BYTE 0x4
                 _current:
00066a           	.BYTE 0x4
                 _set_flag:
00066e           	.BYTE 0x2
                 _flag:
000670           	.BYTE 0x2
                 _main_screen_trigger:
000672           	.BYTE 0x2
                 _disp_volt:
000674           	.BYTE 0x3
                 _disp_current:
000677           	.BYTE 0x3
                 __seed_G101:
00067a           	.BYTE 0x4
                 __base_y_G103:
00067e           	.BYTE 0x4
                 __lcd_x:
000682           	.BYTE 0x1
                 __lcd_y:
000683           	.BYTE 0x1
                 __lcd_maxx:
000684           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000b50 01f8      	MOVW R30,R16
000b51 81aa      	LDD  R26,Y+2
000b52 81bb      	LDD  R27,Y+2+1
000b53 0fea      	ADD  R30,R26
000b54 1ffb      	ADC  R31,R27
000b55 91e4      	LPM  R30,Z
000b56 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 40 TIMES, CODE SIZE REDUCTION:75 WORDS
                 SUBOPT_0x1:
000b57 93fa      	ST   -Y,R31
000b58 93ea      	ST   -Y,R30
000b59 940c 0ad6 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x2:
000b5b 93fa      	ST   -Y,R31
000b5c 93ea      	ST   -Y,R30
000b5d 940c 0d7d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000b5f 01f8      	MOVW R30,R16
000b60 0de8      	ADD  R30,R8
000b61 1df9      	ADC  R31,R9
000b62 9731      	SBIW R30,1
000b63 91e4      	LPM  R30,Z
000b64 30e0      	CPI  R30,0
000b65 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000b66 01f8      	MOVW R30,R16
000b67 0de8      	ADD  R30,R8
000b68 1df9      	ADC  R31,R9
000b69 019f      	MOVW R18,R30
000b6a e0e5      	LDI  R30,LOW(5)
000b6b e0f0      	LDI  R31,HIGH(5)
000b6c 17e0      	CP   R30,R16
000b6d 07f1      	CPC  R31,R17
000b6e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
000b6f e0e0      	LDI  R30,LOW(0)
000b70 93ea      	ST   -Y,R30
000b71 e0e2      	LDI  R30,LOW(2)
000b72 93ea      	ST   -Y,R30
000b73 940e 0a87 	CALL _lcd_gotoxy
                +
000b75 e7e4     +LDI R30 , LOW ( 2 * _0x0 + ( 172 ) )
000b76 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 172 ) )
                 	__POINTW1FN _0x0,172
000b77 cfdf      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000b78 e0e1      	LDI  R30,LOW(1)
000b79 93ea      	ST   -Y,R30
000b7a e0e2      	LDI  R30,LOW(2)
000b7b 93ea      	ST   -Y,R30
000b7c 940c 0a87 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
                +
000b7e e7e4     +LDI R30 , LOW ( 2 * _0x0 + ( 172 ) )
000b7f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 172 ) )
                 	__POINTW1FN _0x0,172
000b80 cfd6      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000b81 93ea      	ST   -Y,R30
000b82 e0e2      	LDI  R30,LOW(2)
000b83 93ea      	ST   -Y,R30
000b84 940e 0a87 	CALL _lcd_gotoxy
000b86 cff7      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x9:
000b87 93ea      	ST   -Y,R30
000b88 e0e2      	LDI  R30,LOW(2)
000b89 93ea      	ST   -Y,R30
000b8a 940c 0a87 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0xA:
000b8c e0e0      	LDI  R30,LOW(0)
000b8d 93ea      	ST   -Y,R30
000b8e 93ea      	ST   -Y,R30
000b8f 940c 0a87 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xB:
000b91 e0e0      	LDI  R30,LOW(0)
000b92 93ea      	ST   -Y,R30
000b93 e0e1      	LDI  R30,LOW(1)
000b94 93ea      	ST   -Y,R30
000b95 940c 0a87 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000b97 e0e0      	LDI  R30,LOW(0)
000b98 93ea      	ST   -Y,R30
000b99 e0e3      	LDI  R30,LOW(3)
000b9a 93ea      	ST   -Y,R30
000b9b 940c 0a87 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0xD:
000b9d 93fa      	ST   -Y,R31
000b9e 93ea      	ST   -Y,R30
                +
000b9f e7e8     +LDI R30 , LOW ( 2 * _0x0 + ( 176 ) )
000ba0 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 176 ) )
                 	__POINTW1FN _0x0,176
000ba1 93fa      	ST   -Y,R31
000ba2 93ea      	ST   -Y,R30
000ba3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
000ba4 91e0 0666 	LDS  R30,_voltage
000ba6 91f0 0667 	LDS  R31,_voltage+1
000ba8 9160 0668 	LDS  R22,_voltage+2
000baa 9170 0669 	LDS  R23,_voltage+3
000bac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
000bad 940e 1003 	CALL __PUTPARD1
000baf e084      	LDI  R24,4
000bb0 940e 0871 	CALL _sprintf
000bb2 9628      	ADIW R28,8
000bb3 cfdd      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x10:
000bb4 91e0 066a 	LDS  R30,_current
000bb6 91f0 066b 	LDS  R31,_current+1
000bb8 9160 066c 	LDS  R22,_current+2
000bba 9170 066d 	LDS  R23,_current+3
000bbc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000bbd e6e4      	LDI  R30,LOW(100)
000bbe e0f0      	LDI  R31,HIGH(100)
000bbf cf9b      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
000bc0 940e 0fbc 	CALL __MODW21
000bc2 93e0 0662 	STS  _Pointer_vert,R30
000bc4 93f0 0663 	STS  _Pointer_vert+1,R31
000bc6 940c 0305 	JMP  _pointer_display_vert
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x13:
000bc8 91ed      	LD   R30,X+
000bc9 91fd      	LD   R31,X+
000bca 9631      	ADIW R30,1
000bcb 93fe      	ST   -X,R31
000bcc 93ee      	ST   -X,R30
000bcd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x14:
000bce 91a0 065c 	LDS  R26,_Screen
000bd0 91b0 065d 	LDS  R27,_Screen+1
000bd2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000bd3 91e0 065c 	LDS  R30,_Screen
000bd5 91f0 065d 	LDS  R31,_Screen+1
000bd7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x16:
000bd8 93e0 065c 	STS  _Screen,R30
000bda 93f0 065d 	STS  _Screen+1,R31
000bdc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x17:
000bdd 940e 0a98 	CALL _lcd_clear
000bdf cfac      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
000be0 eee8      	LDI  R30,LOW(1000)
000be1 e0f3      	LDI  R31,HIGH(1000)
000be2 cf78      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
000be3 dfea      	RCALL SUBOPT_0x14
000be4 36a5      	CPI  R26,LOW(0x65)
000be5 e0e0      	LDI  R30,HIGH(0x65)
000be6 07be      	CPC  R27,R30
000be7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x1A:
000be8 dfe5      	RCALL SUBOPT_0x14
000be9 e0ea      	LDI  R30,LOW(10)
000bea e0f0      	LDI  R31,HIGH(10)
000beb 940e 0f92 	CALL __DIVW21
000bed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1B:
000bee 931a      	ST   -Y,R17
000bef 930a      	ST   -Y,R16
                +
000bf0 e0e0     +LDI R30 , LOW ( 0x41200000 )
000bf1 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000bf2 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000bf3 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000bf4 940e 1003 	CALL __PUTPARD1
000bf6 91a0 0660 	LDS  R26,_Pointer_horiz
000bf8 91b0 0661 	LDS  R27,_Pointer_horiz+1
000bfa 81ee      	LDD  R30,Y+6
000bfb 81ff      	LDD  R31,Y+6+1
000bfc 1bea      	SUB  R30,R26
000bfd 0bfb      	SBC  R31,R27
000bfe 9731      	SBIW R30,1
000bff 940e 0f6d 	CALL __CWD1
000c01 940e 0e16 	CALL __CDF1
000c03 940e 1003 	CALL __PUTPARD1
000c05 940e 0a0c 	CALL _pow
000c07 940e 0ddd 	CALL __CFD1U
000c09 018f      	MOVW R16,R30
000c0a 940e 02f2 	CALL _pointer_display_horiz
000c0c cfb0      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1C:
000c0d 91a0 0666 	LDS  R26,_voltage
000c0f 91b0 0667 	LDS  R27,_voltage+1
000c11 9180 0668 	LDS  R24,_voltage+2
000c13 9190 0669 	LDS  R25,_voltage+3
000c15 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
                +
000c16 5fef     +SUBI R30 , LOW ( - 1 )
000c17 4fff     +SBCI R31 , HIGH ( - 1 )
000c18 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000c19 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
000c1a 01df      	MOVW R26,R30
000c1b 01cb      	MOVW R24,R22
000c1c 01f8      	MOVW R30,R16
000c1d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
000c1e 93e0 0666 	STS  _voltage,R30
000c20 93f0 0667 	STS  _voltage+1,R31
000c22 9360 0668 	STS  _voltage+2,R22
000c24 9370 0669 	STS  _voltage+3,R23
000c26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
                +
000c27 eee8     +LDI R30 , LOW ( 0x3E8 )
000c28 e0f3     +LDI R31 , HIGH ( 0x3E8 )
000c29 e060     +LDI R22 , BYTE3 ( 0x3E8 )
000c2a e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
000c2b 940e 0fca 	CALL __MODD21
000c2d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
000c2e 81ea      	LDD  R30,Y+2
000c2f 81fb      	LDD  R31,Y+2+1
000c30 91a0 0660 	LDS  R26,_Pointer_horiz
000c32 91b0 0661 	LDS  R27,_Pointer_horiz+1
000c34 940e 0fbc 	CALL __MODW21
000c36 93e0 0660 	STS  _Pointer_horiz,R30
000c38 93f0 0661 	STS  _Pointer_horiz+1,R31
000c3a 940c 02f2 	JMP  _pointer_display_horiz
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x21:
000c3c 93fa      	ST   -Y,R31
000c3d 93ea      	ST   -Y,R30
000c3e 940c 0ac8 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
000c40 e0e4      	LDI  R30,LOW(4)
000c41 93ea      	ST   -Y,R30
000c42 e0e1      	LDI  R30,LOW(1)
000c43 93ea      	ST   -Y,R30
000c44 940c 0a87 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x23:
000c46 e0eb      	LDI  R30,LOW(11)
000c47 e0f0      	LDI  R31,HIGH(11)
000c48 93e0 0670 	STS  _flag,R30
000c4a 93f0 0671 	STS  _flag+1,R31
000c4c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
000c4d e1ee      	LDI  R30,LOW(30)
000c4e e0f0      	LDI  R31,HIGH(30)
000c4f cf88      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x25:
000c50 91a0 066a 	LDS  R26,_current
000c52 91b0 066b 	LDS  R27,_current+1
000c54 9180 066c 	LDS  R24,_current+2
000c56 9190 066d 	LDS  R25,_current+3
000c58 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000c59 93e0 066a 	STS  _current,R30
000c5b 93f0 066b 	STS  _current+1,R31
000c5d 9360 066c 	STS  _current+2,R22
000c5f 9370 066d 	STS  _current+3,R23
000c61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x27:
000c62 93ea      	ST   -Y,R30
000c63 e0e1      	LDI  R30,LOW(1)
000c64 93ea      	ST   -Y,R30
000c65 940c 0a87 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x28:
000c67 e0e0      	LDI  R30,LOW(0)
000c68 93e0 0662 	STS  _Pointer_vert,R30
000c6a 93e0 0663 	STS  _Pointer_vert+1,R30
000c6c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x29:
000c6d e0e1      	LDI  R30,LOW(1)
000c6e 93ea      	ST   -Y,R30
000c6f e0e0      	LDI  R30,LOW(0)
000c70 93ea      	ST   -Y,R30
000c71 940c 0a87 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
000c73 e0e2      	LDI  R30,LOW(2)
000c74 e0f0      	LDI  R31,HIGH(2)
000c75 93fa      	ST   -Y,R31
000c76 93ea      	ST   -Y,R30
000c77 940c 033f 	JMP  _input
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
000c79 93ea      	ST   -Y,R30
000c7a e0e3      	LDI  R30,LOW(3)
000c7b 93ea      	ST   -Y,R30
000c7c 940c 0a87 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
000c7e e0e3      	LDI  R30,LOW(3)
000c7f e0f0      	LDI  R31,HIGH(3)
000c80 93fa      	ST   -Y,R31
000c81 93ea      	ST   -Y,R30
000c82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
000c83 93ea      	ST   -Y,R30
000c84 e0e0      	LDI  R30,LOW(0)
000c85 93ea      	ST   -Y,R30
000c86 940c 0a87 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x2E:
000c88 93ea      	ST   -Y,R30
000c89 940e 02e5 	CALL _read_adc
000c8b 940e 0f68 	CALL __LSRW2
000c8d 018f      	MOVW R16,R30
000c8e 01fe      	MOVW R30,R28
000c8f 9632      	ADIW R30,2
000c90 cf0c      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:46 WORDS
                 SUBOPT_0x2F:
000c91 01f8      	MOVW R30,R16
000c92 940e 0f6d 	CALL __CWD1
000c94 940e 1003 	CALL __PUTPARD1
000c96 e084      	LDI  R24,4
000c97 940e 0871 	CALL _sprintf
000c99 9628      	ADIW R28,8
000c9a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x30:
000c9b 01fe      	MOVW R30,R28
000c9c 9632      	ADIW R30,2
000c9d cf9e      	RJMP SUBOPT_0x21
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x31:
000c9e 932a      	ST   -Y,R18
000c9f 85ed      	LDD  R30,Y+13
000ca0 85fe      	LDD  R31,Y+13+1
000ca1 93fa      	ST   -Y,R31
000ca2 93ea      	ST   -Y,R30
000ca3 89e9      	LDD  R30,Y+17
000ca4 89fa      	LDD  R31,Y+17+1
000ca5 9509      	ICALL
000ca6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x32:
000ca7 89e8      	LDD  R30,Y+16
000ca8 89f9      	LDD  R31,Y+16+1
000ca9 9734      	SBIW R30,4
000caa 8be8      	STD  Y+16,R30
000cab 8bf9      	STD  Y+16+1,R31
000cac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x33:
000cad 85ed      	LDD  R30,Y+13
000cae 85fe      	LDD  R31,Y+13+1
000caf 93fa      	ST   -Y,R31
000cb0 93ea      	ST   -Y,R30
000cb1 89e9      	LDD  R30,Y+17
000cb2 89fa      	LDD  R31,Y+17+1
000cb3 9509      	ICALL
000cb4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x34:
000cb5 89a8      	LDD  R26,Y+16
000cb6 89b9      	LDD  R27,Y+16+1
000cb7 9614      	ADIW R26,4
000cb8 940e 0fec 	CALL __GETW1P
000cba 83ee      	STD  Y+6,R30
000cbb 83ff      	STD  Y+6+1,R31
000cbc 93fa      	ST   -Y,R31
000cbd 93ea      	ST   -Y,R30
000cbe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x35:
000cbf 89a8      	LDD  R26,Y+16
000cc0 89b9      	LDD  R27,Y+16+1
000cc1 9614      	ADIW R26,4
000cc2 940e 0fec 	CALL __GETW1P
000cc4 87ea      	STD  Y+10,R30
000cc5 87fb      	STD  Y+10+1,R31
000cc6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
000cc7 01de      	MOVW R26,R28
000cc8 961c      	ADIW R26,12
000cc9 940e 0f53 	CALL __ADDW2R15
000ccb 940e 0fec 	CALL __GETW1P
000ccd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x37:
000cce 940e 0ff9 	CALL __GETD1S0
000cd0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
                +
000cd1 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000cd2 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000cd3 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000cd4 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000cd5 940e 0e49 	CALL __SUBF12
000cd7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x39:
                +
000cd8 81ae     +LDD R26 , Y + 6
000cd9 81bf     +LDD R27 , Y + 6 + 1
000cda 8588     +LDD R24 , Y + 6 + 2
000cdb 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000cdc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3A:
                +
000cdd 81ee     +LDD R30 , Y + 6
000cde 81ff     +LDD R31 , Y + 6 + 1
000cdf 8568     +LDD R22 , Y + 6 + 2
000ce0 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000ce1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3B:
                +
000ce2 83ee     +STD Y + 6 , R30
000ce3 83ff     +STD Y + 6 + 1 , R31
000ce4 8768     +STD Y + 6 + 2 , R22
000ce5 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000ce6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
000ce7 dff5      	RCALL SUBOPT_0x3A
000ce8 cfef      	RJMP SUBOPT_0x39
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3D:
000ce9 940e 0ea0 	CALL __MULF12
                +
000ceb 83ea     +STD Y + 2 , R30
000cec 83fb     +STD Y + 2 + 1 , R31
000ced 836c     +STD Y + 2 + 2 , R22
000cee 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000cef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3E:
000cf0 940e 1008 	CALL __SWAPD12
000cf2 940e 0e49 	CALL __SUBF12
000cf4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3F:
                +
000cf5 81ea     +LDD R30 , Y + 2
000cf6 81fb     +LDD R31 , Y + 2 + 1
000cf7 816c     +LDD R22 , Y + 2 + 2
000cf8 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000cf9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x40:
                +
000cfa 85aa     +LDD R26 , Y + 10
000cfb 85bb     +LDD R27 , Y + 10 + 1
000cfc 858c     +LDD R24 , Y + 10 + 2
000cfd 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000cfe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x41:
                +
000cff e0e0     +LDI R30 , LOW ( 0x0 )
000d00 e0f0     +LDI R31 , HIGH ( 0x0 )
000d01 e060     +LDI R22 , BYTE3 ( 0x0 )
000d02 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000d03 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x42:
                +
000d04 85e8     +LDD R30 , Y + 8
000d05 85f9     +LDD R31 , Y + 8 + 1
000d06 856a     +LDD R22 , Y + 8 + 2
000d07 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000d08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x43:
                +
000d09 81ec     +LDD R30 , Y + 4
000d0a 81fd     +LDD R31 , Y + 4 + 1
000d0b 816e     +LDD R22 , Y + 4 + 2
000d0c 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000d0d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x44:
000d0e 940e 1003 	CALL __PUTPARD1
000d10 940e 08e9 	CALL _log
                +
000d12 81ac     +LDD R26 , Y + 4
000d13 81bd     +LDD R27 , Y + 4 + 1
000d14 818e     +LDD R24 , Y + 4 + 2
000d15 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000d16 940e 0ea0 	CALL __MULF12
000d18 940e 1003 	CALL __PUTPARD1
000d1a 940c 0971 	JMP  _exp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x45:
000d1c 93ea      	ST   -Y,R30
000d1d 940e 0a7a 	CALL __lcd_write_data
000d1f e0e3      	LDI  R30,LOW(3)
000d20 e0f0      	LDI  R31,HIGH(3)
000d21 ce39      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x46:
000d22 e3e0      	LDI  R30,LOW(48)
000d23 93ea      	ST   -Y,R30
000d24 940e 0a56 	CALL __lcd_write_nibble_G103
                +
000d26 ec88     +LDI R24 , LOW ( 200 )
000d27 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000d28 9701     +SBIW R24 , 1
000d29 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000d2a 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
000d2b 9890      	cbi  __i2c_port,__scl_bit
000d2c 9891      	cbi  __i2c_port,__sda_bit
000d2d 9a88      	sbi  __i2c_dir,__scl_bit
000d2e 9889      	cbi  __i2c_dir,__sda_bit
000d2f c015      	rjmp __i2c_delay2
                 _i2c_start:
000d30 9889      	cbi  __i2c_dir,__sda_bit
000d31 9888      	cbi  __i2c_dir,__scl_bit
000d32 27ee      	clr  r30
000d33 0000      	nop
000d34 9b81      	sbis __i2c_pin,__sda_bit
000d35 9508      	ret
000d36 9b80      	sbis __i2c_pin,__scl_bit
000d37 9508      	ret
000d38 d004      	rcall __i2c_delay1
000d39 9a89      	sbi  __i2c_dir,__sda_bit
000d3a d002      	rcall __i2c_delay1
000d3b 9a88      	sbi  __i2c_dir,__scl_bit
000d3c e0e1      	ldi  r30,1
                 __i2c_delay1:
000d3d e06d      	ldi  r22,13
000d3e c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000d3f 9a89      	sbi  __i2c_dir,__sda_bit
000d40 9a88      	sbi  __i2c_dir,__scl_bit
000d41 d003      	rcall __i2c_delay2
000d42 9888      	cbi  __i2c_dir,__scl_bit
000d43 dff9      	rcall __i2c_delay1
000d44 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000d45 e16b      	ldi  r22,27
                 __i2c_delay2l:
000d46 956a      	dec  r22
000d47 f7f1      	brne __i2c_delay2l
000d48 9508      	ret
                 _i2c_read:
000d49 e078      	ldi  r23,8
                 __i2c_read0:
000d4a 9888      	cbi  __i2c_dir,__scl_bit
000d4b dff1      	rcall __i2c_delay1
                 __i2c_read3:
000d4c 9b80      	sbis __i2c_pin,__scl_bit
000d4d cffe      	rjmp __i2c_read3
000d4e dfee      	rcall __i2c_delay1
000d4f 9488      	clc
000d50 9981      	sbic __i2c_pin,__sda_bit
000d51 9408      	sec
000d52 9a88      	sbi  __i2c_dir,__scl_bit
000d53 dff1      	rcall __i2c_delay2
000d54 1fee      	rol  r30
000d55 957a      	dec  r23
000d56 f799      	brne __i2c_read0
000d57 9179      	ld   r23,y+
000d58 2377      	tst  r23
000d59 f411      	brne __i2c_read1
000d5a 9889      	cbi  __i2c_dir,__sda_bit
000d5b c001      	rjmp __i2c_read2
                 __i2c_read1:
000d5c 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000d5d dfdf      	rcall __i2c_delay1
000d5e 9888      	cbi  __i2c_dir,__scl_bit
000d5f dfe5      	rcall __i2c_delay2
000d60 9a88      	sbi  __i2c_dir,__scl_bit
000d61 dfdb      	rcall __i2c_delay1
000d62 9889      	cbi  __i2c_dir,__sda_bit
000d63 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000d64 91e9      	ld   r30,y+
000d65 e078      	ldi  r23,8
                 __i2c_write0:
000d66 0fee      	lsl  r30
000d67 f410      	brcc __i2c_write1
000d68 9889      	cbi  __i2c_dir,__sda_bit
000d69 c001      	rjmp __i2c_write2
                 __i2c_write1:
000d6a 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
000d6b dfd9      	rcall __i2c_delay2
000d6c 9888      	cbi  __i2c_dir,__scl_bit
000d6d dfcf      	rcall __i2c_delay1
                 __i2c_write3:
000d6e 9b80      	sbis __i2c_pin,__scl_bit
000d6f cffe      	rjmp __i2c_write3
000d70 dfcc      	rcall __i2c_delay1
000d71 9a88      	sbi  __i2c_dir,__scl_bit
000d72 957a      	dec  r23
000d73 f791      	brne __i2c_write0
000d74 9889      	cbi  __i2c_dir,__sda_bit
000d75 dfc7      	rcall __i2c_delay1
000d76 9888      	cbi  __i2c_dir,__scl_bit
000d77 dfcd      	rcall __i2c_delay2
000d78 e0e1      	ldi  r30,1
000d79 9981      	sbic __i2c_pin,__sda_bit
000d7a 27ee      	clr  r30
000d7b 9a88      	sbi  __i2c_dir,__scl_bit
000d7c cfc0      	rjmp __i2c_delay1
                 
                 _delay_ms:
000d7d 91e9      	ld   r30,y+
000d7e 91f9      	ld   r31,y+
000d7f 9630      	adiw r30,0
000d80 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000d81 ed80     +LDI R24 , LOW ( 0x7D0 )
000d82 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000d83 9701     +SBIW R24 , 1
000d84 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000d85 95a8      	wdr
000d86 9731      	sbiw r30,1
000d87 f7c9      	brne __delay_ms0
                 __delay_ms1:
000d88 9508      	ret
                 
                 _frexp:
000d89 91a9      	LD   R26,Y+
000d8a 91b9      	LD   R27,Y+
000d8b 91e9      	LD   R30,Y+
000d8c 91f9      	LD   R31,Y+
000d8d 9169      	LD   R22,Y+
000d8e 9179      	LD   R23,Y+
000d8f fb77      	BST  R23,7
000d90 0f66      	LSL  R22
000d91 1f77      	ROL  R23
000d92 2788      	CLR  R24
000d93 577e      	SUBI R23,0x7E
000d94 0b88      	SBC  R24,R24
000d95 937d      	ST   X+,R23
000d96 938c      	ST   X,R24
000d97 e77e      	LDI  R23,0x7E
000d98 9576      	LSR  R23
000d99 9567      	ROR  R22
000d9a f07e      	BRTS __ANEGF1
000d9b 9508      	RET
                 
                 _ldexp:
000d9c 91a9      	LD   R26,Y+
000d9d 91b9      	LD   R27,Y+
000d9e 91e9      	LD   R30,Y+
000d9f 91f9      	LD   R31,Y+
000da0 9169      	LD   R22,Y+
000da1 9179      	LD   R23,Y+
000da2 fb77      	BST  R23,7
000da3 0f66      	LSL  R22
000da4 1f77      	ROL  R23
000da5 0f7a      	ADD  R23,R26
000da6 9576      	LSR  R23
000da7 9567      	ROR  R22
000da8 f00e      	BRTS __ANEGF1
000da9 9508      	RET
                 
                 __ANEGF1:
000daa 9730      	SBIW R30,0
000dab 4060      	SBCI R22,0
000dac 4070      	SBCI R23,0
000dad f009      	BREQ __ANEGF10
000dae 5870      	SUBI R23,0x80
                 __ANEGF10:
000daf 9508      	RET
                 
                 __ROUND_REPACK:
000db0 2355      	TST  R21
000db1 f442      	BRPL __REPACK
000db2 3850      	CPI  R21,0x80
000db3 f411      	BRNE __ROUND_REPACK0
000db4 ffe0      	SBRS R30,0
000db5 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000db6 9631      	ADIW R30,1
000db7 1f69      	ADC  R22,R25
000db8 1f79      	ADC  R23,R25
000db9 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000dba e850      	LDI  R21,0x80
000dbb 2757      	EOR  R21,R23
000dbc f411      	BRNE __REPACK0
000dbd 935f      	PUSH R21
000dbe c0cf      	RJMP __ZERORES
                 __REPACK0:
000dbf 3f5f      	CPI  R21,0xFF
000dc0 f031      	BREQ __REPACK1
000dc1 0f66      	LSL  R22
000dc2 0c00      	LSL  R0
000dc3 9557      	ROR  R21
000dc4 9567      	ROR  R22
000dc5 2f75      	MOV  R23,R21
000dc6 9508      	RET
                 __REPACK1:
000dc7 935f      	PUSH R21
000dc8 2000      	TST  R0
000dc9 f00a      	BRMI __REPACK2
000dca c0cf      	RJMP __MAXRES
                 __REPACK2:
000dcb c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000dcc e850      	LDI  R21,0x80
000dcd 2e19      	MOV  R1,R25
000dce 2215      	AND  R1,R21
000dcf 0f88      	LSL  R24
000dd0 1f99      	ROL  R25
000dd1 2795      	EOR  R25,R21
000dd2 0f55      	LSL  R21
000dd3 9587      	ROR  R24
                 
                 __UNPACK1:
000dd4 e850      	LDI  R21,0x80
000dd5 2e07      	MOV  R0,R23
000dd6 2205      	AND  R0,R21
000dd7 0f66      	LSL  R22
000dd8 1f77      	ROL  R23
000dd9 2775      	EOR  R23,R21
000dda 0f55      	LSL  R21
000ddb 9567      	ROR  R22
000ddc 9508      	RET
                 
                 __CFD1U:
000ddd 9468      	SET
000dde c001      	RJMP __CFD1U0
                 __CFD1:
000ddf 94e8      	CLT
                 __CFD1U0:
000de0 935f      	PUSH R21
000de1 dff2      	RCALL __UNPACK1
000de2 3870      	CPI  R23,0x80
000de3 f018      	BRLO __CFD10
000de4 3f7f      	CPI  R23,0xFF
000de5 f408      	BRCC __CFD10
000de6 c0a7      	RJMP __ZERORES
                 __CFD10:
000de7 e156      	LDI  R21,22
000de8 1b57      	SUB  R21,R23
000de9 f4aa      	BRPL __CFD11
000dea 9551      	NEG  R21
000deb 3058      	CPI  R21,8
000dec f40e      	BRTC __CFD19
000ded 3059      	CPI  R21,9
                 __CFD19:
000dee f030      	BRLO __CFD17
000def efef      	SER  R30
000df0 efff      	SER  R31
000df1 ef6f      	SER  R22
000df2 e77f      	LDI  R23,0x7F
000df3 f977      	BLD  R23,7
000df4 c01a      	RJMP __CFD15
                 __CFD17:
000df5 2777      	CLR  R23
000df6 2355      	TST  R21
000df7 f0b9      	BREQ __CFD15
                 __CFD18:
000df8 0fee      	LSL  R30
000df9 1fff      	ROL  R31
000dfa 1f66      	ROL  R22
000dfb 1f77      	ROL  R23
000dfc 955a      	DEC  R21
000dfd f7d1      	BRNE __CFD18
000dfe c010      	RJMP __CFD15
                 __CFD11:
000dff 2777      	CLR  R23
                 __CFD12:
000e00 3058      	CPI  R21,8
000e01 f028      	BRLO __CFD13
000e02 2fef      	MOV  R30,R31
000e03 2ff6      	MOV  R31,R22
000e04 2f67      	MOV  R22,R23
000e05 5058      	SUBI R21,8
000e06 cff9      	RJMP __CFD12
                 __CFD13:
000e07 2355      	TST  R21
000e08 f031      	BREQ __CFD15
                 __CFD14:
000e09 9576      	LSR  R23
000e0a 9567      	ROR  R22
000e0b 95f7      	ROR  R31
000e0c 95e7      	ROR  R30
000e0d 955a      	DEC  R21
000e0e f7d1      	BRNE __CFD14
                 __CFD15:
000e0f 2000      	TST  R0
000e10 f40a      	BRPL __CFD16
000e11 d14e      	RCALL __ANEGD1
                 __CFD16:
000e12 915f      	POP  R21
000e13 9508      	RET
                 
                 __CDF1U:
000e14 9468      	SET
000e15 c001      	RJMP __CDF1U0
                 __CDF1:
000e16 94e8      	CLT
                 __CDF1U0:
000e17 9730      	SBIW R30,0
000e18 4060      	SBCI R22,0
000e19 4070      	SBCI R23,0
000e1a f0b1      	BREQ __CDF10
000e1b 2400      	CLR  R0
000e1c f026      	BRTS __CDF11
000e1d 2377      	TST  R23
000e1e f412      	BRPL __CDF11
000e1f 9400      	COM  R0
000e20 d13f      	RCALL __ANEGD1
                 __CDF11:
000e21 2e17      	MOV  R1,R23
000e22 e17e      	LDI  R23,30
000e23 2011      	TST  R1
                 __CDF12:
000e24 f032      	BRMI __CDF13
000e25 957a      	DEC  R23
000e26 0fee      	LSL  R30
000e27 1fff      	ROL  R31
000e28 1f66      	ROL  R22
000e29 1c11      	ROL  R1
000e2a cff9      	RJMP __CDF12
                 __CDF13:
000e2b 2fef      	MOV  R30,R31
000e2c 2ff6      	MOV  R31,R22
000e2d 2d61      	MOV  R22,R1
000e2e 935f      	PUSH R21
000e2f df8a      	RCALL __REPACK
000e30 915f      	POP  R21
                 __CDF10:
000e31 9508      	RET
                 
                 __SWAPACC:
000e32 934f      	PUSH R20
000e33 01af      	MOVW R20,R30
000e34 01fd      	MOVW R30,R26
000e35 01da      	MOVW R26,R20
000e36 01ab      	MOVW R20,R22
000e37 01bc      	MOVW R22,R24
000e38 01ca      	MOVW R24,R20
000e39 2d40      	MOV  R20,R0
000e3a 2c01      	MOV  R0,R1
000e3b 2e14      	MOV  R1,R20
000e3c 914f      	POP  R20
000e3d 9508      	RET
                 
                 __UADD12:
000e3e 0fea      	ADD  R30,R26
000e3f 1ffb      	ADC  R31,R27
000e40 1f68      	ADC  R22,R24
000e41 9508      	RET
                 
                 __NEGMAN1:
000e42 95e0      	COM  R30
000e43 95f0      	COM  R31
000e44 9560      	COM  R22
000e45 5fef      	SUBI R30,-1
000e46 4fff      	SBCI R31,-1
000e47 4f6f      	SBCI R22,-1
000e48 9508      	RET
                 
                 __SUBF12:
000e49 935f      	PUSH R21
000e4a df81      	RCALL __UNPACK
000e4b 3890      	CPI  R25,0x80
000e4c f171      	BREQ __ADDF129
000e4d e850      	LDI  R21,0x80
000e4e 2615      	EOR  R1,R21
                 
000e4f c004      	RJMP __ADDF120
                 
                 __ADDF12:
000e50 935f      	PUSH R21
000e51 df7a      	RCALL __UNPACK
000e52 3890      	CPI  R25,0x80
000e53 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000e54 3870      	CPI  R23,0x80
000e55 f121      	BREQ __ADDF128
                 __ADDF121:
000e56 2f57      	MOV  R21,R23
000e57 1b59      	SUB  R21,R25
000e58 f12b      	BRVS __ADDF1211
000e59 f412      	BRPL __ADDF122
000e5a dfd7      	RCALL __SWAPACC
000e5b cffa      	RJMP __ADDF121
                 __ADDF122:
000e5c 3158      	CPI  R21,24
000e5d f018      	BRLO __ADDF123
000e5e 27aa      	CLR  R26
000e5f 27bb      	CLR  R27
000e60 2788      	CLR  R24
                 __ADDF123:
000e61 3058      	CPI  R21,8
000e62 f028      	BRLO __ADDF124
000e63 2fab      	MOV  R26,R27
000e64 2fb8      	MOV  R27,R24
000e65 2788      	CLR  R24
000e66 5058      	SUBI R21,8
000e67 cff9      	RJMP __ADDF123
                 __ADDF124:
000e68 2355      	TST  R21
000e69 f029      	BREQ __ADDF126
                 __ADDF125:
000e6a 9586      	LSR  R24
000e6b 95b7      	ROR  R27
000e6c 95a7      	ROR  R26
000e6d 955a      	DEC  R21
000e6e f7d9      	BRNE __ADDF125
                 __ADDF126:
000e6f 2d50      	MOV  R21,R0
000e70 2551      	EOR  R21,R1
000e71 f072      	BRMI __ADDF127
000e72 dfcb      	RCALL __UADD12
000e73 f438      	BRCC __ADDF129
000e74 9567      	ROR  R22
000e75 95f7      	ROR  R31
000e76 95e7      	ROR  R30
000e77 9573      	INC  R23
000e78 f413      	BRVC __ADDF129
000e79 c020      	RJMP __MAXRES
                 __ADDF128:
000e7a dfb7      	RCALL __SWAPACC
                 __ADDF129:
000e7b df3e      	RCALL __REPACK
000e7c 915f      	POP  R21
000e7d 9508      	RET
                 __ADDF1211:
000e7e f7d8      	BRCC __ADDF128
000e7f cffb      	RJMP __ADDF129
                 __ADDF127:
000e80 1bea      	SUB  R30,R26
000e81 0bfb      	SBC  R31,R27
000e82 0b68      	SBC  R22,R24
000e83 f051      	BREQ __ZERORES
000e84 f410      	BRCC __ADDF1210
000e85 9400      	COM  R0
000e86 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000e87 2366      	TST  R22
000e88 f392      	BRMI __ADDF129
000e89 0fee      	LSL  R30
000e8a 1fff      	ROL  R31
000e8b 1f66      	ROL  R22
000e8c 957a      	DEC  R23
000e8d f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000e8e 27ee      	CLR  R30
000e8f 27ff      	CLR  R31
000e90 2766      	CLR  R22
000e91 2777      	CLR  R23
000e92 915f      	POP  R21
000e93 9508      	RET
                 
                 __MINRES:
000e94 efef      	SER  R30
000e95 efff      	SER  R31
000e96 e76f      	LDI  R22,0x7F
000e97 ef7f      	SER  R23
000e98 915f      	POP  R21
000e99 9508      	RET
                 
                 __MAXRES:
000e9a efef      	SER  R30
000e9b efff      	SER  R31
000e9c e76f      	LDI  R22,0x7F
000e9d e77f      	LDI  R23,0x7F
000e9e 915f      	POP  R21
000e9f 9508      	RET
                 
                 __MULF12:
000ea0 935f      	PUSH R21
000ea1 df2a      	RCALL __UNPACK
000ea2 3870      	CPI  R23,0x80
000ea3 f351      	BREQ __ZERORES
000ea4 3890      	CPI  R25,0x80
000ea5 f341      	BREQ __ZERORES
000ea6 2401      	EOR  R0,R1
000ea7 9408      	SEC
000ea8 1f79      	ADC  R23,R25
000ea9 f423      	BRVC __MULF124
000eaa f31c      	BRLT __ZERORES
                 __MULF125:
000eab 2000      	TST  R0
000eac f33a      	BRMI __MINRES
000ead cfec      	RJMP __MAXRES
                 __MULF124:
000eae 920f      	PUSH R0
000eaf 931f      	PUSH R17
000eb0 932f      	PUSH R18
000eb1 933f      	PUSH R19
000eb2 934f      	PUSH R20
000eb3 2711      	CLR  R17
000eb4 2722      	CLR  R18
000eb5 2799      	CLR  R25
000eb6 9f68      	MUL  R22,R24
000eb7 01a0      	MOVW R20,R0
000eb8 9f8f      	MUL  R24,R31
000eb9 2d30      	MOV  R19,R0
000eba 0d41      	ADD  R20,R1
000ebb 1f59      	ADC  R21,R25
000ebc 9f6b      	MUL  R22,R27
000ebd 0d30      	ADD  R19,R0
000ebe 1d41      	ADC  R20,R1
000ebf 1f59      	ADC  R21,R25
000ec0 9f8e      	MUL  R24,R30
000ec1 d027      	RCALL __MULF126
000ec2 9fbf      	MUL  R27,R31
000ec3 d025      	RCALL __MULF126
000ec4 9f6a      	MUL  R22,R26
000ec5 d023      	RCALL __MULF126
000ec6 9fbe      	MUL  R27,R30
000ec7 d01d      	RCALL __MULF127
000ec8 9faf      	MUL  R26,R31
000ec9 d01b      	RCALL __MULF127
000eca 9fae      	MUL  R26,R30
000ecb 0d11      	ADD  R17,R1
000ecc 1f29      	ADC  R18,R25
000ecd 1f39      	ADC  R19,R25
000ece 1f49      	ADC  R20,R25
000ecf 1f59      	ADC  R21,R25
000ed0 2fe3      	MOV  R30,R19
000ed1 2ff4      	MOV  R31,R20
000ed2 2f65      	MOV  R22,R21
000ed3 2f52      	MOV  R21,R18
000ed4 914f      	POP  R20
000ed5 913f      	POP  R19
000ed6 912f      	POP  R18
000ed7 911f      	POP  R17
000ed8 900f      	POP  R0
000ed9 2366      	TST  R22
000eda f02a      	BRMI __MULF122
000edb 0f55      	LSL  R21
000edc 1fee      	ROL  R30
000edd 1fff      	ROL  R31
000ede 1f66      	ROL  R22
000edf c002      	RJMP __MULF123
                 __MULF122:
000ee0 9573      	INC  R23
000ee1 f24b      	BRVS __MULF125
                 __MULF123:
000ee2 decd      	RCALL __ROUND_REPACK
000ee3 915f      	POP  R21
000ee4 9508      	RET
                 
                 __MULF127:
000ee5 0d10      	ADD  R17,R0
000ee6 1d21      	ADC  R18,R1
000ee7 1f39      	ADC  R19,R25
000ee8 c002      	RJMP __MULF128
                 __MULF126:
000ee9 0d20      	ADD  R18,R0
000eea 1d31      	ADC  R19,R1
                 __MULF128:
000eeb 1f49      	ADC  R20,R25
000eec 1f59      	ADC  R21,R25
000eed 9508      	RET
                 
                 __DIVF21:
000eee 935f      	PUSH R21
000eef dedc      	RCALL __UNPACK
000ef0 3870      	CPI  R23,0x80
000ef1 f421      	BRNE __DIVF210
000ef2 2011      	TST  R1
                 __DIVF211:
000ef3 f40a      	BRPL __DIVF219
000ef4 cf9f      	RJMP __MINRES
                 __DIVF219:
000ef5 cfa4      	RJMP __MAXRES
                 __DIVF210:
000ef6 3890      	CPI  R25,0x80
000ef7 f409      	BRNE __DIVF218
                 __DIVF217:
000ef8 cf95      	RJMP __ZERORES
                 __DIVF218:
000ef9 2401      	EOR  R0,R1
000efa 9408      	SEC
000efb 0b97      	SBC  R25,R23
000efc f41b      	BRVC __DIVF216
000efd f3d4      	BRLT __DIVF217
000efe 2000      	TST  R0
000eff cff3      	RJMP __DIVF211
                 __DIVF216:
000f00 2f79      	MOV  R23,R25
000f01 931f      	PUSH R17
000f02 932f      	PUSH R18
000f03 933f      	PUSH R19
000f04 934f      	PUSH R20
000f05 2411      	CLR  R1
000f06 2711      	CLR  R17
000f07 2722      	CLR  R18
000f08 2733      	CLR  R19
000f09 2744      	CLR  R20
000f0a 2755      	CLR  R21
000f0b e290      	LDI  R25,32
                 __DIVF212:
000f0c 17ae      	CP   R26,R30
000f0d 07bf      	CPC  R27,R31
000f0e 0786      	CPC  R24,R22
000f0f 0741      	CPC  R20,R17
000f10 f030      	BRLO __DIVF213
000f11 1bae      	SUB  R26,R30
000f12 0bbf      	SBC  R27,R31
000f13 0b86      	SBC  R24,R22
000f14 0b41      	SBC  R20,R17
000f15 9408      	SEC
000f16 c001      	RJMP __DIVF214
                 __DIVF213:
000f17 9488      	CLC
                 __DIVF214:
000f18 1f55      	ROL  R21
000f19 1f22      	ROL  R18
000f1a 1f33      	ROL  R19
000f1b 1c11      	ROL  R1
000f1c 1faa      	ROL  R26
000f1d 1fbb      	ROL  R27
000f1e 1f88      	ROL  R24
000f1f 1f44      	ROL  R20
000f20 959a      	DEC  R25
000f21 f751      	BRNE __DIVF212
000f22 01f9      	MOVW R30,R18
000f23 2d61      	MOV  R22,R1
000f24 914f      	POP  R20
000f25 913f      	POP  R19
000f26 912f      	POP  R18
000f27 911f      	POP  R17
000f28 2366      	TST  R22
000f29 f032      	BRMI __DIVF215
000f2a 0f55      	LSL  R21
000f2b 1fee      	ROL  R30
000f2c 1fff      	ROL  R31
000f2d 1f66      	ROL  R22
000f2e 957a      	DEC  R23
000f2f f243      	BRVS __DIVF217
                 __DIVF215:
000f30 de7f      	RCALL __ROUND_REPACK
000f31 915f      	POP  R21
000f32 9508      	RET
                 
                 __CMPF12:
000f33 2399      	TST  R25
000f34 f09a      	BRMI __CMPF120
000f35 2377      	TST  R23
000f36 f042      	BRMI __CMPF121
000f37 1797      	CP   R25,R23
000f38 f048      	BRLO __CMPF122
000f39 f429      	BRNE __CMPF121
000f3a 17ae      	CP   R26,R30
000f3b 07bf      	CPC  R27,R31
000f3c 0786      	CPC  R24,R22
000f3d f020      	BRLO __CMPF122
000f3e f031      	BREQ __CMPF123
                 __CMPF121:
000f3f 9498      	CLZ
000f40 9488      	CLC
000f41 9508      	RET
                 __CMPF122:
000f42 9498      	CLZ
000f43 9408      	SEC
000f44 9508      	RET
                 __CMPF123:
000f45 9418      	SEZ
000f46 9488      	CLC
000f47 9508      	RET
                 __CMPF120:
000f48 2377      	TST  R23
000f49 f7c2      	BRPL __CMPF122
000f4a 1797      	CP   R25,R23
000f4b f398      	BRLO __CMPF121
000f4c f7a9      	BRNE __CMPF122
000f4d 17ea      	CP   R30,R26
000f4e 07fb      	CPC  R31,R27
000f4f 0768      	CPC  R22,R24
000f50 f388      	BRLO __CMPF122
000f51 f399      	BREQ __CMPF123
000f52 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000f53 2400      	CLR  R0
000f54 0daf      	ADD  R26,R15
000f55 1db0      	ADC  R27,R0
000f56 9508      	RET
                 
                 __ADDD12:
000f57 0fea      	ADD  R30,R26
000f58 1ffb      	ADC  R31,R27
000f59 1f68      	ADC  R22,R24
000f5a 1f79      	ADC  R23,R25
000f5b 9508      	RET
                 
                 __ANEGW1:
000f5c 95f1      	NEG  R31
000f5d 95e1      	NEG  R30
000f5e 40f0      	SBCI R31,0
000f5f 9508      	RET
                 
                 __ANEGD1:
000f60 95f0      	COM  R31
000f61 9560      	COM  R22
000f62 9570      	COM  R23
000f63 95e1      	NEG  R30
000f64 4fff      	SBCI R31,-1
000f65 4f6f      	SBCI R22,-1
000f66 4f7f      	SBCI R23,-1
000f67 9508      	RET
                 
                 __LSRW2:
000f68 95f6      	LSR  R31
000f69 95e7      	ROR  R30
000f6a 95f6      	LSR  R31
000f6b 95e7      	ROR  R30
000f6c 9508      	RET
                 
                 __CWD1:
000f6d 2f6f      	MOV  R22,R31
000f6e 0f66      	ADD  R22,R22
000f6f 0b66      	SBC  R22,R22
000f70 2f76      	MOV  R23,R22
000f71 9508      	RET
                 
                 __MULW12U:
000f72 9ffa      	MUL  R31,R26
000f73 2df0      	MOV  R31,R0
000f74 9feb      	MUL  R30,R27
000f75 0df0      	ADD  R31,R0
000f76 9fea      	MUL  R30,R26
000f77 2de0      	MOV  R30,R0
000f78 0df1      	ADD  R31,R1
000f79 9508      	RET
                 
                 __MULW12:
000f7a d063      	RCALL __CHKSIGNW
000f7b dff6      	RCALL __MULW12U
000f7c f40e      	BRTC __MULW121
000f7d dfde      	RCALL __ANEGW1
                 __MULW121:
000f7e 9508      	RET
                 
                 __DIVW21U:
000f7f 2400      	CLR  R0
000f80 2411      	CLR  R1
000f81 e190      	LDI  R25,16
                 __DIVW21U1:
000f82 0faa      	LSL  R26
000f83 1fbb      	ROL  R27
000f84 1c00      	ROL  R0
000f85 1c11      	ROL  R1
000f86 1a0e      	SUB  R0,R30
000f87 0a1f      	SBC  R1,R31
000f88 f418      	BRCC __DIVW21U2
000f89 0e0e      	ADD  R0,R30
000f8a 1e1f      	ADC  R1,R31
000f8b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000f8c 60a1      	SBR  R26,1
                 __DIVW21U3:
000f8d 959a      	DEC  R25
000f8e f799      	BRNE __DIVW21U1
000f8f 01fd      	MOVW R30,R26
000f90 01d0      	MOVW R26,R0
000f91 9508      	RET
                 
                 __DIVW21:
000f92 d04b      	RCALL __CHKSIGNW
000f93 dfeb      	RCALL __DIVW21U
000f94 f40e      	BRTC __DIVW211
000f95 dfc6      	RCALL __ANEGW1
                 __DIVW211:
000f96 9508      	RET
                 
                 __DIVD21U:
000f97 933f      	PUSH R19
000f98 934f      	PUSH R20
000f99 935f      	PUSH R21
000f9a 2400      	CLR  R0
000f9b 2411      	CLR  R1
000f9c 2744      	CLR  R20
000f9d 2755      	CLR  R21
000f9e e230      	LDI  R19,32
                 __DIVD21U1:
000f9f 0faa      	LSL  R26
000fa0 1fbb      	ROL  R27
000fa1 1f88      	ROL  R24
000fa2 1f99      	ROL  R25
000fa3 1c00      	ROL  R0
000fa4 1c11      	ROL  R1
000fa5 1f44      	ROL  R20
000fa6 1f55      	ROL  R21
000fa7 1a0e      	SUB  R0,R30
000fa8 0a1f      	SBC  R1,R31
000fa9 0b46      	SBC  R20,R22
000faa 0b57      	SBC  R21,R23
000fab f428      	BRCC __DIVD21U2
000fac 0e0e      	ADD  R0,R30
000fad 1e1f      	ADC  R1,R31
000fae 1f46      	ADC  R20,R22
000faf 1f57      	ADC  R21,R23
000fb0 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000fb1 60a1      	SBR  R26,1
                 __DIVD21U3:
000fb2 953a      	DEC  R19
000fb3 f759      	BRNE __DIVD21U1
000fb4 01fd      	MOVW R30,R26
000fb5 01bc      	MOVW R22,R24
000fb6 01d0      	MOVW R26,R0
000fb7 01ca      	MOVW R24,R20
000fb8 915f      	POP  R21
000fb9 914f      	POP  R20
000fba 913f      	POP  R19
000fbb 9508      	RET
                 
                 __MODW21:
000fbc 94e8      	CLT
000fbd ffb7      	SBRS R27,7
000fbe c004      	RJMP __MODW211
000fbf 95a0      	COM  R26
000fc0 95b0      	COM  R27
000fc1 9611      	ADIW R26,1
000fc2 9468      	SET
                 __MODW211:
000fc3 fdf7      	SBRC R31,7
000fc4 df97      	RCALL __ANEGW1
000fc5 dfb9      	RCALL __DIVW21U
000fc6 01fd      	MOVW R30,R26
000fc7 f40e      	BRTC __MODW212
000fc8 df93      	RCALL __ANEGW1
                 __MODW212:
000fc9 9508      	RET
                 
                 __MODD21:
000fca 94e8      	CLT
000fcb ff97      	SBRS R25,7
000fcc c009      	RJMP __MODD211
000fcd 95a0      	COM  R26
000fce 95b0      	COM  R27
000fcf 9580      	COM  R24
000fd0 9590      	COM  R25
000fd1 5faf      	SUBI R26,-1
000fd2 4fbf      	SBCI R27,-1
000fd3 4f8f      	SBCI R24,-1
000fd4 4f9f      	SBCI R25,-1
000fd5 9468      	SET
                 __MODD211:
000fd6 fd77      	SBRC R23,7
000fd7 df88      	RCALL __ANEGD1
000fd8 dfbe      	RCALL __DIVD21U
000fd9 01fd      	MOVW R30,R26
000fda 01bc      	MOVW R22,R24
000fdb f40e      	BRTC __MODD212
000fdc df83      	RCALL __ANEGD1
                 __MODD212:
000fdd 9508      	RET
                 
                 __CHKSIGNW:
000fde 94e8      	CLT
000fdf fff7      	SBRS R31,7
000fe0 c002      	RJMP __CHKSW1
000fe1 df7a      	RCALL __ANEGW1
000fe2 9468      	SET
                 __CHKSW1:
000fe3 ffb7      	SBRS R27,7
000fe4 c006      	RJMP __CHKSW2
000fe5 95a0      	COM  R26
000fe6 95b0      	COM  R27
000fe7 9611      	ADIW R26,1
000fe8 f800      	BLD  R0,0
000fe9 9403      	INC  R0
000fea fa00      	BST  R0,0
                 __CHKSW2:
000feb 9508      	RET
                 
                 __GETW1P:
000fec 91ed      	LD   R30,X+
000fed 91fc      	LD   R31,X
000fee 9711      	SBIW R26,1
000fef 9508      	RET
                 
                 __PUTDP1:
000ff0 93ed      	ST   X+,R30
000ff1 93fd      	ST   X+,R31
000ff2 936d      	ST   X+,R22
000ff3 937c      	ST   X,R23
000ff4 9508      	RET
                 
                 __GETW1PF:
000ff5 9005      	LPM  R0,Z+
000ff6 91f4      	LPM  R31,Z
000ff7 2de0      	MOV  R30,R0
000ff8 9508      	RET
                 
                 __GETD1S0:
000ff9 81e8      	LD   R30,Y
000ffa 81f9      	LDD  R31,Y+1
000ffb 816a      	LDD  R22,Y+2
000ffc 817b      	LDD  R23,Y+3
000ffd 9508      	RET
                 
                 __PUTD1S0:
000ffe 83e8      	ST   Y,R30
000fff 83f9      	STD  Y+1,R31
001000 836a      	STD  Y+2,R22
001001 837b      	STD  Y+3,R23
001002 9508      	RET
                 
                 __PUTPARD1:
001003 937a      	ST   -Y,R23
001004 936a      	ST   -Y,R22
001005 93fa      	ST   -Y,R31
001006 93ea      	ST   -Y,R30
001007 9508      	RET
                 
                 __SWAPD12:
001008 2e18      	MOV  R1,R24
001009 2f86      	MOV  R24,R22
00100a 2d61      	MOV  R22,R1
00100b 2e19      	MOV  R1,R25
00100c 2f97      	MOV  R25,R23
00100d 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00100e 2e1b      	MOV  R1,R27
00100f 2fbf      	MOV  R27,R31
001010 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
001011 2e1a      	MOV  R1,R26
001012 2fae      	MOV  R26,R30
001013 2de1      	MOV  R30,R1
001014 9508      	RET
                 
                 __CPD10:
001015 9730      	SBIW R30,0
001016 4060      	SBCI R22,0
001017 4070      	SBCI R23,0
001018 9508      	RET
                 
                 __CPD02:
001019 2400      	CLR  R0
00101a 160a      	CP   R0,R26
00101b 060b      	CPC  R0,R27
00101c 0608      	CPC  R0,R24
00101d 0609      	CPC  R0,R25
00101e 9508      	RET
                 
                 __CPD12:
00101f 17ea      	CP   R30,R26
001020 07fb      	CPC  R31,R27
001021 0768      	CPC  R22,R24
001022 0779      	CPC  R23,R25
001023 9508      	RET
                 
                 __SAVELOCR6:
001024 935a      	ST   -Y,R21
                 __SAVELOCR5:
001025 934a      	ST   -Y,R20
                 __SAVELOCR4:
001026 933a      	ST   -Y,R19
                 __SAVELOCR3:
001027 932a      	ST   -Y,R18
                 __SAVELOCR2:
001028 931a      	ST   -Y,R17
001029 930a      	ST   -Y,R16
00102a 9508      	RET
                 
                 __LOADLOCR6:
00102b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00102c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00102d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00102e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00102f 8119      	LDD  R17,Y+1
001030 8108      	LD   R16,Y
001031 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  56 r1 :  41 r2 :   0 r3 :   0 r4 :   6 r5 :   3 r6 :   4 r7 :   2 
r8 :   2 r9 :   2 r10:   3 r11:   0 r12:   4 r13:   4 r14:   0 r15:   6 
r16:  74 r17:  66 r18:  46 r19:  26 r20:  38 r21:  86 r22: 121 r23: 119 
r24:  93 r25:  75 r26: 207 r27: 113 r28:  29 r29:   1 r30: 745 r31: 301 
x  :  29 y  : 419 z  :  20 
Registers used: 31 out of 35 (88.6%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  21 
adiw  :  38 and   :   5 andi  :  10 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   1 break :   0 breq  :  48 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  18 
brlt  :  10 brmi  :  10 brne  :  76 brpl  :   9 brsh  :   5 brtc  :   6 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   5 call  : 403 
cbi   :  25 cbr   :   1 clc   :   4 clh   :   0 cli   :   2 cln   :   0 
clr   :  46 cls   :   0 clt   :   6 clv   :   0 clz   :   2 com   :  16 
cp    :  17 cpc   :  46 cpi   :  75 cpse  :   0 dec   :  19 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   6 inc   :   5 jmp   :  59 ld    :  77 ldd   : 146 
ldi   : 486 lds   :  57 lpm   :  20 lsl   :  19 lsr   :   7 mov   :  56 
movw  :  65 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   1 
or    :   4 ori   :  10 out   :  36 pop   :  40 push  :  40 rcall :  93 
ret   : 122 reti  :   6 rjmp  : 197 rol   :  39 ror   :  19 sbc   :  14 
sbci  :  27 sbi   :  27 sbic  :  15 sbis  :  20 sbiw  :  41 sbr   :   4 
sbrc  :   5 sbrs  :  15 sec   :   6 seh   :   0 sei   :   2 sen   :   0 
ser   :   8 ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 170 std   :  60 sts   :  92 sub   :   8 subi  :  36 
swap  :   1 tst   :  23 wdr   :   1 
Instructions used: 84 out of 117 (71.8%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x002064   7604    688   8292  131072   6.3%
[.dseg] 0x000100 0x000685      0    389    389    4351   8.9%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 10 warnings
