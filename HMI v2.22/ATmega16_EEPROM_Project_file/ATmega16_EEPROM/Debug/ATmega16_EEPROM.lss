
ATmega16_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000021c  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000058f  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000272  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000373  00000000  00000000  00000b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000bc  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a5  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000262  00000000  00000000  00001205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00001467  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/eeprom.h>						/* Include AVR EEPROM header file */
#include <string.h>							/* Include string header file */
#include "LCD_16x2_H_file.h"				/* Include LCD header file */

int main()
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	6e 97       	sbiw	r28, 0x1e	; 30
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
	char R_array[15],W_array[15] = "EEPROM TEST";
  9a:	8c e0       	ldi	r24, 0x0C	; 12
  9c:	e0 e6       	ldi	r30, 0x60	; 96
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	de 01       	movw	r26, r28
  a2:	50 96       	adiw	r26, 0x10	; 16
  a4:	01 90       	ld	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	8a 95       	dec	r24
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x22>
  ac:	1c 8e       	std	Y+28, r1	; 0x1c
  ae:	1d 8e       	std	Y+29, r1	; 0x1d
  b0:	1e 8e       	std	Y+30, r1	; 0x1e
	LCD_Init();
  b2:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_Init>
	memset(R_array,0,15);
  b6:	fe 01       	movw	r30, r28
  b8:	31 96       	adiw	r30, 0x01	; 1
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	df 01       	movw	r26, r30
  be:	1d 92       	st	X+, r1
  c0:	8a 95       	dec	r24
  c2:	e9 f7       	brne	.-6      	; 0xbe <main+0x3c>
	eeprom_busy_wait();						/* Initialize LCD */
  c4:	e1 99       	sbic	0x1c, 1	; 28
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <main+0x42>
	eeprom_write_block(W_array,0,strlen(W_array));/* Write Write_array from EEPROM address 0 */
  c8:	8e 01       	movw	r16, r28
  ca:	00 5f       	subi	r16, 0xF0	; 240
  cc:	1f 4f       	sbci	r17, 0xFF	; 255
  ce:	f8 01       	movw	r30, r16
  d0:	01 90       	ld	r0, Z+
  d2:	00 20       	and	r0, r0
  d4:	e9 f7       	brne	.-6      	; 0xd0 <main+0x4e>
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	af 01       	movw	r20, r30
  da:	40 1b       	sub	r20, r16
  dc:	51 0b       	sbc	r21, r17
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	c8 01       	movw	r24, r16
  e4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__eewr_block_m16>
	eeprom_read_block(R_array,0,strlen(W_array));/* Read EEPROM from address 0 */
  e8:	f8 01       	movw	r30, r16
  ea:	01 90       	ld	r0, Z+
  ec:	00 20       	and	r0, r0
  ee:	e9 f7       	brne	.-6      	; 0xea <main+0x68>
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	af 01       	movw	r20, r30
  f4:	40 1b       	sub	r20, r16
  f6:	51 0b       	sbc	r21, r17
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__eerd_block_m16>
	LCD_String(R_array);					/* Print Read_array on LCD */
 104:	ce 01       	movw	r24, r28
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_String>
	return(0);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	6e 96       	adiw	r28, 0x1e	; 30
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
 126:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	89 7f       	andi	r24, 0xF9	; 249
 12c:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
 12e:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Command+0xc>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Command+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 138:	a8 98       	cbi	0x15, 0	; 21
 13a:	87 ec       	ldi	r24, 0xC7	; 199
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_Command+0x18>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_Command+0x1e>
 144:	00 00       	nop
 146:	08 95       	ret

00000148 <LCD_Char>:
	_delay_us(100);									/* Wait little bit */
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
 148:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
 14a:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	85 60       	ori	r24, 0x05	; 5
 150:	85 bb       	out	0x15, r24	; 21
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Char+0xc>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Char+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 15a:	a8 98       	cbi	0x15, 0	; 21
 15c:	87 ec       	ldi	r24, 0xC7	; 199
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Char+0x18>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Char+0x1e>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <LCD_Init>:
	_delay_us(100);									/* Wait little bit */
}

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
 16a:	84 b3       	in	r24, 0x14	; 20
 16c:	87 60       	ori	r24, 0x07	; 7
 16e:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	9c e9       	ldi	r25, 0x9C	; 156
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Init+0xe>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Init+0x14>
 17e:	00 00       	nop
	
	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
 180:	88 e3       	ldi	r24, 0x38	; 56
 182:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
 186:	8c e0       	ldi	r24, 0x0C	; 12
 188:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	LCD_Command (0x06);								/* Auto Increment cursor */
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD command */
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 198:	8f e9       	ldi	r24, 0x9F	; 159
 19a:	9f e0       	ldi	r25, 0x0F	; 15
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Init+0x32>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Init+0x38>
 1a2:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 1aa:	08 95       	ret

000001ac <LCD_String>:
}

void LCD_String (char *str)							/* Send string to LCD function */
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 1b2:	88 81       	ld	r24, Y
 1b4:	88 23       	and	r24, r24
 1b6:	31 f0       	breq	.+12     	; 0x1c4 <LCD_String+0x18>
 1b8:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 1ba:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_Char>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 1be:	89 91       	ld	r24, Y+
 1c0:	81 11       	cpse	r24, r1
 1c2:	fb cf       	rjmp	.-10     	; 0x1ba <LCD_String+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <__eerd_block_m16>:
 1ca:	dc 01       	movw	r26, r24
 1cc:	cb 01       	movw	r24, r22

000001ce <__eerd_blraw_m16>:
 1ce:	fc 01       	movw	r30, r24
 1d0:	e1 99       	sbic	0x1c, 1	; 28
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <__eerd_blraw_m16+0x2>
 1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <__eerd_blraw_m16+0x14>
 1d6:	ff bb       	out	0x1f, r31	; 31
 1d8:	ee bb       	out	0x1e, r30	; 30
 1da:	e0 9a       	sbi	0x1c, 0	; 28
 1dc:	31 96       	adiw	r30, 0x01	; 1
 1de:	0d b2       	in	r0, 0x1d	; 29
 1e0:	0d 92       	st	X+, r0
 1e2:	41 50       	subi	r20, 0x01	; 1
 1e4:	50 40       	sbci	r21, 0x00	; 0
 1e6:	b8 f7       	brcc	.-18     	; 0x1d6 <__eerd_blraw_m16+0x8>
 1e8:	08 95       	ret

000001ea <__eewr_block_m16>:
 1ea:	dc 01       	movw	r26, r24
 1ec:	cb 01       	movw	r24, r22
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__eewr_block_m16+0xc>
 1f0:	2d 91       	ld	r18, X+
 1f2:	0e 94 00 01 	call	0x200	; 0x200 <__eewr_r18_m16>
 1f6:	41 50       	subi	r20, 0x01	; 1
 1f8:	50 40       	sbci	r21, 0x00	; 0
 1fa:	d0 f7       	brcc	.-12     	; 0x1f0 <__eewr_block_m16+0x6>
 1fc:	08 95       	ret

000001fe <__eewr_byte_m16>:
 1fe:	26 2f       	mov	r18, r22

00000200 <__eewr_r18_m16>:
 200:	e1 99       	sbic	0x1c, 1	; 28
 202:	fe cf       	rjmp	.-4      	; 0x200 <__eewr_r18_m16>
 204:	9f bb       	out	0x1f, r25	; 31
 206:	8e bb       	out	0x1e, r24	; 30
 208:	2d bb       	out	0x1d, r18	; 29
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	e2 9a       	sbi	0x1c, 2	; 28
 210:	e1 9a       	sbi	0x1c, 1	; 28
 212:	0f be       	out	0x3f, r0	; 63
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	08 95       	ret

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
