
AVRASM ver. 2.1.30  E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm Thu Jan 30 16:55:30 2020

E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1090): warning: Register r4 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1091): warning: Register r5 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1092): warning: Register r6 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1093): warning: Register r7 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1094): warning: Register r8 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1095): warning: Register r9 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1096): warning: Register r10 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1097): warning: Register r11 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1098): warning: Register r13 already defined by the .DEF directive
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1099): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _msg=R4
                 	.DEF _msg_msb=R5
                 	.DEF _xmitMsg=R6
                 	.DEF _xmitMsg_msb=R7
                 	.DEF _rec=R8
                 	.DEF _rec_msb=R9
                 	.DEF _rdata=R10
                 	.DEF _rdata_msb=R11
                 	.DEF _data=R13
                 	.DEF _rx_wr_index0=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0195 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 024d 	JMP  _ext_int4_isr
00000c 940c 024e 	JMP  _ext_int5_isr
00000e 940c 024f 	JMP  _ext_int6_isr
000010 940c 0250 	JMP  _ext_int7_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0251 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0276 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 02c3 	JMP  _timer3_ovf_isr
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00004f 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1156): warning: .cseg .db misalignment - padding zero byte
000050 0000      	.DB  0x0
                 
                 _0x6:
000051 01e3
000052 01e4
000053 01ed
000054 01ff      	.DB  LOW(_noOp),HIGH(_noOp),LOW(_mainOn),HIGH(_mainOn),LOW(_mainOff),HIGH(_mainOff),LOW(_resetFault),HIGH(_resetFault)
000055 0206
000056 0209      	.DB  LOW(_readVolt),HIGH(_readVolt),LOW(_readAmp),HIGH(_readAmp)
                 _0xF:
000057 020f
000058 0210
000059 021a
00005a 021d      	.DB  LOW(_rnoOp),HIGH(_rnoOp),LOW(_rmainOn),HIGH(_rmainOn),LOW(_rmainOff),HIGH(_rmainOff),LOW(_rresetFault),HIGH(_rresetFault)
00005b 0224
00005c 0235      	.DB  LOW(_rreadVolt),HIGH(_rreadVolt),LOW(_rreadAmp),HIGH(_rreadAmp)
                 _0x35:
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1165): warning: .cseg .db misalignment - padding zero byte
00005d 0001      	.DB  0x1
                 _0x0:
00005e 6e45
00005f 6574
000060 6972
000061 676e      	.DB  0x45,0x6E,0x74,0x65,0x72,0x69,0x6E,0x67
000062 5320
000063 666f
000064 2d74
000065 7453      	.DB  0x20,0x53,0x6F,0x66,0x74,0x2D,0x53,0x74
000066 7261
000067 0074
000068 303c
000069 3130      	.DB  0x61,0x72,0x74,0x0,0x3C,0x30,0x30,0x31
00006a 003e
00006b 6e45
00006c 6574
00006d 6972      	.DB  0x3E,0x0,0x45,0x6E,0x74,0x65,0x72,0x69
00006e 676e
00006f 5320
000070 666f
000071 2d74      	.DB  0x6E,0x67,0x20,0x53,0x6F,0x66,0x74,0x2D
000072 7453
000073 706f
000074 3c00
000075 3030      	.DB  0x53,0x74,0x6F,0x70,0x0,0x3C,0x30,0x30
000076 3e32
000077 5200
000078 7365
000079 7465      	.DB  0x32,0x3E,0x0,0x52,0x65,0x73,0x65,0x74
00007a 6974
00007b 676e
00007c 4620
00007d 7561      	.DB  0x74,0x69,0x6E,0x67,0x20,0x46,0x61,0x75
00007e 746c
00007f 0073
000080 303c
000081 3330      	.DB  0x6C,0x74,0x73,0x0,0x3C,0x30,0x30,0x33
000082 003e
000083 303c
000084 3430
000085 003e      	.DB  0x3E,0x0,0x3C,0x30,0x30,0x34,0x3E,0x0
000086 303c
000087 3530
000088 003e
000089 6854      	.DB  0x3C,0x30,0x30,0x35,0x3E,0x0,0x54,0x68
00008a 2065
00008b 7953
00008c 7473
00008d 6d65      	.DB  0x65,0x20,0x53,0x79,0x73,0x74,0x65,0x6D
00008e 6820
00008f 7361
000090 7420
000091 7275      	.DB  0x20,0x68,0x61,0x73,0x20,0x74,0x75,0x72
000092 656e
000093 2064
000094 6e6f
000095 5400      	.DB  0x6E,0x65,0x64,0x20,0x6F,0x6E,0x0,0x54
000096 6568
000097 5320
000098 7379
000099 6574      	.DB  0x68,0x65,0x20,0x53,0x79,0x73,0x74,0x65
00009a 206d
00009b 6168
00009c 2073
00009d 7574      	.DB  0x6D,0x20,0x68,0x61,0x73,0x20,0x74,0x75
00009e 6e72
00009f 6465
0000a0 6f20
0000a1 6666      	.DB  0x72,0x6E,0x65,0x64,0x20,0x6F,0x66,0x66
0000a2 4600
0000a3 7561
0000a4 746c
0000a5 2073      	.DB  0x0,0x46,0x61,0x75,0x6C,0x74,0x73,0x20
0000a6 6168
0000a7 6576
0000a8 6220
0000a9 6565      	.DB  0x68,0x61,0x76,0x65,0x20,0x62,0x65,0x65
0000aa 206e
0000ab 6572
0000ac 6573
0000ad 0074      	.DB  0x6E,0x20,0x72,0x65,0x73,0x65,0x74,0x0
0000ae 6f63
0000af 6d6d
0000b0 6e61
0000b1 2064      	.DB  0x63,0x6F,0x6D,0x6D,0x61,0x6E,0x64,0x20
0000b2 7473
0000b3 7261
0000b4 0074
0000b5 6f63      	.DB  0x73,0x74,0x61,0x72,0x74,0x0,0x63,0x6F
0000b6 6d6d
0000b7 6e61
0000b8 2064
0000b9 6e65      	.DB  0x6D,0x6D,0x61,0x6E,0x64,0x20,0x65,0x6E
0000ba 0064
0000bb 0020
0000bc 005e
0000bd 3025      	.DB  0x64,0x0,0x20,0x0,0x5E,0x0,0x25,0x30
0000be 6433
0000bf 5600
0000c0 6c6f
0000c1 6174      	.DB  0x33,0x64,0x0,0x56,0x6F,0x6C,0x74,0x61
0000c2 6567
0000c3 7320
0000c4 7465
0000c5 7420      	.DB  0x67,0x65,0x20,0x73,0x65,0x74,0x20,0x74
0000c6 3a6f
0000c7 5300
0000c8 7465
0000c9 7620      	.DB  0x6F,0x3A,0x0,0x53,0x65,0x74,0x20,0x76
0000ca 6c61
0000cb 6575
0000cc 7320
0000cd 6f68      	.DB  0x61,0x6C,0x75,0x65,0x20,0x73,0x68,0x6F
0000ce 6c75
0000cf 0064
0000d0 6562
0000d1 6220      	.DB  0x75,0x6C,0x64,0x0,0x62,0x65,0x20,0x62
0000d2 7465
0000d3 6577
0000d4 6e65
0000d5 3120      	.DB  0x65,0x74,0x77,0x65,0x65,0x6E,0x20,0x31
0000d6 3031
0000d7 002d
0000d8 3331
0000d9 2035      	.DB  0x31,0x30,0x2D,0x0,0x31,0x33,0x35,0x20
0000da 6f76
0000db 746c
0000dc 0073
0000dd 7543      	.DB  0x76,0x6F,0x6C,0x74,0x73,0x0,0x43,0x75
0000de 7272
0000df 6e65
0000e0 2074
0000e1 6573      	.DB  0x72,0x72,0x65,0x6E,0x74,0x20,0x73,0x65
0000e2 2074
0000e3 6f74
0000e4 003a
0000e5 6562      	.DB  0x74,0x20,0x74,0x6F,0x3A,0x0,0x62,0x65
0000e6 6220
0000e7 7465
0000e8 6577
0000e9 6e65      	.DB  0x20,0x62,0x65,0x74,0x77,0x65,0x65,0x6E
0000ea 3120
0000eb 2d30
0000ec 3200
0000ed 2030      	.DB  0x20,0x31,0x30,0x2D,0x0,0x32,0x30,0x20
0000ee 6d61
0000ef 7370
0000f0 5700
0000f1 6c65      	.DB  0x61,0x6D,0x70,0x73,0x0,0x57,0x65,0x6C
0000f2 6f63
0000f3 656d
0000f4 7420
0000f5 206f      	.DB  0x63,0x6F,0x6D,0x65,0x20,0x74,0x6F,0x20
0000f6 4d48
0000f7 0049
0000f8 6553
0000f9 2074      	.DB  0x48,0x4D,0x49,0x0,0x53,0x65,0x74,0x20
0000fa 6150
0000fb 6172
0000fc 656d
0000fd 6574      	.DB  0x50,0x61,0x72,0x61,0x6D,0x65,0x74,0x65
0000fe 7372
0000ff 5300
000100 6e65
000101 6f73      	.DB  0x72,0x73,0x0,0x53,0x65,0x6E,0x73,0x6F
000102 2072
000103 6156
000104 756c
000105 7365      	.DB  0x72,0x20,0x56,0x61,0x6C,0x75,0x65,0x73
000106 5000
000107 5241
000108 4d41
000109 5445      	.DB  0x0,0x50,0x41,0x52,0x41,0x4D,0x45,0x54
00010a 5245
00010b 0053
00010c 6f56
00010d 746c      	.DB  0x45,0x52,0x53,0x0,0x56,0x6F,0x6C,0x74
00010e 6761
00010f 2065
000110 5628
000111 4c4f      	.DB  0x61,0x67,0x65,0x20,0x28,0x56,0x4F,0x4C
000112 5354
000113 0029
000114 7543
000115 7272      	.DB  0x54,0x53,0x29,0x0,0x43,0x75,0x72,0x72
000116 6e65
000117 2074
000118 4128
000119 504d      	.DB  0x65,0x6E,0x74,0x20,0x28,0x41,0x4D,0x50
00011a 2953
00011b 5300
00011c 7465
00011d 7620      	.DB  0x53,0x29,0x0,0x53,0x65,0x74,0x20,0x76
00011e 6c6f
00011f 6174
000120 6567
000121 003a      	.DB  0x6F,0x6C,0x74,0x61,0x67,0x65,0x3A,0x0
000122 6553
000123 2074
000124 7563
000125 7272      	.DB  0x53,0x65,0x74,0x20,0x63,0x75,0x72,0x72
000126 6e65
000127 3a74
000128 5300
000129 4e45      	.DB  0x65,0x6E,0x74,0x3A,0x0,0x53,0x45,0x4E
00012a 4f53
00012b 5352
00012c 4100
00012d 616e      	.DB  0x53,0x4F,0x52,0x53,0x0,0x41,0x6E,0x61
00012e 6f6c
00012f 0067
000130 6944
000131 6967      	.DB  0x6C,0x6F,0x67,0x0,0x44,0x69,0x67,0x69
000132 6174
000133 006c
000134 6854
000135 7265      	.DB  0x74,0x61,0x6C,0x0,0x54,0x68,0x65,0x72
000136 6f6d
000137 6f63
000138 7075
000139 656c      	.DB  0x6D,0x6F,0x63,0x6F,0x75,0x70,0x6C,0x65
00013a 4e00
00013b 206f
00013c 7566
00013d 636e      	.DB  0x0,0x4E,0x6F,0x20,0x66,0x75,0x6E,0x63
00013e 6974
00013f 6e6f
000140 2073
000141 2020      	.DB  0x74,0x69,0x6F,0x6E,0x73,0x20,0x20,0x20
000142 2020
000143 2020
000144 2020
000145 6120      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x61
000146 6464
000147 6465
000148 7920
000149 7465      	.DB  0x64,0x64,0x65,0x64,0x20,0x79,0x65,0x74
00014a 4300
00014b 3068
00014c 003a
00014d 6843      	.DB  0x0,0x43,0x68,0x30,0x3A,0x0,0x43,0x68
00014e 3a31
00014f 4300
000150 3268
000151 003a      	.DB  0x31,0x3A,0x0,0x43,0x68,0x32,0x3A,0x0
000152 6843
000153 3a33
000154 4300
000155 3468      	.DB  0x43,0x68,0x33,0x3A,0x0,0x43,0x68,0x34
000156 003a
000157 6843
000158 3a35
000159 4300      	.DB  0x3A,0x0,0x43,0x68,0x35,0x3A,0x0,0x43
00015a 3668
00015b 003a
00015c 6843
00015d 3a37      	.DB  0x68,0x36,0x3A,0x0,0x43,0x68,0x37,0x3A
00015e 4500
00015f 7272
000160 726f
000161 002e      	.DB  0x0,0x45,0x72,0x72,0x6F,0x72,0x2E,0x0
000162 6552
000163 7473
000164 7261
000165 6974      	.DB  0x52,0x65,0x73,0x74,0x61,0x72,0x74,0x69
000166 676e
000167 6920
000168 206e
000169 2035      	.DB  0x6E,0x67,0x20,0x69,0x6E,0x20,0x35,0x20
00016a 6573
00016b 6f63
00016c 646e
00016d 2e73      	.DB  0x73,0x65,0x63,0x6F,0x6E,0x64,0x73,0x2E
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1235): warning: .cseg .db misalignment - padding zero byte
00016e 0000      	.DB  0x0
                 _0x2020060:
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1237): warning: .cseg .db misalignment - padding zero byte
00016f 0001      	.DB  0x1
                 _0x2020000:
000170 4e2d
000171 4e41
000172 4900
000173 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\PDC- Battery Charger\HMI v2.21\List\ver1.asm(1240): warning: .cseg .db misalignment - padding zero byte
000174 0000      	.DB  0x0
                 _0x2060003:
000175 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000176 0001      	.DW  0x01
000177 0002      	.DW  0x02
000178 009e      	.DW  __REG_BIT_VARS*2
                 
000179 0001      	.DW  0x01
00017a 000c      	.DW  0x0C
00017b 00a0      	.DW  __REG_VARS*2
                 
00017c 0001      	.DW  0x01
00017d 05e4      	.DW  _Screen
00017e 00ba      	.DW  _0x35*2
                 
00017f 0010      	.DW  0x10
000180 0500      	.DW  _0x5E
000181 017f      	.DW  _0x0*2+195
                 
000182 0010      	.DW  0x10
000183 0510      	.DW  _0x77
000184 01ba      	.DW  _0x0*2+254
                 
000185 000f      	.DW  0x0F
000186 0520      	.DW  _0x7F
000187 01e1      	.DW  _0x0*2+293
                 
000188 0007      	.DW  0x07
000189 052f      	.DW  _0xA8
00018a 02bd      	.DW  _0x0*2+513
                 
00018b 0019      	.DW  0x19
00018c 0536      	.DW  _0xA8+7
00018d 02c4      	.DW  _0x0*2+520
                 
00018e 0001      	.DW  0x01
00018f 05fc      	.DW  __seed_G101
000190 02de      	.DW  _0x2020060*2
                 
000191 0002      	.DW  0x02
000192 0600      	.DW  __base_y_G103
000193 02ea      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
000194 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000195 94f8      	CLI
000196 27ee      	CLR  R30
000197 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000198 e0f1      	LDI  R31,1
000199 bff5      	OUT  MCUCR,R31
00019a bfe5      	OUT  MCUCR,R30
00019b 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00019d e1f8      	LDI  R31,0x18
00019e bdf1      	OUT  WDTCR,R31
00019f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0001a0 e08d      	LDI  R24,(14-2)+1
0001a1 e0a2      	LDI  R26,2
0001a2 27bb      	CLR  R27
                 __CLEAR_REG:
0001a3 93ed      	ST   X+,R30
0001a4 958a      	DEC  R24
0001a5 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001a6 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001a7 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001a8 e0a0      	LDI  R26,LOW(__SRAM_START)
0001a9 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0001aa 93ed      	ST   X+,R30
0001ab 9701      	SBIW R24,1
0001ac f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001ad eeec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001ae e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001af 9185      	LPM  R24,Z+
0001b0 9195      	LPM  R25,Z+
0001b1 9700      	SBIW R24,0
0001b2 f061      	BREQ __GLOBAL_INI_END
0001b3 91a5      	LPM  R26,Z+
0001b4 91b5      	LPM  R27,Z+
0001b5 9005      	LPM  R0,Z+
0001b6 9015      	LPM  R1,Z+
0001b7 01bf      	MOVW R22,R30
0001b8 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001b9 9005      	LPM  R0,Z+
0001ba 920d      	ST   X+,R0
0001bb 9701      	SBIW R24,1
0001bc f7e1      	BRNE __GLOBAL_INI_LOOP
0001bd 01fb      	MOVW R30,R22
0001be cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0001bf bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001c0 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001c1 bfed      	OUT  SPL,R30
0001c2 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001c3 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001c4 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001c5 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001c6 940c 0312 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <Math.h>
                 ;#include "commands.c"
                 ;/*
                 ; * commands.c
                 ; *
                 ; *  Created on: Jan 10, 2020
                 ; *      Author: Mr.Yash
                 ; */
                 ;
                 ;//#include <Serial.h>
                 ;#include <commands.h>
                 ;#include <alcd.h>
                 ;#include <ver1.h>
                 ;flash char *msg;
                 ;flash char *xmitMsg;
                 ;flash char *rec;
                 ;flash char *rdata;
                 ;char sdataA[5];    // Send data for SCI-A
                 ;char rdataA[4]; // Received data for SCI-A
                 ;char data;
                 ;int comStart;
                 ;int i = 0;
                 ;
                 ;    //commands will be given a 3 digit numeric code based on the button pressed;
                 ;    //Stored values for the particular option-
                 ;
                 ;    //    000-  noOp
                 ;    //    001-  mainOn
                 ;    //    002-  mainOff
                 ;    //    003-  resetFault
                 ;    //    004-  readVolt
                 ;    //    005-  readAmp
                 ;    //    006-
                 ;    //    007-
                 ;    //    008-
                 ;    //    009-
                 ;    //    010-
                 ;    //    011-
                 ;    //    012-
                 ;    //    013-
                 ;    //    014-
                 ;    //    015-
                 ;    //    016-
                 ;    //    017-
                 ;    //    018-
                 ;    //    019-
                 ;    //    020-
                 ;    //    021-
                 ;    //    022-
                 ;    //    023-
                 ;    //    024-
                 ;    //    025-
                 ;    //    026-
                 ;    //    027-
                 ;    //    028-
                 ;    //    029-
                 ;    //    030-
                 ;    //    031-
                 ;    //    032-
                 ;    //    033-
                 ;    //    034-
                 ;    //    035-
                 ;    //    036-
                 ;    //    037-
                 ;    //    038-
                 ;    //    039-
                 ;
                 ;void xmitString(flash char * xmitMsg)
                 ; 0000 0007 {
                 
                 	.CSEG
                 _xmitString:
                 ; .FSTART _xmitString
                 ;    int i =0;
                 ;    for(i = 0;*(xmitMsg+i)!= '\0';i++)
0001c8 93ba      	ST   -Y,R27
0001c9 93aa      	ST   -Y,R26
0001ca 931a      	ST   -Y,R17
0001cb 930a      	ST   -Y,R16
                 ;	*xmitMsg -> Y+2
                 ;	i -> R16,R17
                +
0001cc e000     +LDI R16 , LOW ( 0 )
0001cd e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001ce e000     +LDI R16 , LOW ( 0 )
0001cf e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4:
0001d0 01f8      	MOVW R30,R16
0001d1 81aa      	LDD  R26,Y+2
0001d2 81bb      	LDD  R27,Y+2+1
0001d3 0fea      	ADD  R30,R26
0001d4 1ffb      	ADC  R31,R27
0001d5 91e4      	LPM  R30,Z
0001d6 30e0      	CPI  R30,0
0001d7 f041      	BREQ _0x5
                 ;    {
                 ;         putchar(xmitMsg[i]);
0001d8 01f8      	MOVW R30,R16
0001d9 0fea      	ADD  R30,R26
0001da 1ffb      	ADC  R31,R27
0001db 91a4      	LPM  R26,Z
0001dc d0bd      	RCALL _putchar
                 ;
                 ;    }
                +
0001dd 5f0f     +SUBI R16 , LOW ( - 1 )
0001de 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001df cff0      	RJMP _0x4
                 _0x5:
                 ;
                 ;
                 ;
                 ;}
0001e0 8119      	LDD  R17,Y+1
0001e1 8108      	LDD  R16,Y+0
0001e2 c068      	RJMP _0x2120004
                 ; .FEND
                 ;
                 ;void noOp()
                 ;{
                 _noOp:
                 ; .FSTART _noOp
                 ;
                 ;}
0001e3 9508      	RET
                 ; .FEND
                 ;
                 ;void mainOn()
                 ;{
                 _mainOn:
                 ; .FSTART _mainOn
                 ;    lcd_clear();
0001e4 940e 03d3 	CALL _lcd_clear
                 ;    lcd_putsf("Entering Soft-Start");
                +
0001e6 ebac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0001e7 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0001e8 940e 0401 	CALL _lcd_putsf
                 ;    xmitMsg ="<001>";
                +
0001ea ede0     +LDI R30 , LOW ( 2 * _0x0 + ( 20 ) )
0001eb e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 20 ) )
                 	__POINTW1FN _0x0,20
0001ec c008      	RJMP _0x2120007
                 ;    xmitString(xmitMsg);
                 ;    delay_ms(500);
                 ;
                 ;    lcd_clear();
                 ;
                 ;
                 ;}
                 ; .FEND
                 ;
                 ;void mainOff()
                 ;{
                 _mainOff:
                 ; .FSTART _mainOff
                 ;    lcd_clear();
0001ed 940e 03d3 	CALL _lcd_clear
                 ;    lcd_putsf("Entering Soft-Stop");
                +
0001ef eda6     +LDI R26 , LOW ( 2 * _0x0 + ( 26 ) )
0001f0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 26 ) )
                 	__POINTW2FN _0x0,26
0001f1 940e 0401 	CALL _lcd_putsf
                 ;    xmitMsg = "<002>";
                +
0001f3 eee9     +LDI R30 , LOW ( 2 * _0x0 + ( 45 ) )
0001f4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 45 ) )
                 	__POINTW1FN _0x0,45
                 _0x2120007:
0001f5 013f      	MOVW R6,R30
                 ;    xmitString(xmitMsg);
0001f6 01d3      	MOVW R26,R6
0001f7 dfd0      	RCALL _xmitString
                 ;    delay_ms(500);
0001f8 efa4      	LDI  R26,LOW(500)
0001f9 e0b1      	LDI  R27,HIGH(500)
0001fa 940e 04d0 	CALL _delay_ms
                 ;    lcd_clear();
0001fc 940e 03d3 	CALL _lcd_clear
                 ;}
0001fe 9508      	RET
                 ; .FEND
                 ;
                 ;void resetFault()
                 ;{
                 _resetFault:
                 ; .FSTART _resetFault
                 ;    lcd_putsf("Resetting Faults");
                +
0001ff eeaf     +LDI R26 , LOW ( 2 * _0x0 + ( 51 ) )
000200 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 51 ) )
                 	__POINTW2FN _0x0,51
000201 940e 0401 	CALL _lcd_putsf
                 ;    xmitMsg = "<003>";
                +
000203 e0e0     +LDI R30 , LOW ( 2 * _0x0 + ( 68 ) )
000204 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 68 ) )
                 	__POINTW1FN _0x0,68
000205 c005      	RJMP _0x2120006
                 ;    xmitString(xmitMsg);
                 ;
                 ;}
                 ; .FEND
                 ;
                 ;void readVolt()
                 ;{
                 _readVolt:
                 ; .FSTART _readVolt
                 ;    xmitMsg = "<004>";
                +
000206 e0e6     +LDI R30 , LOW ( 2 * _0x0 + ( 74 ) )
000207 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 74 ) )
                 	__POINTW1FN _0x0,74
000208 c002      	RJMP _0x2120006
                 ;    xmitString(xmitMsg);
                 ;    //voltVal = recVolt();
                 ;    //msg = sprintf("\nVoltage is: %d",voltVal);
                 ;    //lcd_putsf(msg);
                 ;
                 ;}
                 ; .FEND
                 ;
                 ;void readAmp()
                 ;{
                 _readAmp:
                 ; .FSTART _readAmp
                 ;    xmitMsg = "<005>";
                +
000209 e0ec     +LDI R30 , LOW ( 2 * _0x0 + ( 80 ) )
00020a e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 80 ) )
                 	__POINTW1FN _0x0,80
                 _0x2120006:
00020b 013f      	MOVW R6,R30
                 ;    xmitString(xmitMsg);
00020c 01d3      	MOVW R26,R6
00020d dfba      	RCALL _xmitString
                 ;    //ampVal = recAmp();
                 ;    //msg = sprintf("\nCurrent is: %d",ampVal);
                 ;    //lcd_putsf(msg);
                 ;}
00020e 9508      	RET
                 ; .FEND
                 ;
                 ;static void (*xmitFunc[100])() = {
                 ;    noOp,mainOn,mainOff,resetFault,readVolt,readAmp
                 ;    };
                 
                 	.DSEG
                 ;
                 ;
                 ;
                 ;
                 ;//On receiving response from the TMS, further actions are taken by recFunc array
                 ;void rnoOp()
                 ;{
                 
                 	.CSEG
                 _rnoOp:
                 ; .FSTART _rnoOp
                 ;
                 ;}
00020f 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void rmainOn()
                 ;{
                 _rmainOn:
                 ; .FSTART _rmainOn
                 ;    flash char*msg ="The System has turned on";
                 ;    lcd_putsf(msg);                            //function to display message on the lcd
000210 931a      	ST   -Y,R17
000211 930a      	ST   -Y,R16
                 ;	*msg -> R16,R17
                +
000212 e102     +LDI R16 , LOW ( _0x0 * 2 + ( 86 ) )
000213 e011     +LDI R17 , HIGH ( _0x0 * 2 + ( 86 ) )
                 	__POINTWRFN 16,17,_0x0,86
000214 01d8      	MOVW R26,R16
000215 940e 0401 	CALL _lcd_putsf
                 ;
                 ;}
000217 9109      	LD   R16,Y+
000218 9119      	LD   R17,Y+
000219 9508      	RET
                 ; .FEND
                 ;
                 ;void rmainOff()
                 ;{
                 _rmainOff:
                 ; .FSTART _rmainOff
                 ;    msg = "The System has turned off";
                +
00021a e2eb     +LDI R30 , LOW ( 2 * _0x0 + ( 111 ) )
00021b e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 111 ) )
                 	__POINTW1FN _0x0,111
00021c c002      	RJMP _0x2120005
                 ;    lcd_putsf(msg);
                 ;
                 ;}
                 ; .FEND
                 ;
                 ;void rresetFault()
                 ;{
                 _rresetFault:
                 ; .FSTART _rresetFault
                 ;    msg = "Faults have been reset";
                +
00021d e4e5     +LDI R30 , LOW ( 2 * _0x0 + ( 137 ) )
00021e e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 137 ) )
                 	__POINTW1FN _0x0,137
                 _0x2120005:
00021f 012f      	MOVW R4,R30
                 ;    lcd_putsf(msg);
000220 01d2      	MOVW R26,R4
000221 940e 0401 	CALL _lcd_putsf
                 ;
                 ;}
000223 9508      	RET
                 ; .FEND
                 ;
                 ;void rreadVolt()
                 ;{
                 _rreadVolt:
                 ; .FSTART _rreadVolt
                 ;    int i;flash char *tempRdata;
                 ;    for(i=5;*(rec+i-1)!='\0';i++)
000224 940e 04da 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	*tempRdata -> R18,R19
                +
000226 e005     +LDI R16 , LOW ( 5 )
000227 e010     +LDI R17 , HIGH ( 5 )
                 	__GETWRN 16,17,5
                 _0x8:
000228 940e 0461 	CALL SUBOPT_0x0
00022a f049      	BREQ _0x9
                 ;    {
                 ;        tempRdata= (rec+i);
00022b 940e 0468 	CALL SUBOPT_0x1
                 ;        if(i==5)  rdata = tempRdata;
00022d f409      	BRNE _0xA
00022e 0159      	MOVW R10,R18
                 ;        tempRdata++;
                 _0xA:
                +
00022f 5f2f     +SUBI R18 , LOW ( - 1 )
000230 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
                +
000231 5f0f     +SUBI R16 , LOW ( - 1 )
000232 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000233 cff4      	RJMP _0x8
                 _0x9:
                 ;
                 ;    msg = rdata;
000234 c010      	RJMP _0x2120003
                 ;    lcd_putsf(msg);
                 ;
                 ;}
                 ; .FEND
                 ;
                 ;void rreadAmp()
                 ;{
                 _rreadAmp:
                 ; .FSTART _rreadAmp
                 ;    int i;flash char *tempRdata;
                 ;    for(i=5;*(rec+i-1)!='\0';i++)
000235 940e 04da 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	*tempRdata -> R18,R19
                +
000237 e005     +LDI R16 , LOW ( 5 )
000238 e010     +LDI R17 , HIGH ( 5 )
                 	__GETWRN 16,17,5
                 _0xC:
000239 940e 0461 	CALL SUBOPT_0x0
00023b f049      	BREQ _0xD
                 ;    {
                 ;        tempRdata= (rec+i);
00023c 940e 0468 	CALL SUBOPT_0x1
                 ;        if(i==5)  rdata = tempRdata;
00023e f409      	BRNE _0xE
00023f 0159      	MOVW R10,R18
                 ;        tempRdata++;
                 _0xE:
                +
000240 5f2f     +SUBI R18 , LOW ( - 1 )
000241 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ;    }
                +
000242 5f0f     +SUBI R16 , LOW ( - 1 )
000243 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000244 cff4      	RJMP _0xC
                 _0xD:
                 ;    msg = rdata;
                 _0x2120003:
000245 0125      	MOVW R4,R10
                 ;    lcd_putsf(msg);
000246 01d2      	MOVW R26,R4
000247 940e 0401 	CALL _lcd_putsf
                 ;
                 ;}
000249 940e 04df 	CALL __LOADLOCR4
                 _0x2120004:
00024b 9624      	ADIW R28,4
00024c 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;static void (*recFunc[100])() = {rnoOp,rmainOn,rmainOff,rresetFault,rreadVolt,rreadAmp
                 ;    };
                 
                 	.DSEG
                 ;
                 ;
                 ;void recOp()
                 ;{
                 
                 	.CSEG
                 ;                                                                                                   /* char recArray[100] ...
                 ;                                                                                                    char cmd[3]={'','',' ...
                 ;                                                                                                    int icmd = 0;
                 ;                                                                                                    int i = 0;
                 ;                                                                                                    //char tempRec[100];
                 ;                                                                                                    do
                 ;                                                                                                    {
                 ;                                                                                                        recArray[i++] =  ...
                 ;
                 ;                                                                                                    }while(recArray[i]!= ...
                 ;                                                                                                //    char *rec = "<001- ...
                 ;                                                                                                    for(i=1;i<4;i++)
                 ;                                                                                                    {
                 ;                                                                                                       cmd[i-1] = *(recA ...
                 ;                                                                                                    }
                 ;
                 ;                                                                                                    icmd = cmd[2]-'0'+(( ...
                 ;                                                                                                    putchar(icmd);
                 ;                                                                                                    //recFunc[icmd]();*/
                 ;
                 ;    data = getchar();;
                 ;    if(data=='<')
                 ;    {
                 ;        comStart = 1;
                 ;        i=0;
                 ;        xmitString("command start");
                 ;    }
                 ;    else if(data =='>')
                 ;       {
                 ;           comStart = 0;
                 ;           i=0;xmitString("command end");comDecode(rdataA);
                 ;       }
                 ;    if (comStart == 1)
                 ;        {
                 ;            *(rdataA+i)=data;  // Read data
                 ;            i++;if(i==5){i=0;}
                 ;        }
                 ;}
                 ;
                 ;
                 ;void comDecode(char * rec)
                 ;{
                 ;
                 ;    char cmd[3]={'0','0','0'};
                 ;    int icmd = 0;
                 ;    int i;
                 ;
                 ;    for(i = 0;i<5;i++)
                 ;	*rec -> Y+7
                 ;	cmd -> Y+4
                 ;	icmd -> R16,R17
                 ;	i -> R18,R19
                 ;    {
                 ;        putchar(*(rec+i));
                 ;    }
                 ;
                 ;
                 ;    for(i=1;i<4;i++)
                 ;    {
                 ;       cmd[i-1] = rec[i];
                 ;    }
                 ;
                 ;    icmd = cmd[2]-'0'+((cmd[1]-'0')*10)+((cmd[0]-'0')*100);
                 ;    putchar(icmd);
                 ;    //func[icmd]();
                 ;}
                 ;// I2C Bus functions
                 ;#asm
                    .equ __i2c_port=0x12 ;PORTD
                    .equ __sda_bit=1
                    .equ __scl_bit=0
                 ; 0000 000D #endasm
                 ;
                 ;#include <i2c.h>
                 ;
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#include <alcd.h>
                 ;
                 ;// External Interrupt 4 service routine
                 ;interrupt [EXT_INT4] void ext_int4_isr(void)
                 ; 0000 0019 {
                 _ext_int4_isr:
                 ; .FSTART _ext_int4_isr
                 ; 0000 001A 
                 ; 0000 001B 
                 ; 0000 001C }
00024d 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 5 service routine
                 ;interrupt [EXT_INT5] void ext_int5_isr(void)
                 ; 0000 0020 {
                 _ext_int5_isr:
                 ; .FSTART _ext_int5_isr
                 ; 0000 0021 // Place your code here
                 ; 0000 0022 
                 ; 0000 0023 }
00024e 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 6 service routine
                 ;interrupt [EXT_INT6] void ext_int6_isr(void)
                 ; 0000 0027 {
                 _ext_int6_isr:
                 ; .FSTART _ext_int6_isr
                 ; 0000 0028 // Place your code here
                 ; 0000 0029 
                 ; 0000 002A }
00024f 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 7 service routine
                 ;interrupt [EXT_INT7] void ext_int7_isr(void)
                 ; 0000 002E {
                 _ext_int7_isr:
                 ; .FSTART _ext_int7_isr
                 ; 0000 002F // Place your code here
                 ; 0000 0030 
                 ; 0000 0031 }
000250 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 64
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;
                 ;int on_pressed = 0;
                 ;int off_pressed = 0;
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0074 {
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
000251 93aa      	ST   -Y,R26
000252 93ea      	ST   -Y,R30
000253 93fa      	ST   -Y,R31
000254 b7ef      	IN   R30,SREG
000255 93ea      	ST   -Y,R30
                 ; 0000 0075 char status,data;
                 ; 0000 0076 status=UCSR0A;
000256 931a      	ST   -Y,R17
000257 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000258 b11b      	IN   R17,11
                 ; 0000 0077 data=UDR0;
000259 b10c      	IN   R16,12
                 ; 0000 0078 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00025a 2fe1      	MOV  R30,R17
00025b 71ec      	ANDI R30,LOW(0x1C)
00025c f4b1      	BRNE _0x1B
                 ; 0000 0079    {
                 ; 0000 007A    rx_buffer0[rx_wr_index0++]=data;
00025d 2dec      	MOV  R30,R12
00025e 94c3      	INC  R12
00025f e0f0      	LDI  R31,0
000260 5ae9      	SUBI R30,LOW(-_rx_buffer0)
000261 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
000262 8300      	ST   Z,R16
                 ; 0000 007B #if RX_BUFFER_SIZE0 == 256
                 ; 0000 007C    // special case for receiver buffer size=256
                 ; 0000 007D    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 007E #else
                 ; 0000 007F    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
000263 e4e0      	LDI  R30,LOW(64)
000264 15ec      	CP   R30,R12
000265 f409      	BRNE _0x1C
000266 24cc      	CLR  R12
                 ; 0000 0080    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x1C:
000267 91a0 0598 	LDS  R26,_rx_counter0
000269 5faf      	SUBI R26,-LOW(1)
00026a 93a0 0598 	STS  _rx_counter0,R26
00026c 34a0      	CPI  R26,LOW(0x40)
00026d f429      	BRNE _0x1D
                 ; 0000 0081       {
                 ; 0000 0082       rx_counter0=0;
00026e e0e0      	LDI  R30,LOW(0)
00026f 93e0 0598 	STS  _rx_counter0,R30
                 ; 0000 0083       rx_buffer_overflow0=1;
000271 9468      	SET
000272 f820      	BLD  R2,0
                 ; 0000 0084       }
                 ; 0000 0085 #endif
                 ; 0000 0086    }//recOp();
                 _0x1D:
                 ; 0000 0087 }
                 _0x1B:
000273 9109      	LD   R16,Y+
000274 9119      	LD   R17,Y+
000275 c01e      	RJMP _0xB8
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;
                 ;
                 ;
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0091 {
                 ; 0000 0092 char data;
                 ; 0000 0093 while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 0094 data=rx_buffer0[rx_rd_index0++];
                 ; 0000 0095 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0096 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0097 #endif
                 ; 0000 0098 #asm("cli")
                 ; 0000 0099 --rx_counter0;
                 ; 0000 009A #asm("sei")
                 ; 0000 009B return data;
                 ; 0000 009C }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 64
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0=0,tx_rd_index0=0;
                 ;#else
                 ;unsigned int tx_wr_index0=0,tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;unsigned char tx_counter0=0;
                 ;#else
                 ;unsigned int tx_counter0=0;
                 ;#endif
                 ;
                 ;
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 00B6 {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
000276 93aa      	ST   -Y,R26
000277 93ea      	ST   -Y,R30
000278 93fa      	ST   -Y,R31
000279 b7ef      	IN   R30,SREG
00027a 93ea      	ST   -Y,R30
                 ; 0000 00B7 if (tx_counter0)
00027b 91e0 05df 	LDS  R30,_tx_counter0
00027d 30e0      	CPI  R30,0
00027e f0a9      	BREQ _0x22
                 ; 0000 00B8    {
                 ; 0000 00B9    --tx_counter0;
00027f 50e1      	SUBI R30,LOW(1)
000280 93e0 05df 	STS  _tx_counter0,R30
                 ; 0000 00BA    UDR0=tx_buffer0[tx_rd_index0++];
000282 91e0 05de 	LDS  R30,_tx_rd_index0
000284 5fef      	SUBI R30,-LOW(1)
000285 93e0 05de 	STS  _tx_rd_index0,R30
000287 50e1      	SUBI R30,LOW(1)
000288 e0f0      	LDI  R31,0
000289 56e3      	SUBI R30,LOW(-_tx_buffer0)
00028a 4ffa      	SBCI R31,HIGH(-_tx_buffer0)
00028b 81e0      	LD   R30,Z
00028c b9ec      	OUT  0xC,R30
                 ; 0000 00BB #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00BC    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
00028d 91a0 05de 	LDS  R26,_tx_rd_index0
00028f 34a0      	CPI  R26,LOW(0x40)
000290 f419      	BRNE _0x23
000291 e0e0      	LDI  R30,LOW(0)
000292 93e0 05de 	STS  _tx_rd_index0,R30
                 ; 0000 00BD #endif
                 ; 0000 00BE    }
                 _0x23:
                 ; 0000 00BF }
                 _0x22:
                 _0xB8:
000294 91e9      	LD   R30,Y+
000295 bfef      	OUT  SREG,R30
000296 91f9      	LD   R31,Y+
000297 91e9      	LD   R30,Y+
000298 91a9      	LD   R26,Y+
000299 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;
                 ;
                 ;
                 ;
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 00CA {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 00CB while (tx_counter0 == TX_BUFFER_SIZE0);
00029a 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x24:
00029b 91a0 05df 	LDS  R26,_tx_counter0
00029d 34a0      	CPI  R26,LOW(0x40)
00029e f3e1      	BREQ _0x24
                 ; 0000 00CC #asm("cli")
00029f 94f8      	cli
                 ; 0000 00CD if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
0002a0 91e0 05df 	LDS  R30,_tx_counter0
0002a2 30e0      	CPI  R30,0
0002a3 f411      	BRNE _0x28
0002a4 995d      	SBIC 0xB,5
0002a5 c018      	RJMP _0x27
                 _0x28:
                 ; 0000 00CE    {
                 ; 0000 00CF    tx_buffer0[tx_wr_index0++]=c;
0002a6 91e0 05dd 	LDS  R30,_tx_wr_index0
0002a8 5fef      	SUBI R30,-LOW(1)
0002a9 93e0 05dd 	STS  _tx_wr_index0,R30
0002ab 50e1      	SUBI R30,LOW(1)
0002ac e0f0      	LDI  R31,0
0002ad 56e3      	SUBI R30,LOW(-_tx_buffer0)
0002ae 4ffa      	SBCI R31,HIGH(-_tx_buffer0)
0002af 81a8      	LD   R26,Y
0002b0 83a0      	STD  Z+0,R26
                 ; 0000 00D0 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00D1    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
0002b1 91a0 05dd 	LDS  R26,_tx_wr_index0
0002b3 34a0      	CPI  R26,LOW(0x40)
0002b4 f419      	BRNE _0x2A
0002b5 e0e0      	LDI  R30,LOW(0)
0002b6 93e0 05dd 	STS  _tx_wr_index0,R30
                 ; 0000 00D2 #endif
                 ; 0000 00D3    ++tx_counter0;
                 _0x2A:
0002b8 91e0 05df 	LDS  R30,_tx_counter0
0002ba 5fef      	SUBI R30,-LOW(1)
0002bb 93e0 05df 	STS  _tx_counter0,R30
                 ; 0000 00D4    }
                 ; 0000 00D5 else
0002bd c002      	RJMP _0x2B
                 _0x27:
                 ; 0000 00D6    UDR0=c;
0002be 81e8      	LD   R30,Y
0002bf b9ec      	OUT  0xC,R30
                 ; 0000 00D7 #asm("sei")
                 _0x2B:
0002c0 9478      	sei
                 ; 0000 00D8 }
0002c1 940c 0440 	JMP  _0x2120002
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;
                 ;short int on_button_state = 0x0000;
                 ;short int off_button_state = 0x0000;
                 ;
                 ;
                 ;// Timer3 overflow interrupt service routine
                 ;interrupt[TIM3_OVF] void timer3_ovf_isr(void) {
                 ; 0000 00E3 interrupt[30] void timer3_ovf_isr(void) {
                 _timer3_ovf_isr:
                 ; .FSTART _timer3_ovf_isr
0002c3 93aa      	ST   -Y,R26
0002c4 93ba      	ST   -Y,R27
0002c5 93ea      	ST   -Y,R30
0002c6 93fa      	ST   -Y,R31
0002c7 b7ef      	IN   R30,SREG
0002c8 93ea      	ST   -Y,R30
                 ; 0000 00E4 
                 ; 0000 00E5     // ISR called every 8.595 msec when TCCRB = 0x09, and OCR3A = 0xFFFF
                 ; 0000 00E6 
                 ; 0000 00E7     // switch debounce logic. refer: https://www.embedded.com/electronics-blogs/break-points/4024981/My-favorite-softwar ...
                 ; 0000 00E8     // 16 bit shifts = approx 130msec debounce delay
                 ; 0000 00E9 on_button_state = (0x8000 | !PINE.4) | (on_button_state << 1);
0002c9 e0e0      	LDI  R30,0
0002ca 9b0c      	SBIS 0x1,4
0002cb e0e1      	LDI  R30,1
0002cc e0f0      	LDI  R31,0
0002cd 68f0      	ORI  R31,HIGH(0x8000)
0002ce 01df      	MOVW R26,R30
0002cf 91e0 05e0 	LDS  R30,_on_button_state
0002d1 91f0 05e1 	LDS  R31,_on_button_state+1
0002d3 0fee      	LSL  R30
0002d4 1fff      	ROL  R31
0002d5 2bea      	OR   R30,R26
0002d6 2bfb      	OR   R31,R27
0002d7 93e0 05e0 	STS  _on_button_state,R30
0002d9 93f0 05e1 	STS  _on_button_state+1,R31
                 ; 0000 00EA     if(on_button_state == 0xC000) {
0002db 91a0 05e0 	LDS  R26,_on_button_state
0002dd 91b0 05e1 	LDS  R27,_on_button_state+1
0002df 30a0      	CPI  R26,LOW(0xC000)
0002e0 ece0      	LDI  R30,HIGH(0xC000)
0002e1 07be      	CPC  R27,R30
0002e2 f439      	BRNE _0x2C
                 ; 0000 00EB        PORTC.3 = 0;
0002e3 98ab      	CBI  0x15,3
                 ; 0000 00EC        on_pressed = 1;
0002e4 e0e1      	LDI  R30,LOW(1)
0002e5 e0f0      	LDI  R31,HIGH(1)
0002e6 93e0 0599 	STS  _on_pressed,R30
0002e8 93f0 059a 	STS  _on_pressed+1,R31
                 ; 0000 00ED 
                 ; 0000 00EE     }
                 ; 0000 00EF 
                 ; 0000 00F0     off_button_state = (0x8000 | !PINE.5) | (off_button_state << 1);
                 _0x2C:
0002ea e0e0      	LDI  R30,0
0002eb 9b0d      	SBIS 0x1,5
0002ec e0e1      	LDI  R30,1
0002ed e0f0      	LDI  R31,0
0002ee 68f0      	ORI  R31,HIGH(0x8000)
0002ef 01df      	MOVW R26,R30
0002f0 91e0 05e2 	LDS  R30,_off_button_state
0002f2 91f0 05e3 	LDS  R31,_off_button_state+1
0002f4 0fee      	LSL  R30
0002f5 1fff      	ROL  R31
0002f6 2bea      	OR   R30,R26
0002f7 2bfb      	OR   R31,R27
0002f8 93e0 05e2 	STS  _off_button_state,R30
0002fa 93f0 05e3 	STS  _off_button_state+1,R31
                 ; 0000 00F1     if(off_button_state == 0xC000 ) {
0002fc 91a0 05e2 	LDS  R26,_off_button_state
0002fe 91b0 05e3 	LDS  R27,_off_button_state+1
000300 30a0      	CPI  R26,LOW(0xC000)
000301 ece0      	LDI  R30,HIGH(0xC000)
000302 07be      	CPC  R27,R30
000303 f439      	BRNE _0x2F
                 ; 0000 00F2         PORTC.3 = 1;
000304 9aab      	SBI  0x15,3
                 ; 0000 00F3        off_pressed = 1;
000305 e0e1      	LDI  R30,LOW(1)
000306 e0f0      	LDI  R31,HIGH(1)
000307 93e0 059b 	STS  _off_pressed,R30
000309 93f0 059c 	STS  _off_pressed+1,R31
                 ; 0000 00F4     }
                 ; 0000 00F5 
                 ; 0000 00F6 
                 ; 0000 00F7 }
                 _0x2F:
00030b 91e9      	LD   R30,Y+
00030c bfef      	OUT  SREG,R30
00030d 91f9      	LD   R31,Y+
00030e 91e9      	LD   R30,Y+
00030f 91b9      	LD   R27,Y+
000310 91a9      	LD   R26,Y+
000311 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;#define ADC_VREF_TYPE 0x00
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 00FD {
                 ; 0000 00FE ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
                 ; 0000 00FF // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0100 delay_us(10);
                 ; 0000 0101 // Start the AD conversion
                 ; 0000 0102 ADCSRA|=0x40;
                 ; 0000 0103 // Wait for the AD conversion to complete
                 ; 0000 0104 while ((ADCSRA & 0x10)==0);
                 ; 0000 0105 ADCSRA|=0x10;
                 ; 0000 0106 return ADCW;
                 ; 0000 0107 }
                 ;
                 ;
                 ;
                 ;// SPI functions
                 ;#include <spi.h>
                 ;//---------------THERMOCOUPLE------------
                 ;#include "Thermocouple.c"
                 ;//ThermoInit(void);
                 ;/*
                 ;/*
                 ; *  Define literals for the SPI port accesses and the thermocouple chip
                 ; *  select line.
                 ; */
                 ;#define  PORT_THERMO_CS           PORTE
                 ;#define  DDR_THERMO_CS            DDRE
                 ;#define  BIT_THERMO_CS            3
                 ;#define  MASK_THERMO_CS           (1<<BIT_THERMO_CS)
                 ;
                 ;#define  PORT_SPI                 PORTB
                 ;#define  DDR_SPI                  DDRB
                 ;#define  BIT_SPI_SCK              1
                 ;#define  MASK_SPI_SCK             (1<<BIT_SPI_SCK)
                 ;#define  BIT_SPI_SS               0
                 ;#define  MASK_SPI_SS              (1<<BIT_SPI_SS)
                 ;#define  BIT_SPI_MISO             3
                 ;#define  MASK_SPI_MISO            (1<<BIT_SPI_MISO)
                 ;
                 ;/*
                 ; *  ThermoInit      set up hardware for using the MAX31855
                 ; *
                 ; *  This routine configures the SPI as a master for exchanging
                 ; *  data with the MAX31855 thermocouple converter.  All pins
                 ; *  and registers for accessing the various port lines are
                 ; *  defined at the top of this code as named literals.
                 ; */
                 ;/*
                 ;void  ThermoInit(void)
                 ;{
                 ;    PORT_THERMO_CS |= MASK_THERMO_CS;        // start with CS high
                 ;    DDR_THERMO_CS |= MASK_THERMO_CS;         // now make that line an output
                 ;
                 ;    PORT_SPI |= MASK_SPI_SS;                 // SS* is not used but must be driven high
                 ;    DDR_SPI |= MASK_SPI_SS;                  // SS* is not used but must be driven high
                 ;    PORT_SPI &= ~MASK_SPI_SCK;               // drive SCK low
                 ;    DDR_SPI |= MASK_SPI_SCK;                 // now make SCK an output
                 ;
                 ;    SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0) | (1<<SPR1) | (1<<CPHA);
                 ;                                             // enable SPI as master, slowest clock,
                 ;                                             // data active on trailing edge of SCK
                 ;}
                 ;
                 ;
                 ;/*
                 ; *  ThermoReadRaw      return 32-bit raw value from MAX31855
                 ; *
                 ; *  This routine uses a four-byte SPI exchange to collect a
                 ; *  raw reading from the MAX31855 thermocouple converter.  That
                 ; *  value is returned unprocessed to the calling routine.
                 ; *
                 ; *  Note that this routine does NO processing.  It does not
                 ; *  check for error flags or reasonable data ranges.
                 ;
                 ;//  d = 0x01900000;            // thermocouple = +25C, reference = 0C, no faults
                 ;//  d = 0xfff00000;            // thermocouple = -1C, reference = 0C, no faults
                 ;//  d = 0xf0600000;            // thermocouple = -250C, reference = 0C, no faults
                 ;//  d = 0x00010001;            // thermocouple = N/A, reference = N/A, open fault
                 ;//  d = 0x00010002;            // thermocouple = N/A, reference = N/A, short to GND
                 ;//  d = 0x00010004;            // thermocouple = N/A, refernece = N/A, short to VCC
                 ;*/
                 ;
                 ;/*
                 ;signed int  ThermoReadRaw (void)
                 ;{
                 ;    signed int                   d;
                 ;    unsigned char                n;
                 ;
                 ;    PORT_THERMO_CS &= ~MASK_THERMO_CS;    // pull thermo CS low
                 ;    d = 0;                                // start with nothing
                 ;    for (n=3; n!=0xff; n--)
                 ;    {
                 ;        SPDR = 0;                         // send a null byte
                 ;        while ((SPSR & (1<<SPIF)) == 0)  ;    // wait until transfer ends
                 ;        d = (d<<8) + SPDR;                // add next byte, starting with MSB
                 ;    }
                 ;    PORT_THERMO_CS |= MASK_THERMO_CS;     // done, pull CS high
                 ;    return  d;
                 ;}
                 ;
                 ;/*
                 ; *  ThermoReadC      return thermocouple temperature in degrees C
                 ; *
                 ; *  This routine takes a raw reading from the thermocouple converter
                 ; *  and translates that value into a temperature in degrees C.  That
                 ; *  value is returned to the calling routine as an integer value,
                 ; *  rounded.
                 ; *
                 ; *  The thermocouple value is stored in bits 31-18 as a signed 14-bit
                 ; *  value, where the LSB represents 0.25 degC.  To convert to an
                 ; *  integer value with no intermediate float operations, this code
                 ; *  shifts the value 20 places right, rather than 18, effectively
                 ; *  dividing the raw value by 4 and scaling it to unit degrees.
                 ; *
                 ; *  Note that this routine does NOT check the error flags in the
                 ; *  raw value.  This would be a nice thing to add later, when I've
                 ; *  figured out how I want to propagate the error conditions...
                 ; */
                 ; /*
                 ;int  ThermoReadC(void)
                 ;{
                 ;    signed int d;
                 ;    int neg;
                 ;
                 ;
                 ;    neg = 0;                    // assume a positive raw value
                 ;    d = ThermoReadRaw();        // get a raw value
                 ;    d = ((d >> 10) & 0x3fff);   // leave only thermocouple value in d
                 ;    if (d & 0x2000)             // if thermocouple reading is negative...
                 ;    {
                 ;        d = -d & 0x3fff;        // always work with positive values
                 ;        neg = 1;                // but note original value was negative
                 ;    }
                 ;    d = d + 2;                  // round up by 0.5 degC (2 LSBs)
                 ;    d = d >> 2;                 // now convert from 0.25 degC units to degC
                 ;    if (neg)  d = -d;           // convert to negative if needed
                 ;    return  d;                  // return as integer
                 ;}
                 ;   */
                 ;
                 ;/*
                 ; *  ThermoReadF      return thermocouple temperature in degrees F
                 ; *
                 ; *  This routine takes a reading from the thermocouple converter in
                 ; *  degC and converts it to degF.
                 ; *
                 ; *  Note that this routine simply calls ThermoReadC and converts
                 ; *  from degC to degF using integer math.  This routine does not
                 ; *  see the raw converter value and cannot do any error checking.
                 ; */
                 ;/*int  ThermoReadF(void)
                 ;{
                 ;    int t;
                 ;
                 ;    t = ThermoReadC();           // get the value in degC
                 ;    t = ((t * 90) / 50) + 32;    // convert to degF
                 ;    return  t;                   // all done
                 ;}*/
                 ;
                 ;
                 ;//---------------Variables---------------
                 ;#include <variables.h>
                 
                 	.DSEG
                 ;//-------------Display Functions---------
                 ;#include "Display_functions.c"
                 ;//#include <variables.h>
                 ;
                 ;void pointer_display_horiz()                          //checks the cursor position.
                 ; 0000 0112 {
                 
                 	.CSEG
                 ;    lcd_gotoxy(0,2);
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(1,2);
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(2,2);
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(3,2);
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(Pointer_horiz,2);                      //Pointer displays arrow at that position
                 ;    lcd_putsf("^");
                 ;}
                 ;
                 ;void pointer_display_vert()                          //checks the cursor position.
                 ;{
                 ;    lcd_gotoxy(0,0);
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(0,1);
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(0,2);
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(0,3);
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(0,Pointer_vert);                      //Pointer displays arrow at that position
                 ;    lcd_putsf(">");
                 ;}
                 ;
                 ;
                 ;
                 ;void show_volt()
                 ;{
                 ;    sprintf(disp_volt,"%03d",voltage);
                 ;    lcd_gotoxy(0,1);
                 ;    lcd_puts(disp_volt);
                 ;}
                 ;void show_current()
                 ;{
                 ;    sprintf(disp_current,"%03d",current);
                 ;    lcd_gotoxy(0,1);
                 ;    lcd_puts(disp_current);
                 ;}
                 ;//----Input and val change functions-----
                 ;#include "Change.c"
                 ;#include "Inputs.c"
                 ;//#include <variables.h>
                 ;
                 ;
                 ;
                 ;void input(int next)                         //next recieves value no of options we will have in the next menu
                 ; 0000 0115 {   //int next = 4;
                 ;    //int flag = 0;
                 ;    Pt = Pointer_vert;
                 ;	next -> Y+0
                 ;    pointer_display_vert();
                 ;    delay_ms(100);
                 ;    if (PINE.2 == 0)                                            //UP
                 ;       {
                 ;        while(PINE.2 == 0);
                 ;        Pt--;
                 ;        Pointer_vert = ((Pt < 0) ? (next+Pt): Pt) % next;
                 ;        pointer_display_vert();
                 ;       }
                 ;
                 ;    if (PINE.3 == 0)                                            //DOWN
                 ;       {
                 ;        while(PINE.3 == 0);
                 ;        Pointer_vert++;
                 ;        Pointer_vert = Pointer_vert % next;
                 ;        pointer_display_vert();
                 ;       }
                 ;
                 ;    if (PINE.0 == 0)                                            //ENTER
                 ;       {
                 ;        while(PINE.0 == 0);
                 ;        if(Screen < 10)
                 ;        {
                 ;            Screen = ((Screen+1)*10) + Pointer_vert;
                 ;        }
                 ;        else
                 ;        {
                 ;            Screen = ((Screen)*10) + Pointer_vert;
                 ;        }
                 ;
                 ;        //flag = 1;
                 ;       }
                 ;
                 ;    if (PINE.1 == 0)                                            //ESCAPE
                 ;       {
                 ;        while(PINE.1 == 0);
                 ;        if(Screen > 100)
                 ;        {Screen = Screen/10;}
                 ;        else
                 ;        {
                 ;        Screen = (Screen/10)-1;
                 ;        }
                 ;        //flag = 1;
                 ;       }
                 ;
                 ;    //return (flag);
                 ;}
                 ;
                 ;
                 ;void input_volt(int next)
                 ;{
                 ;    int change = pow(10,(next-Pointer_horiz-1));
                 ;    pointer_display_horiz();
                 ;	next -> Y+2
                 ;	change -> R16,R17
                 ;    delay_ms(100);
                 ;    if (PINE.2 == 0)                                            //UP     1
                 ;       {
                 ;        while(PINE.2 == 0);
                 ;        if(change == 1)
                 ;        {voltage = voltage + (change);}
                 ;        else
                 ;        {voltage = voltage + 1 + (change);}
                 ;        voltage = voltage % 1000;
                 ;        show_volt();
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINE.3 == 0)                                            //Next   2
                 ;       {
                 ;        while(PINE.3 == 0);
                 ;        Pointer_horiz++;
                 ;
                 ;        Pointer_horiz = Pointer_horiz % next;
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINE.0 == 0)                                             //ENTER 3
                 ;        {
                 ;         while(PINE.0 == 0);
                 ;         if(110 <= voltage && voltage <= 135)
                 ;         {
                 ;            lcd_clear();
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_puts("Voltage set to:");
                 ;            show_volt();
                 ;            //Voltage = temp_volt;
                 ;            flag = 11;
                 ;            Screen = 30;
                 ;            delay_ms(2000);
                 ;         }
                 ;         else
                 ;         {
                 ;            lcd_clear();
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_putsf("Set value should");
                 ;            lcd_gotoxy(0,1);
                 ;            lcd_putsf("be between 110-");
                 ;            lcd_gotoxy(0,2);
                 ;            lcd_putsf("135 volts");
                 ;            voltage = 000;
                 ;            Screen = 300;
                 ;            flag = 11;
                 ;            delay_ms(2000);
                 ;         }
                 ;        }
                 ;
                 ;    if (PINE.1 == 0)                                            //ESCAPE 4
                 ;       {
                 ;        while(PINE.1 == 0);
                 ;        flag = 11;
                 ;        if(Screen > 100)
                 ;        {Screen = Screen/10;}
                 ;        else
                 ;        {Screen = (Screen/10)-1;}
                 ;        //flag = 1;
                 ;       }
                 ;}
                 
                 	.DSEG
                 _0x5E:
000500           	.BYTE 0x10
                 ;
                 ;void input_current(int next)
                 ;{
                 
                 	.CSEG
                 ;    int change = pow(10,(next-Pointer_horiz-1));
                 ;    pointer_display_horiz();
                 ;	next -> Y+2
                 ;	change -> R16,R17
                 ;    delay_ms(100);
                 ;    if (PINE.2 == 0)                                            //UP     1
                 ;       {
                 ;        while(PINE.2 == 0);
                 ;        if(change == 1)
                 ;        {current = current + (change);}
                 ;        else
                 ;        {current = current + 1 + (change);}
                 ;        current = current % 1000;
                 ;        show_current();
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINE.3 == 0)                                            //Next   2
                 ;       {
                 ;        while(PINE.3 == 0);
                 ;        Pointer_horiz++;
                 ;
                 ;        Pointer_horiz = Pointer_horiz % next;
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINE.0 == 0)                                             //ENTER 3
                 ;        {
                 ;         while(PINE.0 == 0);
                 ;         if(10 <= current && current <= 20)
                 ;         {
                 ;            lcd_clear();
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_puts("Current set to:");
                 ;            show_current();
                 ;            flag = 11;
                 ;            Screen = 30;
                 ;            delay_ms(2000);
                 ;         }
                 ;         else
                 ;         {
                 ;            lcd_clear();
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_putsf("Set value should");
                 ;            lcd_gotoxy(0,1);
                 ;            lcd_putsf("be between 10-");
                 ;            lcd_gotoxy(0,2);
                 ;            lcd_putsf("20 amps");
                 ;            current = 000;
                 ;            Screen = 301;
                 ;            flag = 11;
                 ;            delay_ms(2000);
                 ;         }
                 ;        }
                 ;
                 ;    if (PINE.1 == 0)                                            //ESCAPE 4
                 ;       {
                 ;        while(PINE.1 == 0);
                 ;        flag = 11;
                 ;        if(Screen > 100)
                 ;        {Screen = Screen/10;}
                 ;        else
                 ;        {Screen = (Screen/10)-1;}
                 ;        //flag = 1;
                 ;       }
                 ;
                 ;
                 ;}
                 
                 	.DSEG
                 _0x77:
000510           	.BYTE 0x10
                 ;
                 ;
                 ;
                 ;
                 ;void Screen1()
                 ; 0000 011B {
                 
                 	.CSEG
                 ; 0000 011C     Screen = 1;
                 ; 0000 011D     Pointer_horiz = 0;
                 ; 0000 011E     Pointer_vert = 0;
                 ; 0000 011F     lcd_clear();
                 ; 0000 0120     lcd_gotoxy(0,0);
                 ; 0000 0121     lcd_puts("Welcome to HMI");
                 ; 0000 0122 
                 ; 0000 0123     delay_ms(1000);
                 ; 0000 0124 
                 ; 0000 0125     Screen = 2;
                 ; 0000 0126 }
                 
                 	.DSEG
                 _0x7F:
000520           	.BYTE 0xF
                 ;
                 ;void Screen2()
                 ; 0000 0129 {
                 
                 	.CSEG
                 ; 0000 012A     lcd_clear();
                 ; 0000 012B 
                 ; 0000 012C     Screen = 2;
                 ; 0000 012D     Pointer_vert = 0;
                 ; 0000 012E     Pointer_horiz= 0;
                 ; 0000 012F     while(Screen == 2)
                 ; 0000 0130     {
                 ; 0000 0131 
                 ; 0000 0132 
                 ; 0000 0133         lcd_gotoxy(1,0);
                 ; 0000 0134         lcd_putsf("Set Parameters");
                 ; 0000 0135         lcd_gotoxy(1,1) ;
                 ; 0000 0136         lcd_putsf("Sensor Values");
                 ; 0000 0137 
                 ; 0000 0138         input(2);
                 ; 0000 0139     }
                 ; 0000 013A 
                 ; 0000 013B }
                 ;
                 ;
                 ;
                 ;void Screen30()
                 ; 0000 0140 {
                 ; 0000 0141     lcd_clear();
                 ; 0000 0142 
                 ; 0000 0143     lcd_gotoxy(3,3);
                 ; 0000 0144     lcd_putsf("PARAMETERS");
                 ; 0000 0145     lcd_gotoxy(1,0);
                 ; 0000 0146     lcd_putsf("Voltage (VOLTS)");
                 ; 0000 0147     lcd_gotoxy(1,1);
                 ; 0000 0148     lcd_putsf("Current (AMPS)");
                 ; 0000 0149 
                 ; 0000 014A     while(Screen == 30)
                 ; 0000 014B     {
                 ; 0000 014C         input(2);
                 ; 0000 014D 
                 ; 0000 014E     if (PINE.1 == 0)                                            //ESCAPE Pressed 4
                 ; 0000 014F        {
                 ; 0000 0150         while(PINE.1 == 0);
                 ; 0000 0151         Screen = 2;
                 ; 0000 0152        }
                 ; 0000 0153     }
                 ; 0000 0154 
                 ; 0000 0155 
                 ; 0000 0156 }
                 ;
                 ;void Screen300()      //SET VOLTAGE
                 ; 0000 0159 {
                 ; 0000 015A     while(Screen == 300)
                 ; 0000 015B     {
                 ; 0000 015C     lcd_clear();
                 ; 0000 015D     lcd_gotoxy(0,0);
                 ; 0000 015E     lcd_putsf("Set voltage:");
                 ; 0000 015F     show_volt();
                 ; 0000 0160     while(flag != 11)
                 ; 0000 0161     {
                 ; 0000 0162         input_volt(3);
                 ; 0000 0163     }
                 ; 0000 0164     flag = 0;
                 ; 0000 0165     }
                 ; 0000 0166 }
                 ;void Screen301()     //SET CURRENT
                 ; 0000 0168 {
                 ; 0000 0169     while (Screen == 301)
                 ; 0000 016A     {
                 ; 0000 016B     lcd_clear();
                 ; 0000 016C     lcd_gotoxy(0,0);
                 ; 0000 016D     lcd_putsf("Set current:");
                 ; 0000 016E     show_current();
                 ; 0000 016F     while(flag != 11)
                 ; 0000 0170     {
                 ; 0000 0171         input_current(3);
                 ; 0000 0172     }
                 ; 0000 0173     flag = 0;
                 ; 0000 0174     }
                 ; 0000 0175 }
                 ;
                 ;
                 ;void Screen31()
                 ; 0000 0179 {
                 ; 0000 017A     lcd_clear();
                 ; 0000 017B     Pointer_vert = 0;
                 ; 0000 017C     lcd_gotoxy(4,3);
                 ; 0000 017D     lcd_putsf("SENSORS");
                 ; 0000 017E     lcd_gotoxy(1,0);
                 ; 0000 017F     lcd_putsf("Analog");
                 ; 0000 0180     lcd_gotoxy(1,1);
                 ; 0000 0181     lcd_putsf("Digital");
                 ; 0000 0182     lcd_gotoxy(1,2);
                 ; 0000 0183     lcd_putsf("Thermocouple");
                 ; 0000 0184 
                 ; 0000 0185     while(Screen == 31)
                 ; 0000 0186     {
                 ; 0000 0187         input(3);
                 ; 0000 0188     }
                 ; 0000 0189 }
                 ;
                 ;void Screen310()  // Analog Values
                 ; 0000 018C {
                 ; 0000 018D     lcd_gotoxy(0,0);
                 ; 0000 018E     lcd_putsf("No functions          added yet");
                 ; 0000 018F     delay_ms(1000);
                 ; 0000 0190     Screen = 31;
                 ; 0000 0191 }
                 ;
                 ;void Screen311()        // Digital Values
                 ; 0000 0194 {
                 ; 0000 0195     int x = 0;
                 ; 0000 0196     char disp_ch[3];
                 ; 0000 0197     lcd_clear();
                 ;	x -> R16,R17
                 ;	disp_ch -> Y+2
                 ; 0000 0198     lcd_gotoxy(0,0);
                 ; 0000 0199     lcd_putsf("Ch0:");
                 ; 0000 019A     lcd_gotoxy(0,1);
                 ; 0000 019B     lcd_putsf("Ch1:");
                 ; 0000 019C     lcd_gotoxy(0,2);
                 ; 0000 019D     lcd_putsf("Ch2:");
                 ; 0000 019E     lcd_gotoxy(0,3);
                 ; 0000 019F     lcd_putsf("Ch3:");
                 ; 0000 01A0     lcd_gotoxy(9,0);
                 ; 0000 01A1     lcd_putsf("Ch4:");
                 ; 0000 01A2     lcd_gotoxy(9,1);
                 ; 0000 01A3     lcd_putsf("Ch5:");
                 ; 0000 01A4     lcd_gotoxy(9,2);
                 ; 0000 01A5     lcd_putsf("Ch6:");
                 ; 0000 01A6     lcd_gotoxy(9,3);
                 ; 0000 01A7     lcd_putsf("Ch7:");
                 ; 0000 01A8 
                 ; 0000 01A9     while (PINE.1 != 0)
                 ; 0000 01AA     {
                 ; 0000 01AB         x = read_adc(0x00)/4;
                 ; 0000 01AC         sprintf(disp_ch,"%03d",x);
                 ; 0000 01AD         lcd_gotoxy(4,0);
                 ; 0000 01AE         lcd_puts(disp_ch);
                 ; 0000 01AF         x = read_adc(0x01)/4;
                 ; 0000 01B0         sprintf(disp_ch,"%03d",x);
                 ; 0000 01B1         lcd_gotoxy(4,1);
                 ; 0000 01B2         lcd_puts(disp_ch);
                 ; 0000 01B3         x = read_adc(0x02)/4;
                 ; 0000 01B4         sprintf(disp_ch,"%03d",x);
                 ; 0000 01B5         lcd_gotoxy(4,2);
                 ; 0000 01B6         lcd_puts(disp_ch);
                 ; 0000 01B7         x = read_adc(0x03)/4;
                 ; 0000 01B8         sprintf(disp_ch,"%03d",x);
                 ; 0000 01B9         lcd_gotoxy(4,3);
                 ; 0000 01BA         lcd_puts(disp_ch);
                 ; 0000 01BB         x = read_adc(0x04)/4;
                 ; 0000 01BC         sprintf(disp_ch,"%03d",x);
                 ; 0000 01BD         lcd_gotoxy(13,0);
                 ; 0000 01BE         lcd_puts(disp_ch);
                 ; 0000 01BF         x = read_adc(0x05)/4;
                 ; 0000 01C0         sprintf(disp_ch,"%03d",x);
                 ; 0000 01C1         lcd_gotoxy(13,1);
                 ; 0000 01C2         lcd_puts(disp_ch);
                 ; 0000 01C3         x = read_adc(0x06)/4;
                 ; 0000 01C4         sprintf(disp_ch,"%03d",x);
                 ; 0000 01C5         lcd_gotoxy(13,2);
                 ; 0000 01C6         lcd_puts(disp_ch);
                 ; 0000 01C7         x = read_adc(0x07)/4;
                 ; 0000 01C8         sprintf(disp_ch,"%03d",x);
                 ; 0000 01C9         lcd_gotoxy(13,3);
                 ; 0000 01CA         lcd_puts(disp_ch);
                 ; 0000 01CB         delay_ms(1000);
                 ; 0000 01CC     }
                 ; 0000 01CD     Screen = 31;
                 ; 0000 01CE }
                 ;
                 ;
                 ;void Screen_sel()
                 ; 0000 01D2 {
                 ; 0000 01D3     switch(Screen)
                 ; 0000 01D4     {
                 ; 0000 01D5         case 1:
                 ; 0000 01D6             Screen1();
                 ; 0000 01D7         break;
                 ; 0000 01D8         case 2:
                 ; 0000 01D9             Screen2();
                 ; 0000 01DA         break;
                 ; 0000 01DB 
                 ; 0000 01DC         case 30:                           //Ports
                 ; 0000 01DD             Screen30();
                 ; 0000 01DE         break;
                 ; 0000 01DF 
                 ; 0000 01E0         case 300:
                 ; 0000 01E1             Screen300();                   //Set Voltage
                 ; 0000 01E2         break;
                 ; 0000 01E3         case 301:
                 ; 0000 01E4             Screen301();
                 ; 0000 01E5         break;
                 ; 0000 01E6 
                 ; 0000 01E7         case 31:
                 ; 0000 01E8             Screen31();
                 ; 0000 01E9         break;
                 ; 0000 01EA         case 310:                           //Analog
                 ; 0000 01EB             Screen310();
                 ; 0000 01EC         break;
                 ; 0000 01ED         case 311:                           //Digital
                 ; 0000 01EE             Screen311();
                 ; 0000 01EF         break;
                 ; 0000 01F0 
                 ; 0000 01F1         default:
                 ; 0000 01F2             lcd_clear();
                 ; 0000 01F3             lcd_gotoxy(0,0);
                 ; 0000 01F4             lcd_puts("Error.");
                 ; 0000 01F5             lcd_gotoxy(0,1);
                 ; 0000 01F6             lcd_puts("Restarting in 5 seconds.");
                 ; 0000 01F7             delay_ms(2000);
                 ; 0000 01F8             Screen = 1;
                 ; 0000 01F9         break;
                 ; 0000 01FA     }
                 ; 0000 01FB }
                 
                 	.DSEG
                 _0xA8:
00052f           	.BYTE 0x20
                 ;
                 ;void main(void)
                 ; 0000 01FE {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 01FF 
                 ; 0000 0200 
                 ; 0000 0201 PORTA=0x00;
000312 e0e0      	LDI  R30,LOW(0)
000313 bbeb      	OUT  0x1B,R30
                 ; 0000 0202 DDRA=0x00;
000314 bbea      	OUT  0x1A,R30
                 ; 0000 0203 
                 ; 0000 0204 
                 ; 0000 0205 PORTB=0x00;
000315 bbe8      	OUT  0x18,R30
                 ; 0000 0206 DDRB=0x07;
000316 e0e7      	LDI  R30,LOW(7)
000317 bbe7      	OUT  0x17,R30
                 ; 0000 0207 
                 ; 0000 0208 
                 ; 0000 0209 PORTC=0x08;
000318 e0e8      	LDI  R30,LOW(8)
000319 bbe5      	OUT  0x15,R30
                 ; 0000 020A DDRC=0x08;
00031a bbe4      	OUT  0x14,R30
                 ; 0000 020B 
                 ; 0000 020C 
                 ; 0000 020D PORTD=0xC0;
00031b ece0      	LDI  R30,LOW(192)
00031c bbe2      	OUT  0x12,R30
                 ; 0000 020E DDRD=0x00;
00031d e0e0      	LDI  R30,LOW(0)
00031e bbe1      	OUT  0x11,R30
                 ; 0000 020F 
                 ; 0000 0210 
                 ; 0000 0211 
                 ; 0000 0212 PORTE=0xFF;
00031f efef      	LDI  R30,LOW(255)
000320 b9e3      	OUT  0x3,R30
                 ; 0000 0213 DDRE=0x00;
000321 e0e0      	LDI  R30,LOW(0)
000322 b9e2      	OUT  0x2,R30
                 ; 0000 0214 
                 ; 0000 0215 
                 ; 0000 0216 
                 ; 0000 0217 PORTF=0x00;
000323 93e0 0062 	STS  98,R30
                 ; 0000 0218 DDRF=0x00;
000325 93e0 0061 	STS  97,R30
                 ; 0000 0219 
                 ; 0000 021A 
                 ; 0000 021B PORTG=0x00;
000327 93e0 0065 	STS  101,R30
                 ; 0000 021C DDRG=0x00;
000329 93e0 0064 	STS  100,R30
                 ; 0000 021D 
                 ; 0000 021E TCCR3A=0x00;
00032b 93e0 008b 	STS  139,R30
                 ; 0000 021F TCCR3B=0x09;
00032d e0e9      	LDI  R30,LOW(9)
00032e 93e0 008a 	STS  138,R30
                 ; 0000 0220 TCNT3H=0x00;
000330 e0e0      	LDI  R30,LOW(0)
000331 93e0 0089 	STS  137,R30
                 ; 0000 0221 TCNT3L=0x00;
000333 93e0 0088 	STS  136,R30
                 ; 0000 0222 ICR3H=0x00;
000335 93e0 0081 	STS  129,R30
                 ; 0000 0223 ICR3L=0x00;
000337 93e0 0080 	STS  128,R30
                 ; 0000 0224 OCR3AH=0xFF;
000339 efef      	LDI  R30,LOW(255)
00033a 93e0 0087 	STS  135,R30
                 ; 0000 0225 OCR3AL=0xFF;
00033c 93e0 0086 	STS  134,R30
                 ; 0000 0226 OCR3BH=0x00;
00033e e0e0      	LDI  R30,LOW(0)
00033f 93e0 0085 	STS  133,R30
                 ; 0000 0227 OCR3BL=0x00;
000341 93e0 0084 	STS  132,R30
                 ; 0000 0228 OCR3CH=0x00;
000343 93e0 0083 	STS  131,R30
                 ; 0000 0229 OCR3CL=0x00;
000345 93e0 0082 	STS  130,R30
                 ; 0000 022A 
                 ; 0000 022B // External Interrupt(s) initialization
                 ; 0000 022C EICRA=0x00;
000347 93e0 006a 	STS  106,R30
                 ; 0000 022D EICRB=0xAA;
000349 eaea      	LDI  R30,LOW(170)
00034a bfea      	OUT  0x3A,R30
                 ; 0000 022E EIMSK=0xF0;
00034b efe0      	LDI  R30,LOW(240)
00034c bfe9      	OUT  0x39,R30
                 ; 0000 022F EIFR=0xF0;
00034d bfe8      	OUT  0x38,R30
                 ; 0000 0230 
                 ; 0000 0231 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0232 TIMSK=0x00;
00034e e0e0      	LDI  R30,LOW(0)
00034f bfe7      	OUT  0x37,R30
                 ; 0000 0233 ETIMSK=0x04;
000350 e0e4      	LDI  R30,LOW(4)
000351 93e0 007d 	STS  125,R30
                 ; 0000 0234 
                 ; 0000 0235 // USART0 initialization
                 ; 0000 0236 /*
                 ; 0000 0237 UCSR0A=0x00;
                 ; 0000 0238 UCSR0B=0x18;
                 ; 0000 0239 UCSR0C=0x06;
                 ; 0000 023A UBRR0H=0x00;
                 ; 0000 023B UBRR0L=0x67;
                 ; 0000 023C */
                 ; 0000 023D // USART0 initialization
                 ; 0000 023E // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 023F // USART0 Receiver: On
                 ; 0000 0240 // USART0 Transmitter: On
                 ; 0000 0241 // USART0 Mode: Asynchronous
                 ; 0000 0242 // USART0 Baud Rate: 9600
                 ; 0000 0243 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
000353 e0e0      	LDI  R30,LOW(0)
000354 b9eb      	OUT  0xB,R30
                 ; 0000 0244 UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000355 ede8      	LDI  R30,LOW(216)
000356 b9ea      	OUT  0xA,R30
                 ; 0000 0245 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000357 e0e6      	LDI  R30,LOW(6)
000358 93e0 0095 	STS  149,R30
                 ; 0000 0246 UBRR0H=0x00;
00035a e0e0      	LDI  R30,LOW(0)
00035b 93e0 0090 	STS  144,R30
                 ; 0000 0247 UBRR0L=0x33;
00035d e3e3      	LDI  R30,LOW(51)
00035e b9e9      	OUT  0x9,R30
                 ; 0000 0248 
                 ; 0000 0249 // USART1 initialization
                 ; 0000 024A UCSR1A=0x00;
00035f e0e0      	LDI  R30,LOW(0)
000360 93e0 009b 	STS  155,R30
                 ; 0000 024B UCSR1B=0x18;
000362 e1e8      	LDI  R30,LOW(24)
000363 93e0 009a 	STS  154,R30
                 ; 0000 024C UCSR1C=0x06;
000365 e0e6      	LDI  R30,LOW(6)
000366 93e0 009d 	STS  157,R30
                 ; 0000 024D UBRR1H=0x00;
000368 e0e0      	LDI  R30,LOW(0)
000369 93e0 0098 	STS  152,R30
                 ; 0000 024E UBRR1L=0x67;
00036b e6e7      	LDI  R30,LOW(103)
00036c 93e0 0099 	STS  153,R30
                 ; 0000 024F 
                 ; 0000 0250 // Analog Comparator initialization
                 ; 0000 0251 ACSR=0x80;
00036e e8e0      	LDI  R30,LOW(128)
00036f b9e8      	OUT  0x8,R30
                 ; 0000 0252 SFIOR=0x00;
000370 e0e0      	LDI  R30,LOW(0)
000371 bde0      	OUT  0x20,R30
                 ; 0000 0253 
                 ; 0000 0254 // ADC initialization
                 ; 0000 0255 ADMUX=ADC_VREF_TYPE & 0xff;
000372 b9e7      	OUT  0x7,R30
                 ; 0000 0256 ADCSRA=0x84;
000373 e8e4      	LDI  R30,LOW(132)
000374 b9e6      	OUT  0x6,R30
                 ; 0000 0257 
                 ; 0000 0258 // SPI initialization
                 ; 0000 0259 SPCR=0x50;
000375 e5e0      	LDI  R30,LOW(80)
000376 b9ed      	OUT  0xD,R30
                 ; 0000 025A SPSR=0x00;
000377 e0e0      	LDI  R30,LOW(0)
000378 b9ee      	OUT  0xE,R30
                 ; 0000 025B 
                 ; 0000 025C // TWI initializatioN
                 ; 0000 025D TWCR=0x00;
000379 93e0 0074 	STS  116,R30
                 ; 0000 025E 
                 ; 0000 025F // I2C Bus initialization
                 ; 0000 0260 i2c_init();
00037b 940e 047f 	CALL _i2c_init
                 ; 0000 0261 
                 ; 0000 0262 // DS1307 Real Time Clock initialization
                 ; 0000 0263 rtc_init(0,0,0);
00037d e0e0      	LDI  R30,LOW(0)
00037e 93ea      	ST   -Y,R30
00037f 93ea      	ST   -Y,R30
000380 e0a0      	LDI  R26,LOW(0)
000381 940e 0442 	CALL _rtc_init
                 ; 0000 0264 
                 ; 0000 0265 
                 ; 0000 0266 lcd_init(16);
000383 e1a0      	LDI  R26,LOW(16)
000384 940e 0413 	CALL _lcd_init
                 ; 0000 0267 
                 ; 0000 0268 // Global enable interrupts
                 ; 0000 0269 #asm("sei")
000386 9478      	sei
                 ; 0000 026A 
                 ; 0000 026B 
                 ; 0000 026C while(1)
                 _0xA9:
                 ; 0000 026D {
                 ; 0000 026E        if(on_pressed == 1)
000387 91a0 0599 	LDS  R26,_on_pressed
000389 91b0 059a 	LDS  R27,_on_pressed+1
00038b 9711      	SBIW R26,1
00038c f439      	BRNE _0xAC
                 ; 0000 026F         {
                 ; 0000 0270             mainOn();
00038d de56      	RCALL _mainOn
                 ; 0000 0271             on_pressed = 0;
00038e e0e0      	LDI  R30,LOW(0)
00038f 93e0 0599 	STS  _on_pressed,R30
000391 93e0 059a 	STS  _on_pressed+1,R30
                 ; 0000 0272         }
                 ; 0000 0273         else if(off_pressed == 1)
000393 c00c      	RJMP _0xAD
                 _0xAC:
000394 91a0 059b 	LDS  R26,_off_pressed
000396 91b0 059c 	LDS  R27,_off_pressed+1
000398 9711      	SBIW R26,1
000399 f431      	BRNE _0xAE
                 ; 0000 0274         {
                 ; 0000 0275             mainOff();
00039a de52      	RCALL _mainOff
                 ; 0000 0276             off_pressed = 0;
00039b e0e0      	LDI  R30,LOW(0)
00039c 93e0 059b 	STS  _off_pressed,R30
00039e 93e0 059c 	STS  _off_pressed+1,R30
                 ; 0000 0277 
                 ; 0000 0278         }
                 ; 0000 0279     //Screen_sel();
                 ; 0000 027A 
                 ; 0000 027B }
                 _0xAE:
                 _0xAD:
0003a0 cfe6      	RJMP _0xA9
                 ; 0000 027C 
                 ; 0000 027D }
                 _0xAF:
0003a1 cfff      	RJMP _0xAF
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
0003a2 93aa      	ST   -Y,R26
0003a3 b3e5      	IN   R30,0x15
0003a4 70ef      	ANDI R30,LOW(0xF)
0003a5 2fae      	MOV  R26,R30
0003a6 81e8      	LD   R30,Y
0003a7 7fe0      	ANDI R30,LOW(0xF0)
0003a8 2bea      	OR   R30,R26
0003a9 bbe5      	OUT  0x15,R30
                +
0003aa e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003ab 958a     +DEC R24
0003ac f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003ad 9aaa      	SBI  0x15,2
                +
0003ae e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003af 958a     +DEC R24
0003b0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003b1 98aa      	CBI  0x15,2
                +
0003b2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003b3 958a     +DEC R24
0003b4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003b5 c08a      	RJMP _0x2120002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0003b6 93aa      	ST   -Y,R26
0003b7 81a8      	LD   R26,Y
0003b8 dfe9      	RCALL __lcd_write_nibble_G103
0003b9 81e8          ld    r30,y
0003ba 95e2          swap  r30
0003bb 83e8          st    y,r30
0003bc 81a8      	LD   R26,Y
0003bd dfe4      	RCALL __lcd_write_nibble_G103
                +
0003be e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0003bf 958a     +DEC R24
0003c0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0003c1 c07e      	RJMP _0x2120002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0003c2 93aa      	ST   -Y,R26
0003c3 81e8      	LD   R30,Y
0003c4 e0f0      	LDI  R31,0
0003c5 50e0      	SUBI R30,LOW(-__base_y_G103)
0003c6 4ffa      	SBCI R31,HIGH(-__base_y_G103)
0003c7 81e0      	LD   R30,Z
0003c8 81a9      	LDD  R26,Y+1
0003c9 0fae      	ADD  R26,R30
0003ca dfeb      	RCALL __lcd_write_data
0003cb 81e9      	LDD  R30,Y+1
0003cc 93e0 0604 	STS  __lcd_x,R30
0003ce 81e8      	LD   R30,Y
0003cf 93e0 0605 	STS  __lcd_y,R30
0003d1 9622      	ADIW R28,2
0003d2 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0003d3 e0a2      	LDI  R26,LOW(2)
0003d4 940e 0471 	CALL SUBOPT_0x2
0003d6 e0ac      	LDI  R26,LOW(12)
0003d7 dfde      	RCALL __lcd_write_data
0003d8 e0a1      	LDI  R26,LOW(1)
0003d9 940e 0471 	CALL SUBOPT_0x2
0003db e0e0      	LDI  R30,LOW(0)
0003dc 93e0 0605 	STS  __lcd_y,R30
0003de 93e0 0604 	STS  __lcd_x,R30
0003e0 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0003e1 93aa      	ST   -Y,R26
0003e2 81a8      	LD   R26,Y
0003e3 30aa      	CPI  R26,LOW(0xA)
0003e4 f031      	BREQ _0x2060005
0003e5 91e0 0606 	LDS  R30,__lcd_maxx
0003e7 91a0 0604 	LDS  R26,__lcd_x
0003e9 17ae      	CP   R26,R30
0003ea f060      	BRLO _0x2060004
                 _0x2060005:
0003eb e0e0      	LDI  R30,LOW(0)
0003ec 93ea      	ST   -Y,R30
0003ed 91a0 0605 	LDS  R26,__lcd_y
0003ef 5faf      	SUBI R26,-LOW(1)
0003f0 93a0 0605 	STS  __lcd_y,R26
0003f2 dfcf      	RCALL _lcd_gotoxy
0003f3 81a8      	LD   R26,Y
0003f4 30aa      	CPI  R26,LOW(0xA)
0003f5 f409      	BRNE _0x2060007
0003f6 c049      	RJMP _0x2120002
                 _0x2060007:
                 _0x2060004:
0003f7 91e0 0604 	LDS  R30,__lcd_x
0003f9 5fef      	SUBI R30,-LOW(1)
0003fa 93e0 0604 	STS  __lcd_x,R30
0003fc 9aa8      	SBI  0x15,0
0003fd 81a8      	LD   R26,Y
0003fe dfb7      	RCALL __lcd_write_data
0003ff 98a8      	CBI  0x15,0
000400 c03f      	RJMP _0x2120002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000401 93ba      	ST   -Y,R27
000402 93aa      	ST   -Y,R26
000403 931a      	ST   -Y,R17
                 _0x206000B:
000404 81e9      	LDD  R30,Y+1
000405 81fa      	LDD  R31,Y+1+1
000406 9631      	ADIW R30,1
000407 83e9      	STD  Y+1,R30
000408 83fa      	STD  Y+1+1,R31
000409 9731      	SBIW R30,1
00040a 91e4      	LPM  R30,Z
00040b 2f1e      	MOV  R17,R30
00040c 30e0      	CPI  R30,0
00040d f019      	BREQ _0x206000D
00040e 2fa1      	MOV  R26,R17
00040f dfd1      	RCALL _lcd_putchar
000410 cff3      	RJMP _0x206000B
                 _0x206000D:
000411 8118      	LDD  R17,Y+0
000412 c04c      	RJMP _0x2120001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000413 93aa      	ST   -Y,R26
000414 b3e4      	IN   R30,0x14
000415 6fe0      	ORI  R30,LOW(0xF0)
000416 bbe4      	OUT  0x14,R30
000417 9aa2      	SBI  0x14,2
000418 9aa0      	SBI  0x14,0
000419 9aa1      	SBI  0x14,1
00041a 98aa      	CBI  0x15,2
00041b 98a8      	CBI  0x15,0
00041c 98a9      	CBI  0x15,1
00041d 81e8      	LD   R30,Y
00041e 93e0 0606 	STS  __lcd_maxx,R30
000420 58e0      	SUBI R30,-LOW(128)
                +
000421 93e0 0602+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000423 81e8      	LD   R30,Y
000424 54e0      	SUBI R30,-LOW(192)
                +
000425 93e0 0603+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000427 e1a4      	LDI  R26,LOW(20)
000428 e0b0      	LDI  R27,0
000429 940e 04d0 	CALL _delay_ms
00042b 940e 0477 	CALL SUBOPT_0x3
00042d 940e 0477 	CALL SUBOPT_0x3
00042f 940e 0477 	CALL SUBOPT_0x3
000431 e2a0      	LDI  R26,LOW(32)
000432 df6f      	RCALL __lcd_write_nibble_G103
                +
000433 ec88     +LDI R24 , LOW ( 200 )
000434 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000435 9701     +SBIW R24 , 1
000436 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000437 e2a8      	LDI  R26,LOW(40)
000438 df7d      	RCALL __lcd_write_data
000439 e0a4      	LDI  R26,LOW(4)
00043a df7b      	RCALL __lcd_write_data
00043b e8a5      	LDI  R26,LOW(133)
00043c df79      	RCALL __lcd_write_data
00043d e0a6      	LDI  R26,LOW(6)
00043e df77      	RCALL __lcd_write_data
00043f df93      	RCALL _lcd_clear
                 _0x2120002:
000440 9621      	ADIW R28,1
000441 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _rtc_init:
                 ; .FSTART _rtc_init
000442 93aa      	ST   -Y,R26
000443 81ea      	LDD  R30,Y+2
000444 70e3      	ANDI R30,LOW(0x3)
000445 83ea      	STD  Y+2,R30
000446 81e9      	LDD  R30,Y+1
000447 30e0      	CPI  R30,0
000448 f019      	BREQ _0x2080003
000449 81ea      	LDD  R30,Y+2
00044a 61e0      	ORI  R30,0x10
00044b 83ea      	STD  Y+2,R30
                 _0x2080003:
00044c 81e8      	LD   R30,Y
00044d 30e0      	CPI  R30,0
00044e f019      	BREQ _0x2080004
00044f 81ea      	LDD  R30,Y+2
000450 68e0      	ORI  R30,0x80
000451 83ea      	STD  Y+2,R30
                 _0x2080004:
000452 940e 0484 	CALL _i2c_start
000454 eda0      	LDI  R26,LOW(208)
000455 940e 04b8 	CALL _i2c_write
000457 e0a7      	LDI  R26,LOW(7)
000458 940e 04b8 	CALL _i2c_write
00045a 81aa      	LDD  R26,Y+2
00045b 940e 04b8 	CALL _i2c_write
00045d 940e 0493 	CALL _i2c_stop
                 _0x2120001:
00045f 9623      	ADIW R28,3
000460 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rdataA:
00054f           	.BYTE 0x4
                 _comStart:
000553           	.BYTE 0x2
                 _i:
000555           	.BYTE 0x2
                 _rx_buffer0:
000557           	.BYTE 0x40
                 _rx_rd_index0:
000597           	.BYTE 0x1
                 _rx_counter0:
000598           	.BYTE 0x1
                 _on_pressed:
000599           	.BYTE 0x2
                 _off_pressed:
00059b           	.BYTE 0x2
                 _tx_buffer0:
00059d           	.BYTE 0x40
                 _tx_wr_index0:
0005dd           	.BYTE 0x1
                 _tx_rd_index0:
0005de           	.BYTE 0x1
                 _tx_counter0:
0005df           	.BYTE 0x1
                 _on_button_state:
0005e0           	.BYTE 0x2
                 _off_button_state:
0005e2           	.BYTE 0x2
                 _Screen:
0005e4           	.BYTE 0x2
                 _Pointer_horiz:
0005e6           	.BYTE 0x2
                 _Pointer_vert:
0005e8           	.BYTE 0x2
                 _Pt:
0005ea           	.BYTE 0x2
                 _voltage:
0005ec           	.BYTE 0x4
                 _current:
0005f0           	.BYTE 0x4
                 _flag:
0005f4           	.BYTE 0x2
                 _disp_volt:
0005f6           	.BYTE 0x3
                 _disp_current:
0005f9           	.BYTE 0x3
                 __seed_G101:
0005fc           	.BYTE 0x4
                 __base_y_G103:
000600           	.BYTE 0x4
                 __lcd_x:
000604           	.BYTE 0x1
                 __lcd_y:
000605           	.BYTE 0x1
                 __lcd_maxx:
000606           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000461 01f8      	MOVW R30,R16
000462 0de8      	ADD  R30,R8
000463 1df9      	ADC  R31,R9
000464 9731      	SBIW R30,1
000465 91e4      	LPM  R30,Z
000466 30e0      	CPI  R30,0
000467 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000468 01f8      	MOVW R30,R16
000469 0de8      	ADD  R30,R8
00046a 1df9      	ADC  R31,R9
00046b 019f      	MOVW R18,R30
00046c e0e5      	LDI  R30,LOW(5)
00046d e0f0      	LDI  R31,HIGH(5)
00046e 17e0      	CP   R30,R16
00046f 07f1      	CPC  R31,R17
000470 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000471 940e 03b6 	CALL __lcd_write_data
000473 e0a3      	LDI  R26,LOW(3)
000474 e0b0      	LDI  R27,0
000475 940c 04d0 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
000477 e3a0      	LDI  R26,LOW(48)
000478 940e 03a2 	CALL __lcd_write_nibble_G103
                +
00047a ec88     +LDI R24 , LOW ( 200 )
00047b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00047c 9701     +SBIW R24 , 1
00047d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00047e 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
00047f 9890      	cbi  __i2c_port,__scl_bit
000480 9891      	cbi  __i2c_port,__sda_bit
000481 9a88      	sbi  __i2c_dir,__scl_bit
000482 9889      	cbi  __i2c_dir,__sda_bit
000483 c015      	rjmp __i2c_delay2
                 _i2c_start:
000484 9889      	cbi  __i2c_dir,__sda_bit
000485 9888      	cbi  __i2c_dir,__scl_bit
000486 27ee      	clr  r30
000487 0000      	nop
000488 9b81      	sbis __i2c_pin,__sda_bit
000489 9508      	ret
00048a 9b80      	sbis __i2c_pin,__scl_bit
00048b 9508      	ret
00048c d004      	rcall __i2c_delay1
00048d 9a89      	sbi  __i2c_dir,__sda_bit
00048e d002      	rcall __i2c_delay1
00048f 9a88      	sbi  __i2c_dir,__scl_bit
000490 e0e1      	ldi  r30,1
                 __i2c_delay1:
000491 e06d      	ldi  r22,13
000492 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000493 9a89      	sbi  __i2c_dir,__sda_bit
000494 9a88      	sbi  __i2c_dir,__scl_bit
000495 d003      	rcall __i2c_delay2
000496 9888      	cbi  __i2c_dir,__scl_bit
000497 dff9      	rcall __i2c_delay1
000498 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000499 e16b      	ldi  r22,27
                 __i2c_delay2l:
00049a 956a      	dec  r22
00049b f7f1      	brne __i2c_delay2l
00049c 9508      	ret
                 _i2c_read:
00049d e078      	ldi  r23,8
                 __i2c_read0:
00049e 9888      	cbi  __i2c_dir,__scl_bit
00049f dff1      	rcall __i2c_delay1
                 __i2c_read3:
0004a0 9b80      	sbis __i2c_pin,__scl_bit
0004a1 cffe      	rjmp __i2c_read3
0004a2 dfee      	rcall __i2c_delay1
0004a3 9488      	clc
0004a4 9981      	sbic __i2c_pin,__sda_bit
0004a5 9408      	sec
0004a6 9a88      	sbi  __i2c_dir,__scl_bit
0004a7 dff1      	rcall __i2c_delay2
0004a8 1fee      	rol  r30
0004a9 957a      	dec  r23
0004aa f799      	brne __i2c_read0
0004ab 2f7a      	mov  r23,r26
0004ac 2377      	tst  r23
0004ad f411      	brne __i2c_read1
0004ae 9889      	cbi  __i2c_dir,__sda_bit
0004af c001      	rjmp __i2c_read2
                 __i2c_read1:
0004b0 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0004b1 dfdf      	rcall __i2c_delay1
0004b2 9888      	cbi  __i2c_dir,__scl_bit
0004b3 dfe5      	rcall __i2c_delay2
0004b4 9a88      	sbi  __i2c_dir,__scl_bit
0004b5 dfdb      	rcall __i2c_delay1
0004b6 9889      	cbi  __i2c_dir,__sda_bit
0004b7 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0004b8 e078      	ldi  r23,8
                 __i2c_write0:
0004b9 0faa      	lsl  r26
0004ba f410      	brcc __i2c_write1
0004bb 9889      	cbi  __i2c_dir,__sda_bit
0004bc c001      	rjmp __i2c_write2
                 __i2c_write1:
0004bd 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0004be dfda      	rcall __i2c_delay2
0004bf 9888      	cbi  __i2c_dir,__scl_bit
0004c0 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
0004c1 9b80      	sbis __i2c_pin,__scl_bit
0004c2 cffe      	rjmp __i2c_write3
0004c3 dfcd      	rcall __i2c_delay1
0004c4 9a88      	sbi  __i2c_dir,__scl_bit
0004c5 957a      	dec  r23
0004c6 f791      	brne __i2c_write0
0004c7 9889      	cbi  __i2c_dir,__sda_bit
0004c8 dfc8      	rcall __i2c_delay1
0004c9 9888      	cbi  __i2c_dir,__scl_bit
0004ca dfce      	rcall __i2c_delay2
0004cb e0e1      	ldi  r30,1
0004cc 9981      	sbic __i2c_pin,__sda_bit
0004cd 27ee      	clr  r30
0004ce 9a88      	sbi  __i2c_dir,__scl_bit
0004cf cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
0004d0 9610      	adiw r26,0
0004d1 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0004d2 ed80     +LDI R24 , LOW ( 0x7D0 )
0004d3 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0004d4 9701     +SBIW R24 , 1
0004d5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0004d6 95a8      	wdr
0004d7 9711      	sbiw r26,1
0004d8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0004d9 9508      	ret
                 
                 __SAVELOCR4:
0004da 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004db 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004dc 931a      	ST   -Y,R17
0004dd 930a      	ST   -Y,R16
0004de 9508      	RET
                 
                 __LOADLOCR4:
0004df 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004e0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004e1 8119      	LDD  R17,Y+1
0004e2 8108      	LD   R16,Y
0004e3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   4 r1 :   1 r2 :   1 r3 :   0 r4 :   4 r5 :   0 r6 :   4 r7 :   0 
r8 :   2 r9 :   2 r10:   3 r11:   0 r12:   4 r13:   0 r14:   0 r15:   0 
r16:  24 r17:  23 r18:   7 r19:   4 r20:   0 r21:   0 r22:   5 r23:   6 
r24:  22 r25:   5 r26:  91 r27:  24 r28:   5 r29:   1 r30: 264 r31:  49 
x  :   3 y  :  89 z  :  15 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   5 
adiw  :   6 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  28 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  33 
cbi   :  21 cbr   :   0 clc   :   1 clh   :   0 cli   :   2 cln   :   0 
clr   :   5 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   3 cpi   :  15 cpse  :   0 dec   :   8 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   7 inc   :   1 jmp   :  38 ld    :  30 ldd   :  17 
ldi   : 136 lds   :  25 lpm   :  15 lsl   :   3 lsr   :   0 mov   :   6 
movw  :  21 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   1 
or    :   5 ori   :   5 out   :  37 pop   :   0 push  :   0 rcall :  33 
ret   :  20 reti  :   6 rjmp  :  30 rol   :   3 ror   :   0 sbc   :   0 
sbci  :   9 sbi   :  17 sbic  :   3 sbis  :   6 sbiw  :  11 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   1 seh   :   0 sei   :   2 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  43 std   :   6 sts   :  56 sub   :   0 subi  :  20 
swap  :   1 tst   :   1 wdr   :   1 
Instructions used: 53 out of 117 (45.3%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009c8   1834    670   2504  131072   1.9%
[.dseg] 0x000100 0x000607      0    263    263    4096   6.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 15 warnings
