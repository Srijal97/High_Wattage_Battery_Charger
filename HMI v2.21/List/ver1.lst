
AVRASM ver. 2.1.30  D:\HMI v2.21\List\ver1.asm Fri Feb 07 11:55:38 2020

D:\HMI v2.21\List\ver1.asm(1061): warning: Register r4 already defined by the .DEF directive
D:\HMI v2.21\List\ver1.asm(1062): warning: Register r6 already defined by the .DEF directive
D:\HMI v2.21\List\ver1.asm(1063): warning: Register r8 already defined by the .DEF directive
D:\HMI v2.21\List\ver1.asm(1064): warning: Register r10 already defined by the .DEF directive
D:\HMI v2.21\List\ver1.asm(1065): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _msg=R4
                 	.DEF _xmitMsg=R6
                 	.DEF _rec=R8
                 	.DEF _rdata=R10
                 	.DEF _comStart=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0173 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 01c1 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0209 	JMP  _timer3_ovf_isr
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00004f 0000      	.DW  0x0000
                 
                 _0x0:
000050 303c
000051 3130
000052 003e
000053 303c      	.DB  0x3C,0x30,0x30,0x31,0x3E,0x0,0x3C,0x30
000054 3230
000055 003e
000056 303c
000057 3330      	.DB  0x30,0x32,0x3E,0x0,0x3C,0x30,0x30,0x33
000058 003e
000059 303c
00005a 3430
00005b 003e      	.DB  0x3E,0x0,0x3C,0x30,0x30,0x34,0x3E,0x0
00005c 303c
00005d 3530
00005e 003e      	.DB  0x3C,0x30,0x30,0x35,0x3E,0x0
                 _0x2020060:
D:\HMI v2.21\List\ver1.asm(1126): warning: .cseg .db misalignment - padding zero byte
00005f 0001      	.DB  0x1
                 _0x2020000:
000060 4e2d
000061 4e41
000062 4900
000063 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\HMI v2.21\List\ver1.asm(1129): warning: .cseg .db misalignment - padding zero byte
000064 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000065 0001      	.DW  0x01
000066 0002      	.DW  0x02
000067 009e      	.DW  __REG_BIT_VARS*2
                 
000068 0001      	.DW  0x01
000069 05aa      	.DW  __seed_G101
00006a 00be      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00006b 0000      	.DW  0
                 
                 __RESET:
00006c 94f8      	CLI
00006d 27ee      	CLR  R30
00006e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006f e0f1      	LDI  R31,1
000070 bff5      	OUT  MCUCR,R31
000071 bfe5      	OUT  MCUCR,R30
000072 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000074 e1f8      	LDI  R31,0x18
000075 bdf1      	OUT  WDTCR,R31
000076 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000077 e08d      	LDI  R24,(14-2)+1
000078 e0a2      	LDI  R26,2
000079 27bb      	CLR  R27
                 __CLEAR_REG:
00007a 93ed      	ST   X+,R30
00007b 958a      	DEC  R24
00007c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007e e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007f e0a0      	LDI  R26,LOW(__SRAM_START)
000080 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000081 93ed      	ST   X+,R30
000082 9701      	SBIW R24,1
000083 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000084 ecea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000085 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000086 9185      	LPM  R24,Z+
000087 9195      	LPM  R25,Z+
000088 9700      	SBIW R24,0
000089 f061      	BREQ __GLOBAL_INI_END
00008a 91a5      	LPM  R26,Z+
00008b 91b5      	LPM  R27,Z+
00008c 9005      	LPM  R0,Z+
00008d 9015      	LPM  R1,Z+
00008e 01bf      	MOVW R22,R30
00008f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000090 9005      	LPM  R0,Z+
000091 920d      	ST   X+,R0
000092 9701      	SBIW R24,1
000093 f7e1      	BRNE __GLOBAL_INI_LOOP
000094 01fb      	MOVW R30,R22
000095 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000096 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000097 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000098 bfed      	OUT  SPL,R30
000099 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009b e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00009c e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00009d 940c 026e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <Math.h>
                 ;#include "commands.c"
                 ;/*
                 ; * commands.c
                 ; *
                 ; *  Created on: Jan 10, 2020
                 ; *      Author: Mr.Yash
                 ; */
                 ;
                 ;//#include <Serial.h>
                 ;#include <commands.h>
                 ;//#include <alcd.h>
                 ;#include <ver1.h>
                 ;
                 ;flash char *msg;
                 ;flash char *xmitMsg;
                 ;flash char *rec;
                 ;flash char *rdata;
                 ;
                 ;//char sdataA[20];    // Send data for SCI-A
                 ;char rdataA[20]; // Received data for SCI-A
                 ;int comStart;
                 ;int i = 0;
                 ;
                 ;    //commands will be given a 3 digit numeric code based on the button pressed;
                 ;    //Stored values for the particular option-
                 ;
                 ;    //    000-  noOp
                 ;    //    001-  mainOn
                 ;    //    002-  mainOff
                 ;    //    003-  resetFault
                 ;    //    004-  faultDetect
                 ;    //    005-
                 ;    //    006-
                 ;    //    007-
                 ;    //    008-
                 ;    //    009-
                 ;    //    010-
                 ;    //    011-  readVolt
                 ;    //    012-  readAmp
                 ;    //    013-
                 ;    //    014-
                 ;    //    015-
                 ;    //    016-
                 ;    //    017-
                 ;    //    018-
                 ;    //    019-
                 ;    //    020-
                 ;    //    021-
                 ;    //    022-
                 ;    //    023-
                 ;    //    024-
                 ;    //    025-
                 ;    //    026-
                 ;    //    027-
                 ;    //    028-
                 ;    //    029-
                 ;    //    030-
                 ;    //    031-
                 ;    //    032-
                 ;    //    033-
                 ;    //    034-
                 ;    //    035-
                 ;    //    036-
                 ;    //    037-
                 ;    //    038-
                 ;    //    039-
                 ;
                 ;void xmitString(flash char * xmitMsg)
                 ; 0000 0007 {
                 
                 	.CSEG
                 _xmitString:
                 ;    int i =0;
                 ;    for(i = 0;*(xmitMsg+i)!= '\0';i++)
00009f 931a      	ST   -Y,R17
0000a0 930a      	ST   -Y,R16
                 ;	*xmitMsg -> Y+2
                 ;	i -> R16,R17
                +
0000a1 e000     +LDI R16 , LOW ( 0 )
0000a2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000a3 e000     +LDI R16 , LOW ( 0 )
0000a4 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4:
0000a5 940e 02ee 	CALL SUBOPT_0x0
0000a7 30e0      	CPI  R30,0
0000a8 f039      	BREQ _0x5
                 ;    {
                 ;         putchar(xmitMsg[i]);
0000a9 940e 02ee 	CALL SUBOPT_0x0
0000ab 93ea      	ST   -Y,R30
0000ac d136      	RCALL _putchar
                 ;
                 ;    }
                +
0000ad 5f0f     +SUBI R16 , LOW ( - 1 )
0000ae 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000af cff5      	RJMP _0x4
                 _0x5:
                 ;
                 ;}
0000b0 8119      	LDD  R17,Y+1
0000b1 8108      	LDD  R16,Y+0
0000b2 9624      	ADIW R28,4
0000b3 9508      	RET
                 ;
                 ;void noOp()
                 ;{
                 ;
                 ;}
                 ;
                 ;void mainOn()
                 ;{
                 _mainOn:
                 ;    //lcd_clear();
                 ;    //lcd_putsf("Entering Soft-Start");
                 ;    xmitMsg ="<001>";
                +
0000b4 eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000b5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000b6 c005      	RJMP _0x20A0002
                 ;    xmitString(xmitMsg);
                 ;    //delay_ms(500);
                 ;
                 ;   // lcd_clear();
                 ;
                 ;
                 ;}
                 ;
                 ;void mainOff()
                 ;{
                 _mainOff:
                 ;   // lcd_clear();
                 ;    //lcd_putsf("Entering Soft-Stop");
                 ;    xmitMsg = "<002>";
                +
0000b7 eae6     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
0000b8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
0000b9 c002      	RJMP _0x20A0002
                 ;    xmitString(xmitMsg);
                 ;    //delay_ms(500);
                 ;   // lcd_clear();
                 ;}
                 ;
                 ;void resetFault()
                 ;{
                 _resetFault:
                 ;    //lcd_putsf("Resetting Faults");
                 ;    xmitMsg = "<003>";
                +
0000ba eaec     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0000bb e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
                 _0x20A0002:
0000bc 013f      	MOVW R6,R30
                 ;    xmitString(xmitMsg);
0000bd 927a      	ST   -Y,R7
0000be 926a      	ST   -Y,R6
0000bf dfdf      	RCALL _xmitString
                 ;
                 ;}
0000c0 9508      	RET
                 ;
                 ;void readVolt()
                 ;{
                 ;    xmitMsg = "<004>";
                 ;    xmitString(xmitMsg);
                 ;    //voltVal = recVolt();
                 ;    //msg = sprintf("\nVoltage is: %d",voltVal);
                 ;    //lcd_putsf(msg);
                 ;
                 ;}
                 ;
                 ;void readAmp()
                 ;{
                 ;    xmitMsg = "<005>";
                 ;    xmitString(xmitMsg);
                 ;    //ampVal = recAmp();
                 ;    //msg = sprintf("\nCurrent is: %d",ampVal);
                 ;    //lcd_putsf(msg);
                 ;}
                 ;
                 ;
                 ;//On receiving response from the TMS, further actions are taken by recFunc array
                 ;void rxnoOp()
                 ;{
                 ;
                 ;}
                 ;
                 ;
                 ;void rxmainOn()
                 ;{
                 _rxmainOn:
                 ;    PORTC.3 = 0;
0000c1 98ab      	CBI  0x15,3
                 ;    //flash char*msg ="The System has turned on";
                 ;     //PORTF &= ~0x40;
                 ;    //putchar('r');
                 ;    //xmitMsg = "on button pressed acknowledged by the dsp";
                 ;    //xmitString(xmitMsg);
                 ;   // lcd_putsf(msg);                            //function to display message on the lcd
                 ;
                 ;}
0000c2 9508      	RET
                 ;
                 ;void rxmainOff()
                 ;{
                 _rxmainOff:
                 ;
                 ;    PORTC.3 = 1;
0000c3 9aab      	SBI  0x15,3
                 ;//    putchar('s');
                 ;//    xmitMsg = "off button pressed acknowledged by the dsp";
                 ;//    xmitString(xmitMsg);
                 ;//    msg = "The System has turned off";
                 ;    //lcd_putsf(msg);
                 ;
                 ;}
0000c4 9508      	RET
                 ;
                 ;void rxresetFault()
                 ;{
                 ;    //msg = "Faults have been reset";
                 ;   // lcd_putsf(msg);
                 ;
                 ;}
                 ;
                 ;void rxfaultDetect(char *data)
                 ;{
                 ;    int i = 0,j,k=0;
                 ;    int fault = 0, cpyFault;
                 ;    int fltBit[8], tmpBit[8];
                 ;    fault = data[2]-'0'+((data[1]-'0')*10)+((data[0]-'0')*100);
                 ;	*data -> Y+42
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	k -> R20,R21
                 ;	fault -> Y+40
                 ;	cpyFault -> Y+38
                 ;	fltBit -> Y+22
                 ;	tmpBit -> Y+6
                 ;    cpyFault = fault;
                 ;
                 ;
                 ;    // counter for binary array
                 ;    while (cpyFault > 0) {
                 ;
                 ;        tmpBit[i] = cpyFault % 2;
                 ;        cpyFault = cpyFault / 2;
                 ;        i++;
                 ;    }
                 ;
                 ;    for (j = i - 1; j >= 0; j--,k++){
                 ;        fltBit[k] = tmpBit[j];
                 ;    }
                 ;    for (j=k;j<8;j++)
                 ;    {
                 ;        fltBit[j] = 0;
                 ;    }
                 ;
                 ;    if(fltBit[0] == 1)PORTF != ~0x40;
                 ;    if(fltBit[1] == 1);
                 ;    if(fltBit[2] == 1)PORTF != ~0x80;
                 ;    if(fltBit[3] == 1)  ;
                 ;    if(fltBit[4] == 1)   ;
                 ;    if(fltBit[5] == 1)    ;
                 ;    if(fltBit[6] == 1)     ;
                 ;    if(fltBit[7] == 1)      ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;    if(fault!=0)
                 ;    {
                 ;        PORTD.3=0;
                 ;    }
                 ;
                 ;
                 ;}
                 ;
                 ;void rxreadVolt()
                 ;{
                 ;    int i = 0;
                 ;    for(i = 0;i<4;i++)
                 ;	i -> R16,R17
                 ;    {
                 ;
                 ;    }
                 ;
                 ;    msg = rdata;
                 ;    //lcd_putsf(msg);
                 ;
                 ;}
                 ;
                 ;void rxreadAmp()
                 ;{
                 ;    int i;flash char *tempRdata;
                 ;    for(i=5;*(rec+i-1)!='\0';i++)
                 ;	i -> R16,R17
                 ;	*tempRdata -> R18,R19
                 ;    {
                 ;        tempRdata= (rec+i);
                 ;        if(i==5)  rdata = tempRdata;
                 ;        tempRdata++;
                 ;    }
                 ;    msg = rdata;
                 ;    //lcd_putsf(msg);
                 ;
                 ;}
                 ;
                 ;
                 ;void recOp() {
                 _recOp:
                 ;
                 ;
                 ;    char data = getchar();
                 ;
                 ;    PORTF |= 0x80;
0000c5 931a      	ST   -Y,R17
                 ;	data -> R17
0000c6 d0dc      	RCALL _getchar
0000c7 2f1e      	MOV  R17,R30
0000c8 91e0 0062 	LDS  R30,98
0000ca 68e0      	ORI  R30,0x80
0000cb 93e0 0062 	STS  98,R30
                 ;
                 ;    if(data == '<') {
0000cd 331c      	CPI  R17,60
0000ce f431      	BRNE _0x25
                 ;        comStart = 1;
0000cf e0e1      	LDI  R30,LOW(1)
0000d0 e0f0      	LDI  R31,HIGH(1)
0000d1 016f      	MOVW R12,R30
                 ;        i = 0;
0000d2 940e 02f5 	CALL SUBOPT_0x1
                 ;
                 ;    }
                 ;    else if(data == '>') {
0000d4 c00d      	RJMP _0x26
                 _0x25:
0000d5 331e      	CPI  R17,62
0000d6 f459      	BRNE _0x27
                 ;            *(rdataA+i) = data;
0000d7 940e 02fb 	CALL SUBOPT_0x2
                 ;            comStart = 0;
0000d9 24cc      	CLR  R12
0000da 24dd      	CLR  R13
                 ;            i = 0;
0000db 940e 02f5 	CALL SUBOPT_0x1
                 ;            comDecode(rdataA);
0000dd e0e0      	LDI  R30,LOW(_rdataA)
0000de e0f5      	LDI  R31,HIGH(_rdataA)
0000df 93fa      	ST   -Y,R31
0000e0 93ea      	ST   -Y,R30
0000e1 d017      	RCALL _comDecode
                 ;    }
                 ;    if (comStart == 1) {
                 _0x27:
                 _0x26:
0000e2 e0e1      	LDI  R30,LOW(1)
0000e3 e0f0      	LDI  R31,HIGH(1)
0000e4 15ec      	CP   R30,R12
0000e5 05fd      	CPC  R31,R13
0000e6 f489      	BRNE _0x28
                 ;            *(rdataA+i) = data;  // Read data
0000e7 940e 02fb 	CALL SUBOPT_0x2
                 ;            i++;
0000e9 e1a4      	LDI  R26,LOW(_i)
0000ea e0b5      	LDI  R27,HIGH(_i)
0000eb 91ed      	LD   R30,X+
0000ec 91fd      	LD   R31,X+
0000ed 9631      	ADIW R30,1
0000ee 93fe      	ST   -X,R31
0000ef 93ee      	ST   -X,R30
                 ;            if(i==9){i=0;}
0000f0 91a0 0514 	LDS  R26,_i
0000f2 91b0 0515 	LDS  R27,_i+1
0000f4 9719      	SBIW R26,9
0000f5 f411      	BRNE _0x29
0000f6 940e 02f5 	CALL SUBOPT_0x1
                 ;    }
                 _0x29:
                 ;}
                 _0x28:
0000f8 c0c6      	RJMP _0x20A0001
                 ;
                 ;
                 ;void comDecode(char * rec)
                 ;{
                 _comDecode:
                 ;
                 ;    char cmd[3] = {'0','0','0'};
                 ;    char data[4] = {'0','0','0','0'};
                 ;    int icmd = 0;
                 ;    int idata = 0;
                 ;    int i;
                 ;
                 ;    for(i = 1; i < 4; i++)
0000f9 9727      	SBIW R28,7
0000fa e3e0      	LDI  R30,LOW(48)
0000fb 83e8      	ST   Y,R30
0000fc 83e9      	STD  Y+1,R30
0000fd 83ea      	STD  Y+2,R30
0000fe 83eb      	STD  Y+3,R30
0000ff 83ec      	STD  Y+4,R30
000100 83ed      	STD  Y+5,R30
000101 83ee      	STD  Y+6,R30
000102 940e 034b 	CALL __SAVELOCR6
                 ;	*rec -> Y+13
                 ;	cmd -> Y+10
                 ;	data -> Y+6
                 ;	icmd -> R16,R17
                 ;	idata -> R18,R19
                 ;	i -> R20,R21
                +
000104 e000     +LDI R16 , LOW ( 0 )
000105 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000106 e020     +LDI R18 , LOW ( 0 )
000107 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000108 e041     +LDI R20 , LOW ( 1 )
000109 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 _0x2B:
                +
00010a 3044     +CPI R20 , LOW ( 4 )
00010b e0e0     +LDI R30 , HIGH ( 4 )
00010c 075e     +CPC R21 , R30
                 	__CPWRN 20,21,4
00010d f44c      	BRGE _0x2C
                 ;    {
                 ;       cmd[i-1] = rec[i];
00010e 01fa      	MOVW R30,R20
00010f 9731      	SBIW R30,1
000110 01de      	MOVW R26,R28
000111 961a      	ADIW R26,10
000112 940e 0303 	CALL SUBOPT_0x3
                 ;    }
                +
000114 5f4f     +SUBI R20 , LOW ( - 1 )
000115 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000116 cff3      	RJMP _0x2B
                 _0x2C:
                 ;
                 ;    for(i = 5; i < 9; i++)
                +
000117 e045     +LDI R20 , LOW ( 5 )
000118 e050     +LDI R21 , HIGH ( 5 )
                 	__GETWRN 20,21,5
                 _0x2E:
                +
000119 3049     +CPI R20 , LOW ( 9 )
00011a e0e0     +LDI R30 , HIGH ( 9 )
00011b 075e     +CPC R21 , R30
                 	__CPWRN 20,21,9
00011c f44c      	BRGE _0x2F
                 ;    {
                 ;       data[i-5] = rec[i];
00011d 01fa      	MOVW R30,R20
00011e 9735      	SBIW R30,5
00011f 01de      	MOVW R26,R28
000120 9616      	ADIW R26,6
000121 940e 0303 	CALL SUBOPT_0x3
                 ;    }
                +
000123 5f4f     +SUBI R20 , LOW ( - 1 )
000124 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000125 cff3      	RJMP _0x2E
                 _0x2F:
                 ;
                 ;
                 ;    icmd = (cmd[2]-'0') + ((cmd[1] - '0')*10) + ((cmd[0]-'0')*100);
000126 85ec      	LDD  R30,Y+12
000127 940e 030f 	CALL SUBOPT_0x4
000129 01bf      	MOVW R22,R30
00012a 85eb      	LDD  R30,Y+11
00012b 940e 030f 	CALL SUBOPT_0x4
00012d 940e 0312 	CALL SUBOPT_0x5
00012f 85ea      	LDD  R30,Y+10
000130 940e 030f 	CALL SUBOPT_0x4
000132 e6a4      	LDI  R26,LOW(100)
000133 e0b0      	LDI  R27,HIGH(100)
000134 940e 0338 	CALL __MULW12
000136 0fe6      	ADD  R30,R22
000137 1ff7      	ADC  R31,R23
000138 018f      	MOVW R16,R30
                 ;    idata = (data[3]-'0') + ((data[2] - '0')*10) + ((data[1]-'0')*100) + ((data[0]-'0')*1000);
000139 85e9      	LDD  R30,Y+9
00013a 940e 030f 	CALL SUBOPT_0x4
00013c 01bf      	MOVW R22,R30
00013d 85e8      	LDD  R30,Y+8
00013e 940e 030f 	CALL SUBOPT_0x4
000140 940e 0312 	CALL SUBOPT_0x5
000142 81ef      	LDD  R30,Y+7
000143 940e 030f 	CALL SUBOPT_0x4
000145 e6a4      	LDI  R26,LOW(100)
000146 e0b0      	LDI  R27,HIGH(100)
000147 940e 0338 	CALL __MULW12
                +
000149 0f6e     +ADD R22 , R30
00014a 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
00014b 81ee      	LDD  R30,Y+6
00014c 940e 030f 	CALL SUBOPT_0x4
00014e eea8      	LDI  R26,LOW(1000)
00014f e0b3      	LDI  R27,HIGH(1000)
000150 940e 0338 	CALL __MULW12
000152 0fe6      	ADD  R30,R22
000153 1ff7      	ADC  R31,R23
000154 019f      	MOVW R18,R30
                 ;
                 ;    if (icmd == 1) {  // <001>
000155 e0e1      	LDI  R30,LOW(1)
000156 e0f0      	LDI  R31,HIGH(1)
000157 17e0      	CP   R30,R16
000158 07f1      	CPC  R31,R17
000159 f411      	BRNE _0x30
                 ;        rxmainOn();
00015a df66      	RCALL _rxmainOn
                 ;    }
                 ;    else if (icmd == 2) {
00015b c013      	RJMP _0x31
                 _0x30:
00015c e0e2      	LDI  R30,LOW(2)
00015d e0f0      	LDI  R31,HIGH(2)
00015e 17e0      	CP   R30,R16
00015f 07f1      	CPC  R31,R17
000160 f411      	BRNE _0x32
                 ;        rxmainOff();
000161 df61      	RCALL _rxmainOff
                 ;    }
                 ;    else if (icmd == 4 ) {
000162 c00c      	RJMP _0x33
                 _0x32:
000163 e0e4      	LDI  R30,LOW(4)
000164 e0f0      	LDI  R31,HIGH(4)
000165 17e0      	CP   R30,R16
000166 07f1      	CPC  R31,R17
000167 f439      	BRNE _0x34
                 ;        if (idata != 0) {
000168 2e02      	MOV  R0,R18
000169 2a03      	OR   R0,R19
00016a f019      	BREQ _0x35
                 ;           PORTD.3 = 0;
00016b 9893      	CBI  0x12,3
                 ;           PORTC.3 = 1;
00016c 9aab      	SBI  0x15,3
                 ;        }
                 ;        else {
00016d c001      	RJMP _0x3A
                 _0x35:
                 ;           PORTD.3 = 1;
00016e 9a93      	SBI  0x12,3
                 ;        }
                 _0x3A:
                 ;
                 ;
                 ;    }
                 ;
                 ;
                 ;}
                 _0x34:
                 _0x33:
                 _0x31:
00016f 940e 0352 	CALL __LOADLOCR6
000171 962f      	ADIW R28,15
000172 9508      	RET
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 64
                 ;    char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;    unsigned char rx_wr_index0 = 0, rx_rd_index0 = 0;
                 ;#else
                 ;    unsigned int rx_wr_index0=0, rx_rd_index0 = 0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;    unsigned char rx_counter0 = 0;
                 ;#else
                 ;    unsigned int rx_counter0 = 0;
                 ;#endif
                 ;
                 ;
                 ;int on_pressed = 0;
                 ;int off_pressed = 0;
                 ;int data_received = 0;
                 ;int reset_pressed = 0;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0048 {
                 _usart0_rx_isr:
000173 93aa      	ST   -Y,R26
000174 93ea      	ST   -Y,R30
000175 93fa      	ST   -Y,R31
000176 b7ef      	IN   R30,SREG
000177 93ea      	ST   -Y,R30
                 ; 0000 0049     char status, data;
                 ; 0000 004A     status = UCSR0A;
000178 931a      	ST   -Y,R17
000179 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00017a b11b      	IN   R17,11
                 ; 0000 004B     data = UDR0;
00017b b10c      	IN   R16,12
                 ; 0000 004C 
                 ; 0000 004D     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))== 0) {
00017c 2fe1      	MOV  R30,R17
00017d 71ec      	ANDI R30,LOW(0x1C)
00017e f4d9      	BRNE _0x3D
                 ; 0000 004E        rx_buffer0[rx_wr_index0++] = data;
00017f 91e0 0556 	LDS  R30,_rx_wr_index0
000181 5fef      	SUBI R30,-LOW(1)
000182 93e0 0556 	STS  _rx_wr_index0,R30
000184 940e 0319 	CALL SUBOPT_0x6
000186 8300      	ST   Z,R16
                 ; 0000 004F     #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0050        // special case for receiver buffer size=256
                 ; 0000 0051        if (++rx_counter0 == 0)
                 ; 0000 0052             rx_buffer_overflow0 = 1;
                 ; 0000 0053     #else
                 ; 0000 0054        if (rx_wr_index0 == RX_BUFFER_SIZE0)
000187 91a0 0556 	LDS  R26,_rx_wr_index0
000189 34a0      	CPI  R26,LOW(0x40)
00018a f419      	BRNE _0x3E
                 ; 0000 0055             rx_wr_index0=0;
00018b e0e0      	LDI  R30,LOW(0)
00018c 93e0 0556 	STS  _rx_wr_index0,R30
                 ; 0000 0056 
                 ; 0000 0057        if (++rx_counter0 == RX_BUFFER_SIZE0){
                 _0x3E:
00018e 91a0 0558 	LDS  R26,_rx_counter0
000190 5faf      	SUBI R26,-LOW(1)
000191 93a0 0558 	STS  _rx_counter0,R26
000193 34a0      	CPI  R26,LOW(0x40)
000194 f429      	BRNE _0x3F
                 ; 0000 0058             rx_counter0=0;
000195 e0e0      	LDI  R30,LOW(0)
000196 93e0 0558 	STS  _rx_counter0,R30
                 ; 0000 0059             rx_buffer_overflow0=1;
000198 9468      	SET
000199 f820      	BLD  R2,0
                 ; 0000 005A        }
                 ; 0000 005B     #endif
                 ; 0000 005C 
                 ; 0000 005D     }
                 _0x3F:
                 ; 0000 005E 
                 ; 0000 005F     data_received = 1;
                 _0x3D:
00019a e0e1      	LDI  R30,LOW(1)
00019b e0f0      	LDI  R31,HIGH(1)
00019c 93e0 055d 	STS  _data_received,R30
00019e 93f0 055e 	STS  _data_received+1,R31
                 ; 0000 0060 }
0001a0 9109      	LD   R16,Y+
0001a1 9119      	LD   R17,Y+
0001a2 c03a      	RJMP _0x5C
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;
                 ;
                 ;
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 006A {
                 _getchar:
                 ; 0000 006B     char data;
                 ; 0000 006C 
                 ; 0000 006D     while (rx_counter0 == 0);
0001a3 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x40:
0001a4 91e0 0558 	LDS  R30,_rx_counter0
0001a6 30e0      	CPI  R30,0
0001a7 f3e1      	BREQ _0x40
                 ; 0000 006E 
                 ; 0000 006F     data = rx_buffer0[rx_rd_index0++];
0001a8 91e0 0557 	LDS  R30,_rx_rd_index0
0001aa 5fef      	SUBI R30,-LOW(1)
0001ab 93e0 0557 	STS  _rx_rd_index0,R30
0001ad 940e 0319 	CALL SUBOPT_0x6
0001af 8110      	LD   R17,Z
                 ; 0000 0070 
                 ; 0000 0071     #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0072         if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0001b0 91a0 0557 	LDS  R26,_rx_rd_index0
0001b2 34a0      	CPI  R26,LOW(0x40)
0001b3 f419      	BRNE _0x43
0001b4 e0e0      	LDI  R30,LOW(0)
0001b5 93e0 0557 	STS  _rx_rd_index0,R30
                 ; 0000 0073     #endif
                 ; 0000 0074     #asm("cli")
                 _0x43:
0001b7 94f8      	cli
                 ; 0000 0075         --rx_counter0;
0001b8 91e0 0558 	LDS  R30,_rx_counter0
0001ba 50e1      	SUBI R30,LOW(1)
0001bb 93e0 0558 	STS  _rx_counter0,R30
                 ; 0000 0076     #asm("sei")
0001bd 9478      	sei
                 ; 0000 0077 
                 ; 0000 0078     return data;
0001be 2fe1      	MOV  R30,R17
                 _0x20A0001:
0001bf 9119      	LD   R17,Y+
0001c0 9508      	RET
                 ; 0000 0079 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 64
                 ;    char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;    unsigned char tx_wr_index0 = 0, tx_rd_index0=0;
                 ;#else
                 ;    unsigned int tx_wr_index0 = 0, tx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE0 < 256
                 ;    unsigned char tx_counter0 = 0;
                 ;#else
                 ;    unsigned int tx_counter0 = 0;
                 ;#endif
                 ;
                 ;
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 0093 {
                 _usart0_tx_isr:
0001c1 93aa      	ST   -Y,R26
0001c2 93ea      	ST   -Y,R30
0001c3 93fa      	ST   -Y,R31
0001c4 b7ef      	IN   R30,SREG
0001c5 93ea      	ST   -Y,R30
                 ; 0000 0094     if (tx_counter0) {
0001c6 91e0 05a3 	LDS  R30,_tx_counter0
0001c8 30e0      	CPI  R30,0
0001c9 f099      	BREQ _0x44
                 ; 0000 0095        --tx_counter0;
0001ca 50e1      	SUBI R30,LOW(1)
0001cb 93e0 05a3 	STS  _tx_counter0,R30
                 ; 0000 0096        UDR0 = tx_buffer0[tx_rd_index0++];
0001cd 91e0 05a2 	LDS  R30,_tx_rd_index0
0001cf 5fef      	SUBI R30,-LOW(1)
0001d0 93e0 05a2 	STS  _tx_rd_index0,R30
0001d2 940e 031e 	CALL SUBOPT_0x7
0001d4 81e0      	LD   R30,Z
0001d5 b9ec      	OUT  0xC,R30
                 ; 0000 0097 
                 ; 0000 0098     #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0099        if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0001d6 91a0 05a2 	LDS  R26,_tx_rd_index0
0001d8 34a0      	CPI  R26,LOW(0x40)
0001d9 f419      	BRNE _0x45
0001da e0e0      	LDI  R30,LOW(0)
0001db 93e0 05a2 	STS  _tx_rd_index0,R30
                 ; 0000 009A     #endif
                 ; 0000 009B 
                 ; 0000 009C     }
                 _0x45:
                 ; 0000 009D }
                 _0x44:
                 _0x5C:
0001dd 91e9      	LD   R30,Y+
0001de bfef      	OUT  SREG,R30
0001df 91f9      	LD   R31,Y+
0001e0 91e9      	LD   R30,Y+
0001e1 91a9      	LD   R26,Y+
0001e2 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;
                 ;
                 ;
                 ;
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 00A8 {
                 _putchar:
                 ; 0000 00A9     while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0x46:
0001e3 91a0 05a3 	LDS  R26,_tx_counter0
0001e5 34a0      	CPI  R26,LOW(0x40)
0001e6 f3e1      	BREQ _0x46
                 ; 0000 00AA     #asm("cli")
0001e7 94f8      	cli
                 ; 0000 00AB     if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
0001e8 91e0 05a3 	LDS  R30,_tx_counter0
0001ea 30e0      	CPI  R30,0
0001eb f411      	BRNE _0x4A
0001ec 995d      	SBIC 0xB,5
0001ed c016      	RJMP _0x49
                 _0x4A:
                 ; 0000 00AC        {
                 ; 0000 00AD        tx_buffer0[tx_wr_index0++]=c;
0001ee 91e0 05a1 	LDS  R30,_tx_wr_index0
0001f0 5fef      	SUBI R30,-LOW(1)
0001f1 93e0 05a1 	STS  _tx_wr_index0,R30
0001f3 940e 031e 	CALL SUBOPT_0x7
0001f5 81a8      	LD   R26,Y
0001f6 83a0      	STD  Z+0,R26
                 ; 0000 00AE     #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00AF        if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
0001f7 91a0 05a1 	LDS  R26,_tx_wr_index0
0001f9 34a0      	CPI  R26,LOW(0x40)
0001fa f419      	BRNE _0x4C
0001fb e0e0      	LDI  R30,LOW(0)
0001fc 93e0 05a1 	STS  _tx_wr_index0,R30
                 ; 0000 00B0     #endif
                 ; 0000 00B1        ++tx_counter0;
                 _0x4C:
0001fe 91e0 05a3 	LDS  R30,_tx_counter0
000200 5fef      	SUBI R30,-LOW(1)
000201 93e0 05a3 	STS  _tx_counter0,R30
                 ; 0000 00B2        }
                 ; 0000 00B3     else
000203 c002      	RJMP _0x4D
                 _0x49:
                 ; 0000 00B4        UDR0=c;
000204 81e8      	LD   R30,Y
000205 b9ec      	OUT  0xC,R30
                 ; 0000 00B5     #asm("sei")
                 _0x4D:
000206 9478      	sei
                 ; 0000 00B6 }
000207 9621      	ADIW R28,1
000208 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;
                 ;short int on_button_state = 0x0000;
                 ;short int off_button_state = 0x0000;
                 ;short int reset_button_state = 0x0000;
                 ;
                 ;// Timer3 overflow interrupt service routine
                 ;interrupt[TIM3_OVF] void timer3_ovf_isr(void) {
                 ; 0000 00C1 interrupt[30] void timer3_ovf_isr(void) {
                 _timer3_ovf_isr:
000209 93aa      	ST   -Y,R26
00020a 93ba      	ST   -Y,R27
00020b 93ea      	ST   -Y,R30
00020c 93fa      	ST   -Y,R31
00020d b7ef      	IN   R30,SREG
00020e 93ea      	ST   -Y,R30
                 ; 0000 00C2 
                 ; 0000 00C3     // ISR called every 8.595 msec when TCCRB = 0x09, and OCR3A = 0xFFFF
                 ; 0000 00C4 
                 ; 0000 00C5     // switch debounce logic. refer: https://www.embedded.com/electronics-blogs/break-points/4024981/My-favorite-software-debouncers
                 ; 0000 00C6     // 16 bit shifts = approx 130msec debounce delay
                 ; 0000 00C7     on_button_state = (0x8000 | !PINE.4) | (on_button_state << 1);
00020f e0e0      	LDI  R30,0
000210 9b0c      	SBIS 0x1,4
000211 e0e1      	LDI  R30,1
000212 940e 0323 	CALL SUBOPT_0x8
000214 91e0 05a4 	LDS  R30,_on_button_state
000216 91f0 05a5 	LDS  R31,_on_button_state+1
000218 940e 0327 	CALL SUBOPT_0x9
00021a 93e0 05a4 	STS  _on_button_state,R30
00021c 93f0 05a5 	STS  _on_button_state+1,R31
                 ; 0000 00C8     if(on_button_state == 0xC000) {
00021e 91a0 05a4 	LDS  R26,_on_button_state
000220 91b0 05a5 	LDS  R27,_on_button_state+1
000222 30a0      	CPI  R26,LOW(0xC000)
000223 ece0      	LDI  R30,HIGH(0xC000)
000224 07be      	CPC  R27,R30
000225 f431      	BRNE _0x4E
                 ; 0000 00C9        //PORTC.3 = 0;
                 ; 0000 00CA        //PORTF &= ~0x40;
                 ; 0000 00CB        on_pressed = 1;
000226 e0e1      	LDI  R30,LOW(1)
000227 e0f0      	LDI  R31,HIGH(1)
000228 93e0 0559 	STS  _on_pressed,R30
00022a 93f0 055a 	STS  _on_pressed+1,R31
                 ; 0000 00CC 
                 ; 0000 00CD     }
                 ; 0000 00CE 
                 ; 0000 00CF     off_button_state = (0x8000 | !PINE.5) | (off_button_state << 1);
                 _0x4E:
00022c e0e0      	LDI  R30,0
00022d 9b0d      	SBIS 0x1,5
00022e e0e1      	LDI  R30,1
00022f 940e 0323 	CALL SUBOPT_0x8
000231 91e0 05a6 	LDS  R30,_off_button_state
000233 91f0 05a7 	LDS  R31,_off_button_state+1
000235 940e 0327 	CALL SUBOPT_0x9
000237 93e0 05a6 	STS  _off_button_state,R30
000239 93f0 05a7 	STS  _off_button_state+1,R31
                 ; 0000 00D0     if(off_button_state == 0xC000 ) {
00023b 91a0 05a6 	LDS  R26,_off_button_state
00023d 91b0 05a7 	LDS  R27,_off_button_state+1
00023f 30a0      	CPI  R26,LOW(0xC000)
000240 ece0      	LDI  R30,HIGH(0xC000)
000241 07be      	CPC  R27,R30
000242 f431      	BRNE _0x4F
                 ; 0000 00D1       //PORTC.3 = 1;
                 ; 0000 00D2        off_pressed = 1;
000243 e0e1      	LDI  R30,LOW(1)
000244 e0f0      	LDI  R31,HIGH(1)
000245 93e0 055b 	STS  _off_pressed,R30
000247 93f0 055c 	STS  _off_pressed+1,R31
                 ; 0000 00D3 
                 ; 0000 00D4     }
                 ; 0000 00D5 
                 ; 0000 00D6     reset_button_state = (0x8000 | !PINE.6) | (reset_button_state << 1);
                 _0x4F:
000249 e0e0      	LDI  R30,0
00024a 9b0e      	SBIS 0x1,6
00024b e0e1      	LDI  R30,1
00024c 940e 0323 	CALL SUBOPT_0x8
00024e 91e0 05a8 	LDS  R30,_reset_button_state
000250 91f0 05a9 	LDS  R31,_reset_button_state+1
000252 940e 0327 	CALL SUBOPT_0x9
000254 93e0 05a8 	STS  _reset_button_state,R30
000256 93f0 05a9 	STS  _reset_button_state+1,R31
                 ; 0000 00D7     if(reset_button_state == 0xC000) {
000258 91a0 05a8 	LDS  R26,_reset_button_state
00025a 91b0 05a9 	LDS  R27,_reset_button_state+1
00025c 30a0      	CPI  R26,LOW(0xC000)
00025d ece0      	LDI  R30,HIGH(0xC000)
00025e 07be      	CPC  R27,R30
00025f f439      	BRNE _0x50
                 ; 0000 00D8 
                 ; 0000 00D9 
                 ; 0000 00DA        PORTD.3 = 1;
000260 9a93      	SBI  0x12,3
                 ; 0000 00DB        reset_pressed = 1;
000261 e0e1      	LDI  R30,LOW(1)
000262 e0f0      	LDI  R31,HIGH(1)
000263 93e0 055f 	STS  _reset_pressed,R30
000265 93f0 0560 	STS  _reset_pressed+1,R31
                 ; 0000 00DC 
                 ; 0000 00DD     }
                 ; 0000 00DE 
                 ; 0000 00DF 
                 ; 0000 00E0 }
                 _0x50:
000267 91e9      	LD   R30,Y+
000268 bfef      	OUT  SREG,R30
000269 91f9      	LD   R31,Y+
00026a 91e9      	LD   R30,Y+
00026b 91b9      	LD   R27,Y+
00026c 91a9      	LD   R26,Y+
00026d 9518      	RETI
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00E4 {
                 _main:
                 ; 0000 00E5 
                 ; 0000 00E6 
                 ; 0000 00E7     PORTA=0x00;
00026e e0e0      	LDI  R30,LOW(0)
00026f bbeb      	OUT  0x1B,R30
                 ; 0000 00E8     DDRA=0x00;
000270 bbea      	OUT  0x1A,R30
                 ; 0000 00E9 
                 ; 0000 00EA 
                 ; 0000 00EB     PORTB=0x00;
000271 bbe8      	OUT  0x18,R30
                 ; 0000 00EC     DDRB=0x07;
000272 e0e7      	LDI  R30,LOW(7)
000273 bbe7      	OUT  0x17,R30
                 ; 0000 00ED 
                 ; 0000 00EE 
                 ; 0000 00EF     PORTC=0x08;
000274 e0e8      	LDI  R30,LOW(8)
000275 bbe5      	OUT  0x15,R30
                 ; 0000 00F0     DDRC=0x08;
000276 bbe4      	OUT  0x14,R30
                 ; 0000 00F1 
                 ; 0000 00F2 
                 ; 0000 00F3     PORTD=0xC8;
000277 ece8      	LDI  R30,LOW(200)
000278 bbe2      	OUT  0x12,R30
                 ; 0000 00F4     DDRD=0x08;
000279 e0e8      	LDI  R30,LOW(8)
00027a bbe1      	OUT  0x11,R30
                 ; 0000 00F5 
                 ; 0000 00F6 
                 ; 0000 00F7 
                 ; 0000 00F8     PORTE=0xFF;
00027b efef      	LDI  R30,LOW(255)
00027c b9e3      	OUT  0x3,R30
                 ; 0000 00F9     DDRE=0x00;
00027d e0e0      	LDI  R30,LOW(0)
00027e b9e2      	OUT  0x2,R30
                 ; 0000 00FA 
                 ; 0000 00FB 
                 ; 0000 00FC 
                 ; 0000 00FD     PORTF=0xFF;
00027f efef      	LDI  R30,LOW(255)
000280 93e0 0062 	STS  98,R30
                 ; 0000 00FE     DDRF=0xFF;
000282 93e0 0061 	STS  97,R30
                 ; 0000 00FF 
                 ; 0000 0100 
                 ; 0000 0101     PORTG=0x00;
000284 e0e0      	LDI  R30,LOW(0)
000285 93e0 0065 	STS  101,R30
                 ; 0000 0102     DDRG=0x00;
000287 93e0 0064 	STS  100,R30
                 ; 0000 0103 
                 ; 0000 0104     TCCR3A=0x00;
000289 93e0 008b 	STS  139,R30
                 ; 0000 0105     TCCR3B=0x09;
00028b e0e9      	LDI  R30,LOW(9)
00028c 93e0 008a 	STS  138,R30
                 ; 0000 0106     TCNT3H=0x00;
00028e e0e0      	LDI  R30,LOW(0)
00028f 93e0 0089 	STS  137,R30
                 ; 0000 0107     TCNT3L=0x00;
000291 93e0 0088 	STS  136,R30
                 ; 0000 0108     ICR3H=0x00;
000293 93e0 0081 	STS  129,R30
                 ; 0000 0109     ICR3L=0x00;
000295 93e0 0080 	STS  128,R30
                 ; 0000 010A     OCR3AH=0xFF;
000297 efef      	LDI  R30,LOW(255)
000298 93e0 0087 	STS  135,R30
                 ; 0000 010B     OCR3AL=0xFF;
00029a 93e0 0086 	STS  134,R30
                 ; 0000 010C     OCR3BH=0x00;
00029c e0e0      	LDI  R30,LOW(0)
00029d 93e0 0085 	STS  133,R30
                 ; 0000 010D     OCR3BL=0x00;
00029f 93e0 0084 	STS  132,R30
                 ; 0000 010E     OCR3CH=0x00;
0002a1 93e0 0083 	STS  131,R30
                 ; 0000 010F     OCR3CL=0x00;
0002a3 93e0 0082 	STS  130,R30
                 ; 0000 0110 
                 ; 0000 0111     //// External Interrupt(s) initialization
                 ; 0000 0112     //EICRA=0x00;
                 ; 0000 0113     //EICRB=0xAA;
                 ; 0000 0114     //EIMSK=0xF0;
                 ; 0000 0115     //EIFR=0xF0;
                 ; 0000 0116 
                 ; 0000 0117     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0118     TIMSK=0x00;
0002a5 bfe7      	OUT  0x37,R30
                 ; 0000 0119     ETIMSK=0x04;
0002a6 e0e4      	LDI  R30,LOW(4)
0002a7 93e0 007d 	STS  125,R30
                 ; 0000 011A 
                 ; 0000 011B     // USART0 initialization
                 ; 0000 011C //
                 ; 0000 011D //    UCSR0A=0x00;
                 ; 0000 011E //    UCSR0B=0x18;
                 ; 0000 011F //    UCSR0C=0x06;
                 ; 0000 0120 //    UBRR0H=0x00;
                 ; 0000 0121 //    UBRR0L=0x67;
                 ; 0000 0122 
                 ; 0000 0123     // USART0 initialization
                 ; 0000 0124     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0125     // USART0 Receiver: On
                 ; 0000 0126     // USART0 Transmitter: On
                 ; 0000 0127     // USART0 Mode: Asynchronous
                 ; 0000 0128     // USART0 Baud Rate: 9600
                 ; 0000 0129     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
0002a9 e0e0      	LDI  R30,LOW(0)
0002aa b9eb      	OUT  0xB,R30
                 ; 0000 012A     UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0002ab ede8      	LDI  R30,LOW(216)
0002ac b9ea      	OUT  0xA,R30
                 ; 0000 012B     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
0002ad e0e6      	LDI  R30,LOW(6)
0002ae 93e0 0095 	STS  149,R30
                 ; 0000 012C     UBRR0H=0x00;
0002b0 e0e0      	LDI  R30,LOW(0)
0002b1 93e0 0090 	STS  144,R30
                 ; 0000 012D     UBRR0L=0x33;
0002b3 e3e3      	LDI  R30,LOW(51)
0002b4 b9e9      	OUT  0x9,R30
                 ; 0000 012E 
                 ; 0000 012F     PORTF &= ~0x80;
0002b5 91e0 0062 	LDS  R30,98
0002b7 77ef      	ANDI R30,0x7F
0002b8 93e0 0062 	STS  98,R30
                 ; 0000 0130     // Global enable interrupts
                 ; 0000 0131     #asm("sei")
0002ba 9478      	sei
                 ; 0000 0132 
                 ; 0000 0133     while(1)
                 _0x53:
                 ; 0000 0134     {
                 ; 0000 0135            if(on_pressed == 1)
0002bb 91a0 0559 	LDS  R26,_on_pressed
0002bd 91b0 055a 	LDS  R27,_on_pressed+1
0002bf 9711      	SBIW R26,1
0002c0 f439      	BRNE _0x56
                 ; 0000 0136             {
                 ; 0000 0137 
                 ; 0000 0138                 mainOn();
0002c1 ddf2      	RCALL _mainOn
                 ; 0000 0139                 on_pressed = 0;
0002c2 e0e0      	LDI  R30,LOW(0)
0002c3 93e0 0559 	STS  _on_pressed,R30
0002c5 93e0 055a 	STS  _on_pressed+1,R30
                 ; 0000 013A             }
                 ; 0000 013B             else if(off_pressed == 1)
0002c7 c00c      	RJMP _0x57
                 _0x56:
0002c8 91a0 055b 	LDS  R26,_off_pressed
0002ca 91b0 055c 	LDS  R27,_off_pressed+1
0002cc 9711      	SBIW R26,1
0002cd f431      	BRNE _0x58
                 ; 0000 013C             {
                 ; 0000 013D                 mainOff();
0002ce dde8      	RCALL _mainOff
                 ; 0000 013E                 off_pressed = 0;
0002cf e0e0      	LDI  R30,LOW(0)
0002d0 93e0 055b 	STS  _off_pressed,R30
0002d2 93e0 055c 	STS  _off_pressed+1,R30
                 ; 0000 013F 
                 ; 0000 0140             }
                 ; 0000 0141             if(data_received == 1)
                 _0x58:
                 _0x57:
0002d4 91a0 055d 	LDS  R26,_data_received
0002d6 91b0 055e 	LDS  R27,_data_received+1
0002d8 9711      	SBIW R26,1
0002d9 f431      	BRNE _0x59
                 ; 0000 0142             {
                 ; 0000 0143                 recOp();
0002da ddea      	RCALL _recOp
                 ; 0000 0144                 data_received = 0;
0002db e0e0      	LDI  R30,LOW(0)
0002dc 93e0 055d 	STS  _data_received,R30
0002de 93e0 055e 	STS  _data_received+1,R30
                 ; 0000 0145             }
                 ; 0000 0146             if(reset_pressed == 1)
                 _0x59:
0002e0 91a0 055f 	LDS  R26,_reset_pressed
0002e2 91b0 0560 	LDS  R27,_reset_pressed+1
0002e4 9711      	SBIW R26,1
0002e5 f431      	BRNE _0x5A
                 ; 0000 0147             {
                 ; 0000 0148                 resetFault();
0002e6 ddd3      	RCALL _resetFault
                 ; 0000 0149                 reset_pressed = 0;
0002e7 e0e0      	LDI  R30,LOW(0)
0002e8 93e0 055f 	STS  _reset_pressed,R30
0002ea 93e0 0560 	STS  _reset_pressed+1,R30
                 ; 0000 014A             }
                 ; 0000 014B         //Screen_sel();
                 ; 0000 014C 
                 ; 0000 014D     }
                 _0x5A:
0002ec cfce      	RJMP _0x53
                 ; 0000 014E 
                 ; 0000 014F }
                 _0x5B:
0002ed cfff      	RJMP _0x5B
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rdataA:
000500           	.BYTE 0x14
                 _i:
000514           	.BYTE 0x2
                 _rx_buffer0:
000516           	.BYTE 0x40
                 _rx_wr_index0:
000556           	.BYTE 0x1
                 _rx_rd_index0:
000557           	.BYTE 0x1
                 _rx_counter0:
000558           	.BYTE 0x1
                 _on_pressed:
000559           	.BYTE 0x2
                 _off_pressed:
00055b           	.BYTE 0x2
                 _data_received:
00055d           	.BYTE 0x2
                 _reset_pressed:
00055f           	.BYTE 0x2
                 _tx_buffer0:
000561           	.BYTE 0x40
                 _tx_wr_index0:
0005a1           	.BYTE 0x1
                 _tx_rd_index0:
0005a2           	.BYTE 0x1
                 _tx_counter0:
0005a3           	.BYTE 0x1
                 _on_button_state:
0005a4           	.BYTE 0x2
                 _off_button_state:
0005a6           	.BYTE 0x2
                 _reset_button_state:
0005a8           	.BYTE 0x2
                 __seed_G101:
0005aa           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0002ee 01f8      	MOVW R30,R16
0002ef 81aa      	LDD  R26,Y+2
0002f0 81bb      	LDD  R27,Y+2+1
0002f1 0fea      	ADD  R30,R26
0002f2 1ffb      	ADC  R31,R27
0002f3 91e4      	LPM  R30,Z
0002f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0002f5 e0e0      	LDI  R30,LOW(0)
0002f6 93e0 0514 	STS  _i,R30
0002f8 93e0 0515 	STS  _i+1,R30
0002fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0002fb 91e0 0514 	LDS  R30,_i
0002fd 91f0 0515 	LDS  R31,_i+1
0002ff 50e0      	SUBI R30,LOW(-_rdataA)
000300 4ffb      	SBCI R31,HIGH(-_rdataA)
000301 8310      	ST   Z,R17
000302 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
000303 0fea      	ADD  R30,R26
000304 1ffb      	ADC  R31,R27
000305 010f      	MOVW R0,R30
000306 01fa      	MOVW R30,R20
000307 85ad      	LDD  R26,Y+13
000308 85be      	LDD  R27,Y+13+1
000309 0fae      	ADD  R26,R30
00030a 1fbf      	ADC  R27,R31
00030b 91ec      	LD   R30,X
00030c 01d0      	MOVW R26,R0
00030d 93ec      	ST   X,R30
00030e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
00030f e0f0      	LDI  R31,0
000310 97f0      	SBIW R30,48
000311 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000312 e0aa      	LDI  R26,LOW(10)
000313 e0b0      	LDI  R27,HIGH(10)
000314 940e 0338 	CALL __MULW12
                +
000316 0f6e     +ADD R22 , R30
000317 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000318 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000319 50e1      	SUBI R30,LOW(1)
00031a e0f0      	LDI  R31,0
00031b 5eea      	SUBI R30,LOW(-_rx_buffer0)
00031c 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
00031d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00031e 50e1      	SUBI R30,LOW(1)
00031f e0f0      	LDI  R31,0
000320 59ef      	SUBI R30,LOW(-_tx_buffer0)
000321 4ffa      	SBCI R31,HIGH(-_tx_buffer0)
000322 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000323 e0f0      	LDI  R31,0
000324 68f0      	ORI  R31,HIGH(0x8000)
000325 01df      	MOVW R26,R30
000326 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000327 0fee      	LSL  R30
000328 1fff      	ROL  R31
000329 2bea      	OR   R30,R26
00032a 2bfb      	OR   R31,R27
00032b 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
00032c 95f1      	NEG  R31
00032d 95e1      	NEG  R30
00032e 40f0      	SBCI R31,0
00032f 9508      	RET
                 
                 __MULW12U:
000330 9ffa      	MUL  R31,R26
000331 2df0      	MOV  R31,R0
000332 9feb      	MUL  R30,R27
000333 0df0      	ADD  R31,R0
000334 9fea      	MUL  R30,R26
000335 2de0      	MOV  R30,R0
000336 0df1      	ADD  R31,R1
000337 9508      	RET
                 
                 __MULW12:
000338 d004      	RCALL __CHKSIGNW
000339 dff6      	RCALL __MULW12U
00033a f40e      	BRTC __MULW121
00033b dff0      	RCALL __ANEGW1
                 __MULW121:
00033c 9508      	RET
                 
                 __CHKSIGNW:
00033d 94e8      	CLT
00033e fff7      	SBRS R31,7
00033f c002      	RJMP __CHKSW1
000340 dfeb      	RCALL __ANEGW1
000341 9468      	SET
                 __CHKSW1:
000342 ffb7      	SBRS R27,7
000343 c006      	RJMP __CHKSW2
000344 95a0      	COM  R26
000345 95b0      	COM  R27
000346 9611      	ADIW R26,1
000347 f800      	BLD  R0,0
000348 9403      	INC  R0
000349 fa00      	BST  R0,0
                 __CHKSW2:
00034a 9508      	RET
                 
                 __SAVELOCR6:
00034b 935a      	ST   -Y,R21
                 __SAVELOCR5:
00034c 934a      	ST   -Y,R20
                 __SAVELOCR4:
00034d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00034e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00034f 931a      	ST   -Y,R17
000350 930a      	ST   -Y,R16
000351 9508      	RET
                 
                 __LOADLOCR6:
000352 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000353 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000354 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000355 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000356 8119      	LDD  R17,Y+1
000357 8108      	LD   R16,Y
000358 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  14 r1 :   2 r2 :   1 r3 :   0 r4 :   0 r5 :   0 r6 :   2 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   3 r13:   2 r14:   0 r15:   0 
r16:  17 r17:  24 r18:   5 r19:   4 r20:  11 r21:   8 r22:   8 r23:   4 
r24:   8 r25:   2 r26:  61 r27:  30 r28:   7 r29:   1 r30: 248 r31:  65 
x  :   9 y  :  70 z  :  13 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   7 add   :   9 
adiw  :   7 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   6 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  34 
cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :   4 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   4 cpc   :   9 cpi   :  17 cpse  :   0 dec   :   1 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   5 inc   :   1 jmp   :  36 ld    :  20 ldd   :  18 
ldi   : 107 lds   :  41 lpm   :   9 lsl   :   1 lsr   :   0 mov   :   6 
movw  :  18 mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   3 ori   :   2 out   :  26 pop   :   0 push  :   0 rcall :  14 
ret   :  23 reti  :   2 rjmp  :  19 rol   :   1 ror   :   0 sbc   :   0 
sbci  :   7 sbi   :   4 sbic  :   1 sbis  :   3 sbiw  :  12 sbr   :   0 
sbrc  :   0 sbrs  :   2 sec   :   0 seh   :   0 sei   :   3 sen   :   0 
ser   :   0 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  39 std   :   7 sts   :  59 sub   :   0 subi  :  16 
swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 53 out of 117 (45.3%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006b2   1638     76   1714  131072   1.3%
[.dseg] 0x000100 0x0005ae      0    174    174    4351   4.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 7 warnings
