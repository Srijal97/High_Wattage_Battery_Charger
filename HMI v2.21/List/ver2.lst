
AVRASM ver. 2.1.30  C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm Wed Jan 22 15:59:13 2020

C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1064): warning: Register r6 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1065): warning: Register r9 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1066): warning: Register r8 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1067): warning: Register r11 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1068): warning: Register r10 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1069): warning: Register r13 already defined by the .DEF directive
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1070): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hr1=R5
                 	.DEF _hr2=R4
                 	.DEF _min1=R7
                 	.DEF _min2=R6
                 	.DEF _sec1=R9
                 	.DEF _sec2=R8
                 	.DEF _dd1=R11
                 	.DEF _dd2=R10
                 	.DEF _mm1=R13
                 	.DEF _mm2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 01aa 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 01dd 	JMP  _ext_int4_isr
00000c 940c 01de 	JMP  _ext_int5_isr
00000e 940c 01df 	JMP  _ext_int6_isr
000010 940c 01e0 	JMP  _ext_int7_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 01e2 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 01e1 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x18:
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1122): warning: .cseg .db misalignment - padding zero byte
00004f 0013      	.DB  0x13
                 _0x19:
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1124): warning: .cseg .db misalignment - padding zero byte
000050 0013      	.DB  0x13
                 _0x1A:
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1126): warning: .cseg .db misalignment - padding zero byte
000051 0001      	.DB  0x1
                 _0x1B:
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1128): warning: .cseg .db misalignment - padding zero byte
000052 0003      	.DB  0x3
                 _0xE8:
000053 0000
000054 0000
000055 0000
000056 0101      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1
000057 0101      	.DB  0x1,0x1
                 _0x0:
000058 0020
000059 005e
00005a 003e
00005b 3025      	.DB  0x20,0x0,0x5E,0x0,0x3E,0x0,0x25,0x30
00005c 6432
00005d 253a
00005e 3230
00005f 3a64      	.DB  0x32,0x64,0x3A,0x25,0x30,0x32,0x64,0x3A
000060 3025
000061 6432
000062 2500
000063 3230      	.DB  0x25,0x30,0x32,0x64,0x0,0x25,0x30,0x32
000064 2f64
000065 3025
000066 6432
000067 252f      	.DB  0x64,0x2F,0x25,0x30,0x32,0x64,0x2F,0x25
000068 6434
000069 2500
00006a 3430
00006b 0064      	.DB  0x34,0x64,0x0,0x25,0x30,0x34,0x64,0x0
00006c 3025
00006d 6433
00006e 5600
00006f 6c6f      	.DB  0x25,0x30,0x33,0x64,0x0,0x56,0x6F,0x6C
000070 6174
000071 6567
000072 7320
000073 7465      	.DB  0x74,0x61,0x67,0x65,0x20,0x73,0x65,0x74
000074 7420
000075 3a6f
000076 5300
000077 7465      	.DB  0x20,0x74,0x6F,0x3A,0x0,0x53,0x65,0x74
000078 7620
000079 6c61
00007a 6575
00007b 7320      	.DB  0x20,0x76,0x61,0x6C,0x75,0x65,0x20,0x73
00007c 6f68
00007d 6c75
00007e 0064
00007f 6562      	.DB  0x68,0x6F,0x75,0x6C,0x64,0x0,0x62,0x65
000080 6220
000081 7465
000082 6577
000083 6e65      	.DB  0x20,0x62,0x65,0x74,0x77,0x65,0x65,0x6E
000084 3120
000085 3031
000086 002d
000087 3331      	.DB  0x20,0x31,0x31,0x30,0x2D,0x0,0x31,0x33
000088 2035
000089 6f76
00008a 746c
00008b 0073      	.DB  0x35,0x20,0x76,0x6F,0x6C,0x74,0x73,0x0
00008c 7543
00008d 7272
00008e 6e65
00008f 2074      	.DB  0x43,0x75,0x72,0x72,0x65,0x6E,0x74,0x20
000090 6573
000091 2074
000092 6f74
000093 003a      	.DB  0x73,0x65,0x74,0x20,0x74,0x6F,0x3A,0x0
000094 6562
000095 6220
000096 7465
000097 6577      	.DB  0x62,0x65,0x20,0x62,0x65,0x74,0x77,0x65
000098 6e65
000099 3120
00009a 2d30
00009b 3200      	.DB  0x65,0x6E,0x20,0x31,0x30,0x2D,0x0,0x32
00009c 2030
00009d 6d61
00009e 7370
00009f 5700      	.DB  0x30,0x20,0x61,0x6D,0x70,0x73,0x0,0x57
0000a0 6c65
0000a1 6f63
0000a2 656d
0000a3 7420      	.DB  0x65,0x6C,0x63,0x6F,0x6D,0x65,0x20,0x74
0000a4 206f
0000a5 4d48
0000a6 0049
0000a7 6150      	.DB  0x6F,0x20,0x48,0x4D,0x49,0x0,0x50,0x61
0000a8 7373
0000a9 6f77
0000aa 6472
0000ab 5220      	.DB  0x73,0x73,0x77,0x6F,0x72,0x64,0x20,0x52
0000ac 7473
0000ad 5400
0000ae 6d69
0000af 7265      	.DB  0x73,0x74,0x0,0x54,0x69,0x6D,0x65,0x72
0000b0 5300
0000b1 6e65
0000b2 6f73
0000b3 2072      	.DB  0x0,0x53,0x65,0x6E,0x73,0x6F,0x72,0x20
0000b4 6156
0000b5 756c
0000b6 7365
0000b7 5300      	.DB  0x56,0x61,0x6C,0x75,0x65,0x73,0x0,0x53
0000b8 7465
0000b9 5020
0000ba 7261
0000bb 6d61      	.DB  0x65,0x74,0x20,0x50,0x61,0x72,0x61,0x6D
0000bc 7465
0000bd 7265
0000be 0073
0000bf 4954      	.DB  0x65,0x74,0x65,0x72,0x73,0x0,0x54,0x49
0000c0 454d
0000c1 5300
0000c2 7465
0000c3 4420      	.DB  0x4D,0x45,0x0,0x53,0x65,0x74,0x20,0x44
0000c4 7461
0000c5 2065
0000c6 202f
0000c7 6954      	.DB  0x61,0x74,0x65,0x20,0x2F,0x20,0x54,0x69
0000c8 656d
0000c9 4100
0000ca 616c
0000cb 6d72      	.DB  0x6D,0x65,0x0,0x41,0x6C,0x61,0x72,0x6D
0000cc 4d20
0000cd 646f
0000ce 0065
0000cf 6f43      	.DB  0x20,0x4D,0x6F,0x64,0x65,0x0,0x43,0x6F
0000d0 6e75
0000d1 6474
0000d2 776f
0000d3 206e      	.DB  0x75,0x6E,0x74,0x64,0x6F,0x77,0x6E,0x20
0000d4 6954
0000d5 656d
0000d6 0072
0000d7 6144      	.DB  0x54,0x69,0x6D,0x65,0x72,0x0,0x44,0x61
0000d8 6574
0000d9 203a
0000da 5400
0000db 6d69      	.DB  0x74,0x65,0x3A,0x20,0x0,0x54,0x69,0x6D
0000dc 3a65
0000dd 0020
0000de 654e
0000df 2077      	.DB  0x65,0x3A,0x20,0x0,0x4E,0x65,0x77,0x20
0000e0 3a54
0000e1 4e00
0000e2 7765
0000e3 4420      	.DB  0x54,0x3A,0x0,0x4E,0x65,0x77,0x20,0x44
0000e4 003a
0000e5 6f63
0000e6 6e75
0000e7 6474      	.DB  0x3A,0x0,0x63,0x6F,0x75,0x6E,0x74,0x64
0000e8 776f
0000e9 746e
0000ea 6d69
0000eb 7265      	.DB  0x6F,0x77,0x6E,0x74,0x69,0x6D,0x65,0x72
0000ec 5300
0000ed 4e45
0000ee 4f53
0000ef 5352      	.DB  0x0,0x53,0x45,0x4E,0x53,0x4F,0x52,0x53
0000f0 4100
0000f1 616e
0000f2 6f6c
0000f3 0067      	.DB  0x0,0x41,0x6E,0x61,0x6C,0x6F,0x67,0x0
0000f4 6944
0000f5 6967
0000f6 6174
0000f7 006c      	.DB  0x44,0x69,0x67,0x69,0x74,0x61,0x6C,0x0
0000f8 6854
0000f9 7265
0000fa 6f6d
0000fb 6f63      	.DB  0x54,0x68,0x65,0x72,0x6D,0x6F,0x63,0x6F
0000fc 7075
0000fd 656c
0000fe 4e00
0000ff 206f      	.DB  0x75,0x70,0x6C,0x65,0x0,0x4E,0x6F,0x20
000100 7566
000101 636e
000102 6974
000103 6e6f      	.DB  0x66,0x75,0x6E,0x63,0x74,0x69,0x6F,0x6E
000104 2073
000105 2020
000106 2020
000107 2020      	.DB  0x73,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000108 2020
000109 6120
00010a 6464
00010b 6465      	.DB  0x20,0x20,0x20,0x61,0x64,0x64,0x65,0x64
00010c 7920
00010d 7465
00010e 4300
00010f 3068      	.DB  0x20,0x79,0x65,0x74,0x0,0x43,0x68,0x30
000110 003a
000111 6843
000112 3a31
000113 4300      	.DB  0x3A,0x0,0x43,0x68,0x31,0x3A,0x0,0x43
000114 3268
000115 003a
000116 6843
000117 3a33      	.DB  0x68,0x32,0x3A,0x0,0x43,0x68,0x33,0x3A
000118 4300
000119 3468
00011a 003a
00011b 6843      	.DB  0x0,0x43,0x68,0x34,0x3A,0x0,0x43,0x68
00011c 3a35
00011d 4300
00011e 3668
00011f 003a      	.DB  0x35,0x3A,0x0,0x43,0x68,0x36,0x3A,0x0
000120 6843
000121 3a37
000122 5400
000123 6d65      	.DB  0x43,0x68,0x37,0x3A,0x0,0x54,0x65,0x6D
000124 3a70
000125 3025
000126 6434
000127 5000      	.DB  0x70,0x3A,0x25,0x30,0x34,0x64,0x0,0x50
000128 5241
000129 4d41
00012a 5445
00012b 5245      	.DB  0x41,0x52,0x41,0x4D,0x45,0x54,0x45,0x52
00012c 0053
00012d 6f56
00012e 746c
00012f 6761      	.DB  0x53,0x0,0x56,0x6F,0x6C,0x74,0x61,0x67
000130 2065
000131 5628
000132 4c4f
000133 5354      	.DB  0x65,0x20,0x28,0x56,0x4F,0x4C,0x54,0x53
000134 0029
000135 7543
000136 7272
000137 6e65      	.DB  0x29,0x0,0x43,0x75,0x72,0x72,0x65,0x6E
000138 2074
000139 4128
00013a 504d
00013b 2953      	.DB  0x74,0x20,0x28,0x41,0x4D,0x50,0x53,0x29
00013c 5300
00013d 7465
00013e 7620
00013f 6c6f      	.DB  0x0,0x53,0x65,0x74,0x20,0x76,0x6F,0x6C
000140 6174
000141 6567
000142 003a
000143 6553      	.DB  0x74,0x61,0x67,0x65,0x3A,0x0,0x53,0x65
000144 2074
000145 7563
000146 7272
000147 6e65      	.DB  0x74,0x20,0x63,0x75,0x72,0x72,0x65,0x6E
000148 3a74
000149 4500
00014a 7272
00014b 726f      	.DB  0x74,0x3A,0x0,0x45,0x72,0x72,0x6F,0x72
00014c 002e
00014d 6552
00014e 7473
00014f 7261      	.DB  0x2E,0x0,0x52,0x65,0x73,0x74,0x61,0x72
000150 6974
000151 676e
000152 6920
000153 206e      	.DB  0x74,0x69,0x6E,0x67,0x20,0x69,0x6E,0x20
000154 2035
000155 6573
000156 6f63
000157 646e      	.DB  0x35,0x20,0x73,0x65,0x63,0x6F,0x6E,0x64
000158 2e73
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1197): warning: .cseg .db misalignment - padding zero byte
000159 0000      	.DB  0x73,0x2E,0x0
                 _0x2020060:
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1199): warning: .cseg .db misalignment - padding zero byte
00015a 0001      	.DB  0x1
                 _0x2020000:
00015b 4e2d
00015c 4e41
00015d 4900
00015e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\anwar\OneDrive\Desktop\PDC\HMI v2.2\List\ver2.asm(1202): warning: .cseg .db misalignment - padding zero byte
00015f 0000      	.DB  0x0
                 _0x2080003:
000160 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000161 0001      	.DW  0x01
000162 0567      	.DW  _yy1
000163 009e      	.DW  _0x18*2
                 
000164 0001      	.DW  0x01
000165 0568      	.DW  _yy2
000166 00a0      	.DW  _0x19*2
                 
000167 0001      	.DW  0x01
000168 0589      	.DW  _Screen
000169 00a2      	.DW  _0x1A*2
                 
00016a 0001      	.DW  0x01
00016b 05a9      	.DW  _rtc_setter
00016c 00a4      	.DW  _0x1B*2
                 
00016d 0002      	.DW  0x02
00016e 0500      	.DW  _0x1C
00016f 00b0      	.DW  _0x0*2
                 
000170 0002      	.DW  0x02
000171 0502      	.DW  _0x1C+2
000172 00b0      	.DW  _0x0*2
                 
000173 0002      	.DW  0x02
000174 0504      	.DW  _0x1C+4
000175 00b0      	.DW  _0x0*2
                 
000176 0002      	.DW  0x02
000177 0506      	.DW  _0x1C+6
000178 00b0      	.DW  _0x0*2
                 
000179 0002      	.DW  0x02
00017a 0508      	.DW  _0x1C+8
00017b 00b0      	.DW  _0x0*2
                 
00017c 0002      	.DW  0x02
00017d 050a      	.DW  _0x1C+10
00017e 00b0      	.DW  _0x0*2
                 
00017f 0002      	.DW  0x02
000180 050c      	.DW  _0x1C+12
000181 00b2      	.DW  _0x0*2+2
                 
000182 0002      	.DW  0x02
000183 050e      	.DW  _0x1C+14
000184 00b2      	.DW  _0x0*2+2
                 
000185 0002      	.DW  0x02
000186 0510      	.DW  _0x1C+16
000187 00b2      	.DW  _0x0*2+2
                 
000188 0002      	.DW  0x02
000189 0512      	.DW  _0x1C+18
00018a 00b2      	.DW  _0x0*2+2
                 
00018b 0002      	.DW  0x02
00018c 0514      	.DW  _0x1C+20
00018d 00b2      	.DW  _0x0*2+2
                 
00018e 0002      	.DW  0x02
00018f 0516      	.DW  _0x1C+22
000190 00b2      	.DW  _0x0*2+2
                 
000191 0010      	.DW  0x10
000192 0518      	.DW  _0x75
000193 00dd      	.DW  _0x0*2+45
                 
000194 0010      	.DW  0x10
000195 0528      	.DW  _0x8E
000196 0118      	.DW  _0x0*2+104
                 
000197 000f      	.DW  0x0F
000198 0538      	.DW  _0x96
000199 013f      	.DW  _0x0*2+143
                 
00019a 0007      	.DW  0x07
00019b 0547      	.DW  _0xD8
00019c 0293      	.DW  _0x0*2+483
                 
00019d 0019      	.DW  0x19
00019e 054e      	.DW  _0xD8+7
00019f 029a      	.DW  _0x0*2+490
                 
0001a0 000a      	.DW  0x0A
0001a1 0004      	.DW  0x04
0001a2 00a6      	.DW  _0xE8*2
                 
0001a3 0001      	.DW  0x01
0001a4 05ab      	.DW  __seed_G101
0001a5 02b4      	.DW  _0x2020060*2
                 
0001a6 0002      	.DW  0x02
0001a7 05af      	.DW  __base_y_G104
0001a8 02c0      	.DW  _0x2080003*2
                 
                 _0xFFFFFFFF:
0001a9 0000      	.DW  0
                 
                 __RESET:
0001aa 94f8      	CLI
0001ab 27ee      	CLR  R30
0001ac bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001ad e0f1      	LDI  R31,1
0001ae bff5      	OUT  MCUCR,R31
0001af bfe5      	OUT  MCUCR,R30
0001b0 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0001b2 e1f8      	LDI  R31,0x18
0001b3 bdf1      	OUT  WDTCR,R31
0001b4 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0001b5 e08d      	LDI  R24,(14-2)+1
0001b6 e0a2      	LDI  R26,2
0001b7 27bb      	CLR  R27
                 __CLEAR_REG:
0001b8 93ed      	ST   X+,R30
0001b9 958a      	DEC  R24
0001ba f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001bb e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001bc e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001bd e0a0      	LDI  R26,LOW(__SRAM_START)
0001be e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0001bf 93ed      	ST   X+,R30
0001c0 9701      	SBIW R24,1
0001c1 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001c2 ece2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001c3 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001c4 9185      	LPM  R24,Z+
0001c5 9195      	LPM  R25,Z+
0001c6 9700      	SBIW R24,0
0001c7 f061      	BREQ __GLOBAL_INI_END
0001c8 91a5      	LPM  R26,Z+
0001c9 91b5      	LPM  R27,Z+
0001ca 9005      	LPM  R0,Z+
0001cb 9015      	LPM  R1,Z+
0001cc 01bf      	MOVW R22,R30
0001cd 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001ce 9005      	LPM  R0,Z+
0001cf 920d      	ST   X+,R0
0001d0 9701      	SBIW R24,1
0001d1 f7e1      	BRNE __GLOBAL_INI_LOOP
0001d2 01fb      	MOVW R30,R22
0001d3 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0001d4 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001d5 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001d6 bfed      	OUT  SPL,R30
0001d7 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001d8 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001d9 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001da e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001db 940c 076d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type               : ATmega128
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 1024
                 ;*****************************************************/
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <Math.h>
                 ;
                 ;// I2C Bus functions
                 ;#asm
                    .equ __i2c_port=0x12 ;PORTD
                    .equ __sda_bit=1
                    .equ __scl_bit=0
                 ; 0000 0015 #endasm
                 ;
                 ;#include <i2c.h>
                 ;
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#include <alcd.h>
                 ;
                 ;// External Interrupt 4 service routine
                 ;interrupt [EXT_INT4] void ext_int4_isr(void)
                 ; 0000 0021 {
                 
                 	.CSEG
                 _ext_int4_isr:
                 ; 0000 0022 // Place your code here
                 ; 0000 0023 
                 ; 0000 0024 }
0001dd 9518      	RETI
                 ;
                 ;// External Interrupt 5 service routine
                 ;interrupt [EXT_INT5] void ext_int5_isr(void)
                 ; 0000 0028 {
                 _ext_int5_isr:
                 ; 0000 0029 // Place your code here
                 ; 0000 002A 
                 ; 0000 002B }
0001de 9518      	RETI
                 ;
                 ;// External Interrupt 6 service routine
                 ;interrupt [EXT_INT6] void ext_int6_isr(void)
                 ; 0000 002F {
                 _ext_int6_isr:
                 ; 0000 0030 // Place your code here
                 ; 0000 0031 
                 ; 0000 0032 }
0001df 9518      	RETI
                 ;
                 ;// External Interrupt 7 service routine
                 ;interrupt [EXT_INT7] void ext_int7_isr(void)
                 ; 0000 0036 {
                 _ext_int7_isr:
                 ; 0000 0037 // Place your code here
                 ; 0000 0038 
                 ; 0000 0039 }
0001e0 9518      	RETI
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// Get a character from the USART1 Receiver
                 ;#pragma used+
                 ;char getchar1(void)
                 ; 0000 0060 {
                 ; 0000 0061 char status,data;
                 ; 0000 0062 while (1)
                 ;	status -> R17
                 ;	data -> R16
                 ; 0000 0063       {
                 ; 0000 0064       while (((status=UCSR1A) & RX_COMPLETE)==0);
                 ; 0000 0065       data=UDR1;
                 ; 0000 0066       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
                 ; 0000 0067          return data;
                 ; 0000 0068       }
                 ; 0000 0069 }
                 ;#pragma used-
                 ;
                 ;// Write a character to the USART1 Transmitter
                 ;#pragma used+
                 ;void putchar1(char c)
                 ; 0000 006F {
                 ; 0000 0070 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
                 ;	c -> Y+0
                 ; 0000 0071 UDR1=c;
                 ; 0000 0072 }
                 ;#pragma used-
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 007A {
                 _timer0_ovf_isr:
                 ; 0000 007B // Place your code here
                 ; 0000 007C 
                 ; 0000 007D }
0001e1 9518      	RETI
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0081 {
                 _timer1_ovf_isr:
                 ; 0000 0082 // Place your code here
                 ; 0000 0083 
                 ; 0000 0084 }
0001e2 9518      	RETI
                 ;
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 008A {
                 _read_adc:
                 ; 0000 008B ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
0001e3 81e8      	LD   R30,Y
0001e4 b9e7      	OUT  0x7,R30
                 ; 0000 008C // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 008D delay_us(10);
                +
0001e5 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
0001e6 958a     +DEC R24
0001e7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 008E // Start the AD conversion
                 ; 0000 008F ADCSRA|=0x40;
0001e8 9a36      	SBI  0x6,6
                 ; 0000 0090 // Wait for the AD conversion to complete
                 ; 0000 0091 while ((ADCSRA & 0x10)==0);
                 _0xD:
0001e9 9b34      	SBIS 0x6,4
0001ea cffe      	RJMP _0xD
                 ; 0000 0092 ADCSRA|=0x10;
0001eb 9a34      	SBI  0x6,4
                 ; 0000 0093 return ADCW;
0001ec b1e4      	IN   R30,0x4
0001ed b1f5      	IN   R31,0x4+1
0001ee 9621      	ADIW R28,1
0001ef 9508      	RET
                 ; 0000 0094 }
                 ;
                 ;// SPI functions
                 ;#include <spi.h>
                 ;
                 ;//---------------THERMOCOUPLE------------
                 ;#include "Thermocouple.c"
                 ;//ThermoInit(void);
                 ;/*
                 ;/*
                 ; *  Define literals for the SPI port accesses and the thermocouple chip
                 ; *  select line.
                 ; */
                 ;#define  PORT_THERMO_CS           PORTE
                 ;#define  DDR_THERMO_CS            DDRE
                 ;#define  BIT_THERMO_CS            3
                 ;#define  MASK_THERMO_CS           (1<<BIT_THERMO_CS)
                 ;
                 ;#define  PORT_SPI                 PORTB
                 ;#define  DDR_SPI                  DDRB
                 ;#define  BIT_SPI_SCK              1
                 ;#define  MASK_SPI_SCK             (1<<BIT_SPI_SCK)
                 ;#define  BIT_SPI_SS               0
                 ;#define  MASK_SPI_SS              (1<<BIT_SPI_SS)
                 ;#define  BIT_SPI_MISO             3
                 ;#define  MASK_SPI_MISO            (1<<BIT_SPI_MISO)
                 ;
                 ;/*
                 ; *  ThermoInit      set up hardware for using the MAX31855
                 ; *
                 ; *  This routine configures the SPI as a master for exchanging
                 ; *  data with the MAX31855 thermocouple converter.  All pins
                 ; *  and registers for accessing the various port lines are
                 ; *  defined at the top of this code as named literals.
                 ; */
                 ;/*
                 ;void  ThermoInit(void)
                 ;{
                 ;    PORT_THERMO_CS |= MASK_THERMO_CS;        // start with CS high
                 ;    DDR_THERMO_CS |= MASK_THERMO_CS;         // now make that line an output
                 ;
                 ;    PORT_SPI |= MASK_SPI_SS;                 // SS* is not used but must be driven high
                 ;    DDR_SPI |= MASK_SPI_SS;                  // SS* is not used but must be driven high
                 ;    PORT_SPI &= ~MASK_SPI_SCK;               // drive SCK low
                 ;    DDR_SPI |= MASK_SPI_SCK;                 // now make SCK an output
                 ;
                 ;    SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0) | (1<<SPR1) | (1<<CPHA);
                 ;                                             // enable SPI as master, slowest clock,
                 ;                                             // data active on trailing edge of SCK
                 ;}
                 ;
                 ;
                 ;/*
                 ; *  ThermoReadRaw      return 32-bit raw value from MAX31855
                 ; *
                 ; *  This routine uses a four-byte SPI exchange to collect a
                 ; *  raw reading from the MAX31855 thermocouple converter.  That
                 ; *  value is returned unprocessed to the calling routine.
                 ; *
                 ; *  Note that this routine does NO processing.  It does not
                 ; *  check for error flags or reasonable data ranges.
                 ;
                 ;//  d = 0x01900000;            // thermocouple = +25C, reference = 0C, no faults
                 ;//  d = 0xfff00000;            // thermocouple = -1C, reference = 0C, no faults
                 ;//  d = 0xf0600000;            // thermocouple = -250C, reference = 0C, no faults
                 ;//  d = 0x00010001;            // thermocouple = N/A, reference = N/A, open fault
                 ;//  d = 0x00010002;            // thermocouple = N/A, reference = N/A, short to GND
                 ;//  d = 0x00010004;            // thermocouple = N/A, refernece = N/A, short to VCC
                 ;*/
                 ;signed int  ThermoReadRaw (void)
                 ; 0000 009A {
                 _ThermoReadRaw:
                 ;    signed int                   d;
                 ;    unsigned char                n;
                 ;
                 ;    PORT_THERMO_CS &= ~MASK_THERMO_CS;    // pull thermo CS low
0001f0 940e 11fc 	CALL __SAVELOCR4
                 ;	d -> R16,R17
                 ;	n -> R19
0001f2 981b      	CBI  0x3,3
                 ;    d = 0;                                // start with nothing
                +
0001f3 e000     +LDI R16 , LOW ( 0 )
0001f4 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;    for (n=3; n!=0xff; n--)
0001f5 e033      	LDI  R19,LOW(3)
                 _0x11:
0001f6 3f3f      	CPI  R19,255
0001f7 f069      	BREQ _0x12
                 ;    {
                 ;        SPDR = 0;                         // send a null byte
0001f8 e0e0      	LDI  R30,LOW(0)
0001f9 b9ef      	OUT  0xF,R30
                 ;        while ((SPSR & (1<<SPIF)) == 0)  ;    // wait until transfer ends
                 _0x13:
0001fa 9b77      	SBIS 0xE,7
0001fb cffe      	RJMP _0x13
                 ;        d = (d<<8) + SPDR;                // add next byte, starting with MSB
0001fc 2fb0      	MOV  R27,R16
0001fd e0a0      	LDI  R26,LOW(0)
0001fe b1ef      	IN   R30,0xF
0001ff e0f0      	LDI  R31,0
000200 0fea      	ADD  R30,R26
000201 1ffb      	ADC  R31,R27
000202 018f      	MOVW R16,R30
                 ;    }
000203 5031      	SUBI R19,1
000204 cff1      	RJMP _0x11
                 _0x12:
                 ;    PORT_THERMO_CS |= MASK_THERMO_CS;     // done, pull CS high
000205 9a1b      	SBI  0x3,3
                 ;    return  d;
000206 01f8      	MOVW R30,R16
000207 940e 1203 	CALL __LOADLOCR4
000209 c2b4      	RJMP _0x212000D
                 ;}
                 ;
                 ;/*
                 ; *  ThermoReadC      return thermocouple temperature in degrees C
                 ; *
                 ; *  This routine takes a raw reading from the thermocouple converter
                 ; *  and translates that value into a temperature in degrees C.  That
                 ; *  value is returned to the calling routine as an integer value,
                 ; *  rounded.
                 ; *
                 ; *  The thermocouple value is stored in bits 31-18 as a signed 14-bit
                 ; *  value, where the LSB represents 0.25 degC.  To convert to an
                 ; *  integer value with no intermediate float operations, this code
                 ; *  shifts the value 20 places right, rather than 18, effectively
                 ; *  dividing the raw value by 4 and scaling it to unit degrees.
                 ; *
                 ; *  Note that this routine does NOT check the error flags in the
                 ; *  raw value.  This would be a nice thing to add later, when I've
                 ; *  figured out how I want to propagate the error conditions...
                 ; */
                 ;int  ThermoReadC(void)
                 ;{
                 _ThermoReadC:
                 ;    signed int d;
                 ;    int neg;
                 ;
                 ;
                 ;    neg = 0;                    // assume a positive raw value
00020a 940e 11fc 	CALL __SAVELOCR4
                 ;	d -> R16,R17
                 ;	neg -> R18,R19
                +
00020c e020     +LDI R18 , LOW ( 0 )
00020d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ;    d = ThermoReadRaw();        // get a raw value
00020e dfe1      	RCALL _ThermoReadRaw
00020f 018f      	MOVW R16,R30
                 ;    d = ((d >> 10) & 0x3fff);   // leave only thermocouple value in d
000210 01d8      	MOVW R26,R16
000211 e0ea      	LDI  R30,LOW(10)
000212 940e 111c 	CALL __ASRW12
000214 73ff      	ANDI R31,HIGH(0x3FFF)
000215 018f      	MOVW R16,R30
                 ;    if (d & 0x2000)             // if thermocouple reading is negative...
000216 ff15      	SBRS R17,5
000217 c007      	RJMP _0x16
                 ;    {
                 ;        d = -d & 0x3fff;        // always work with positive values
000218 01f8      	MOVW R30,R16
000219 940e 1110 	CALL __ANEGW1
00021b 73ff      	ANDI R31,HIGH(0x3FFF)
00021c 018f      	MOVW R16,R30
                 ;        neg = 1;                // but note original value was negative
                +
00021d e021     +LDI R18 , LOW ( 1 )
00021e e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ;    }
                 ;    d = d + 2;                  // round up by 0.5 degC (2 LSBs)
                 _0x16:
                +
00021f 5f0e     +SUBI R16 , LOW ( - 2 )
000220 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
                 ;    d = d >> 2;                 // now convert from 0.25 degC units to degC
000221 9515      	ASR  R17
000222 9507      	ROR  R16
000223 9515      	ASR  R17
000224 9507      	ROR  R16
                 ;    if (neg)  d = -d;           // convert to negative if needed
000225 2e02      	MOV  R0,R18
000226 2a03      	OR   R0,R19
000227 f021      	BREQ _0x17
000228 01f8      	MOVW R30,R16
000229 940e 1110 	CALL __ANEGW1
00022b 018f      	MOVW R16,R30
                 ;    return  d;                  // return as integer
                 _0x17:
00022c 01f8      	MOVW R30,R16
00022d 940e 1203 	CALL __LOADLOCR4
00022f c28e      	RJMP _0x212000D
                 ;}
                 ;
                 ;
                 ;/*
                 ; *  ThermoReadF      return thermocouple temperature in degrees F
                 ; *
                 ; *  This routine takes a reading from the thermocouple converter in
                 ; *  degC and converts it to degF.
                 ; *
                 ; *  Note that this routine simply calls ThermoReadC and converts
                 ; *  from degC to degF using integer math.  This routine does not
                 ; *  see the raw converter value and cannot do any error checking.
                 ; */
                 ;/*int  ThermoReadF(void)
                 ;{
                 ;    int t;
                 ;
                 ;    t = ThermoReadC();           // get the value in degC
                 ;    t = ((t * 90) / 50) + 32;    // convert to degF
                 ;    return  t;                   // all done
                 ;}*/
                 ;
                 ;//---------------Variables---------------
                 ;#include <variables.h>
                 
                 	.DSEG
                 ;//-------------Display Functions---------
                 ;#include "Display_functions.c"
                 ;//#include <variables.h>
                 ;
                 ;void pointer_display_horiz()                          //checks the cursor position.
                 ; 0000 009E {
                 
                 	.CSEG
                 _pointer_display_horiz:
                 ;    lcd_gotoxy(0,2);
000230 940e 0c8e 	CALL SUBOPT_0x0
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(1,2);
000232 940e 0c9a 	CALL SUBOPT_0x1
                 ;    lcd_putsf(" ");
000234 940e 0ca0 	CALL SUBOPT_0x2
                 ;    lcd_gotoxy(2,2);
000236 e0e2      	LDI  R30,LOW(2)
000237 940e 0ca6 	CALL SUBOPT_0x3
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(3,2);
000239 e0e3      	LDI  R30,LOW(3)
00023a 940e 0ca6 	CALL SUBOPT_0x3
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(Pointer_horiz,2);                      //Pointer displays arrow at that position
00023c 91e0 058b 	LDS  R30,_Pointer_horiz
00023e 940e 0cac 	CALL SUBOPT_0x4
                 ;    lcd_putsf("^");
                +
000240 ebe2     +LDI R30 , LOW ( 2 * _0x0 + ( 2 ) )
000241 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 2 ) )
                 	__POINTW1FN _0x0,2
000242 c017      	RJMP _0x212000F
                 ;}
                 ;
                 ;void pointer_display_vert()                          //checks the cursor position.
                 ;{
                 _pointer_display_vert:
                 ;    lcd_gotoxy(0,0);
000243 940e 0cb1 	CALL SUBOPT_0x5
                 ;    lcd_putsf(" ");
000245 940e 0ca0 	CALL SUBOPT_0x2
                 ;    lcd_gotoxy(0,1);
000247 940e 0cb6 	CALL SUBOPT_0x6
                 ;    lcd_putsf(" ");
000249 940e 0ca0 	CALL SUBOPT_0x2
                 ;    lcd_gotoxy(0,2);
00024b 940e 0c8e 	CALL SUBOPT_0x0
                 ;    lcd_putsf(" ");
                 ;    lcd_gotoxy(0,3);
00024d 940e 0cbc 	CALL SUBOPT_0x7
                 ;    lcd_putsf(" ");
00024f 940e 0ca0 	CALL SUBOPT_0x2
                 ;    lcd_gotoxy(0,Pointer_vert);                      //Pointer displays arrow at that position
000251 e0e0      	LDI  R30,LOW(0)
000252 93ea      	ST   -Y,R30
000253 91e0 058d 	LDS  R30,_Pointer_vert
000255 93ea      	ST   -Y,R30
000256 940e 0bd1 	CALL _lcd_gotoxy
                 ;    lcd_putsf(">");
                +
000258 ebe4     +LDI R30 , LOW ( 2 * _0x0 + ( 4 ) )
000259 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW1FN _0x0,4
                 _0x212000F:
00025a 93fa      	ST   -Y,R31
00025b 93ea      	ST   -Y,R30
00025c 940e 0c1f 	CALL _lcd_putsf
                 ;}
00025e 9508      	RET
                 ;
                 ;void RTC_pointer()
                 ;{
                 _RTC_pointer:
                 ;    lcd_gotoxy(6,2);
00025f e0e6      	LDI  R30,LOW(6)
000260 940e 0cac 	CALL SUBOPT_0x4
                 ;    sprintf(disptime1, "%02d:%02d:%02d", hr1, min1, sec1);
000262 e6e9      	LDI  R30,LOW(_disptime1)
000263 e0f5      	LDI  R31,HIGH(_disptime1)
000264 93fa      	ST   -Y,R31
000265 93ea      	ST   -Y,R30
                +
000266 ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
000267 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
000268 93fa      	ST   -Y,R31
000269 93ea      	ST   -Y,R30
00026a 2de5      	MOV  R30,R5
00026b 940e 0cc2 	CALL SUBOPT_0x8
00026d 2de7      	MOV  R30,R7
00026e 940e 0cc2 	CALL SUBOPT_0x8
000270 2de9      	MOV  R30,R9
000271 940e 0cc2 	CALL SUBOPT_0x8
000273 e08c      	LDI  R24,12
000274 940e 0969 	CALL _sprintf
000276 9660      	ADIW R28,16
                 ;    lcd_puts(disptime1);
000277 e6e9      	LDI  R30,LOW(_disptime1)
000278 e0f5      	LDI  R31,HIGH(_disptime1)
000279 940e 0cc8 	CALL SUBOPT_0x9
                 ;
                 ;    lcd_gotoxy(6,0);
00027b e0e6      	LDI  R30,LOW(6)
00027c 940e 0ccc 	CALL SUBOPT_0xA
                 ;    sprintf(dispdate1, "%02d/%02d/%4d", dd1, mm1, 2000+yy1);
00027e e7e9      	LDI  R30,LOW(_dispdate1)
00027f e0f5      	LDI  R31,HIGH(_dispdate1)
000280 93fa      	ST   -Y,R31
000281 93ea      	ST   -Y,R30
                +
000282 ece5     +LDI R30 , LOW ( 2 * _0x0 + ( 21 ) )
000283 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW1FN _0x0,21
000284 93fa      	ST   -Y,R31
000285 93ea      	ST   -Y,R30
000286 2deb      	MOV  R30,R11
000287 940e 0cc2 	CALL SUBOPT_0x8
000289 2ded      	MOV  R30,R13
00028a 940e 0cc2 	CALL SUBOPT_0x8
00028c 91e0 0567 	LDS  R30,_yy1
00028e e0f0      	LDI  R31,0
00028f 53e0      	SUBI R30,LOW(-2000)
000290 4ff8      	SBCI R31,HIGH(-2000)
000291 940e 0cd1 	CALL SUBOPT_0xB
000293 e08c      	LDI  R24,12
000294 940e 0969 	CALL _sprintf
000296 9660      	ADIW R28,16
                 ;    lcd_puts(dispdate1);
000297 e7e9      	LDI  R30,LOW(_dispdate1)
000298 e0f5      	LDI  R31,HIGH(_dispdate1)
000299 940e 0cc8 	CALL SUBOPT_0x9
                 ;
                 ;    lcd_gotoxy(15,1);
00029b 940e 0cd6 	CALL SUBOPT_0xC
                 ;    lcd_puts(" ");
                +
00029d e0e0     +LDI R30 , LOW ( _0x1C + ( 0 ) )
00029e e0f5     +LDI R31 , HIGH ( _0x1C + ( 0 ) )
                 	__POINTW1MN _0x1C,0
00029f 940e 0cc8 	CALL SUBOPT_0x9
                 ;    lcd_gotoxy(10,1);
0002a1 940e 0cdc 	CALL SUBOPT_0xD
                 ;    lcd_puts(" ");
                +
0002a3 e0e2     +LDI R30 , LOW ( _0x1C + ( 2 ) )
0002a4 e0f5     +LDI R31 , HIGH ( _0x1C + ( 2 ) )
                 	__POINTW1MN _0x1C,2
0002a5 940e 0cc8 	CALL SUBOPT_0x9
                 ;    lcd_gotoxy(7,1);
0002a7 940e 0ce2 	CALL SUBOPT_0xE
                 ;    lcd_puts(" ");
                +
0002a9 e0e4     +LDI R30 , LOW ( _0x1C + ( 4 ) )
0002aa e0f5     +LDI R31 , HIGH ( _0x1C + ( 4 ) )
                 	__POINTW1MN _0x1C,4
0002ab 940e 0cc8 	CALL SUBOPT_0x9
                 ;    lcd_gotoxy(13,3);
0002ad 940e 0ce8 	CALL SUBOPT_0xF
                 ;    lcd_puts(" ");
                +
0002af e0e6     +LDI R30 , LOW ( _0x1C + ( 6 ) )
0002b0 e0f5     +LDI R31 , HIGH ( _0x1C + ( 6 ) )
                 	__POINTW1MN _0x1C,6
0002b1 940e 0cc8 	CALL SUBOPT_0x9
                 ;    lcd_gotoxy(10,3);
0002b3 940e 0cee 	CALL SUBOPT_0x10
                 ;    lcd_puts(" ");
                +
0002b5 e0e8     +LDI R30 , LOW ( _0x1C + ( 8 ) )
0002b6 e0f5     +LDI R31 , HIGH ( _0x1C + ( 8 ) )
                 	__POINTW1MN _0x1C,8
0002b7 940e 0cc8 	CALL SUBOPT_0x9
                 ;    lcd_gotoxy(7,3);
0002b9 940e 0cf4 	CALL SUBOPT_0x11
                 ;    lcd_puts(" ");
                +
0002bb e0ea     +LDI R30 , LOW ( _0x1C + ( 10 ) )
0002bc e0f5     +LDI R31 , HIGH ( _0x1C + ( 10 ) )
                 	__POINTW1MN _0x1C,10
0002bd 940e 0cc8 	CALL SUBOPT_0x9
                 ;
                 ;    switch(rtc_setter)
0002bf 91e0 05a9 	LDS  R30,_rtc_setter
0002c1 91f0 05aa 	LDS  R31,_rtc_setter+1
                 ;    {
                 ;        case 3:                         //Years
0002c3 30e3      	CPI  R30,LOW(0x3)
0002c4 e0a0      	LDI  R26,HIGH(0x3)
0002c5 07fa      	CPC  R31,R26
0002c6 f429      	BRNE _0x20
                 ;            lcd_gotoxy(15,1);
0002c7 940e 0cd6 	CALL SUBOPT_0xC
                 ;            lcd_puts("^");
                +
0002c9 e0ec     +LDI R30 , LOW ( _0x1C + ( 12 ) )
0002ca e0f5     +LDI R31 , HIGH ( _0x1C + ( 12 ) )
                 	__POINTW1MN _0x1C,12
0002cb c02a      	RJMP _0xDD
                 ;        break;
                 ;        case 4:                         //Months
                 _0x20:
0002cc 30e4      	CPI  R30,LOW(0x4)
0002cd e0a0      	LDI  R26,HIGH(0x4)
0002ce 07fa      	CPC  R31,R26
0002cf f429      	BRNE _0x21
                 ;            lcd_gotoxy(10,1);
0002d0 940e 0cdc 	CALL SUBOPT_0xD
                 ;            lcd_puts("^");
                +
0002d2 e0ee     +LDI R30 , LOW ( _0x1C + ( 14 ) )
0002d3 e0f5     +LDI R31 , HIGH ( _0x1C + ( 14 ) )
                 	__POINTW1MN _0x1C,14
0002d4 c021      	RJMP _0xDD
                 ;        break;
                 ;        case 5:                         //Days
                 _0x21:
0002d5 30e5      	CPI  R30,LOW(0x5)
0002d6 e0a0      	LDI  R26,HIGH(0x5)
0002d7 07fa      	CPC  R31,R26
0002d8 f429      	BRNE _0x22
                 ;            lcd_gotoxy(7,1);
0002d9 940e 0ce2 	CALL SUBOPT_0xE
                 ;            lcd_puts("^");
                +
0002db e1e0     +LDI R30 , LOW ( _0x1C + ( 16 ) )
0002dc e0f5     +LDI R31 , HIGH ( _0x1C + ( 16 ) )
                 	__POINTW1MN _0x1C,16
0002dd c018      	RJMP _0xDD
                 ;        break;
                 ;        case 0:                         //Seconds
                 _0x22:
0002de 9730      	SBIW R30,0
0002df f429      	BRNE _0x23
                 ;            lcd_gotoxy(13,3);
0002e0 940e 0ce8 	CALL SUBOPT_0xF
                 ;            lcd_puts("^");
                +
0002e2 e1e2     +LDI R30 , LOW ( _0x1C + ( 18 ) )
0002e3 e0f5     +LDI R31 , HIGH ( _0x1C + ( 18 ) )
                 	__POINTW1MN _0x1C,18
0002e4 c011      	RJMP _0xDD
                 ;        break;
                 ;        case 1:                         //Minutes
                 _0x23:
0002e5 30e1      	CPI  R30,LOW(0x1)
0002e6 e0a0      	LDI  R26,HIGH(0x1)
0002e7 07fa      	CPC  R31,R26
0002e8 f429      	BRNE _0x24
                 ;            lcd_gotoxy(10,3);
0002e9 940e 0cee 	CALL SUBOPT_0x10
                 ;            lcd_puts("^");
                +
0002eb e1e4     +LDI R30 , LOW ( _0x1C + ( 20 ) )
0002ec e0f5     +LDI R31 , HIGH ( _0x1C + ( 20 ) )
                 	__POINTW1MN _0x1C,20
0002ed c008      	RJMP _0xDD
                 ;        break;
                 ;        case 2:                         //Hours
                 _0x24:
0002ee 30e2      	CPI  R30,LOW(0x2)
0002ef e0a0      	LDI  R26,HIGH(0x2)
0002f0 07fa      	CPC  R31,R26
0002f1 f441      	BRNE _0x1F
                 ;            lcd_gotoxy(7,3);
0002f2 940e 0cf4 	CALL SUBOPT_0x11
                 ;            lcd_puts("^");
                +
0002f4 e1e6     +LDI R30 , LOW ( _0x1C + ( 22 ) )
0002f5 e0f5     +LDI R31 , HIGH ( _0x1C + ( 22 ) )
                 	__POINTW1MN _0x1C,22
                 _0xDD:
0002f6 93fa      	ST   -Y,R31
0002f7 93ea      	ST   -Y,R30
0002f8 940e 0c12 	CALL _lcd_puts
                 ;        break;
                 ;    }
                 _0x1F:
                 ;}
0002fa 9508      	RET
                 
                 	.DSEG
                 _0x1C:
000500           	.BYTE 0x18
                 ;
                 ;void show_pass()
                 ;{
                 
                 	.CSEG
                 ;    sprintf(disp_pass,"%04d",temp_pass);
                 ;    lcd_gotoxy(0,1);
                 ;    lcd_puts(disp_pass);
                 ;}
                 ;
                 ;void show_volt()
                 ;{
                 _show_volt:
                 ;    sprintf(disp_volt,"%03d",voltage);
0002fb eae3      	LDI  R30,LOW(_disp_volt)
0002fc e0f5      	LDI  R31,HIGH(_disp_volt)
0002fd 940e 0cfa 	CALL SUBOPT_0x12
0002ff 940e 0d01 	CALL SUBOPT_0x13
000301 940e 0d0a 	CALL SUBOPT_0x14
                 ;    lcd_gotoxy(0,1);
                 ;    lcd_puts(disp_volt);
000303 eae3      	LDI  R30,LOW(_disp_volt)
000304 e0f5      	LDI  R31,HIGH(_disp_volt)
000305 c00a      	RJMP _0x212000E
                 ;}
                 ;void show_current()
                 ;{
                 _show_current:
                 ;    sprintf(disp_current,"%03d",current);
000306 eae6      	LDI  R30,LOW(_disp_current)
000307 e0f5      	LDI  R31,HIGH(_disp_current)
000308 940e 0cfa 	CALL SUBOPT_0x12
00030a 940e 0d11 	CALL SUBOPT_0x15
00030c 940e 0d0a 	CALL SUBOPT_0x14
                 ;    lcd_gotoxy(0,1);
                 ;    lcd_puts(disp_current);
00030e eae6      	LDI  R30,LOW(_disp_current)
00030f e0f5      	LDI  R31,HIGH(_disp_current)
                 _0x212000E:
000310 93fa      	ST   -Y,R31
000311 93ea      	ST   -Y,R30
000312 940e 0c12 	CALL _lcd_puts
                 ;}
000314 9508      	RET
                 ;//----Input and val change functions-----
                 ;#include "Change.c"
                 ;#include "Inputs.c"
                 ;//#include <variables.h>
                 ;
                 ;void input_RTC()
                 ; 0000 00A1 {
                 _input_RTC:
                 ;    RTC_pointer();
000315 df49      	RCALL _RTC_pointer
                 ;    if (PINE.2 == 0)                                            //UP/increase     1
000316 990a      	SBIC 0x1,2
000317 c003      	RJMP _0x26
                 ;       {
                 ;        while(PINE.2 == 0);
                 _0x27:
000318 9b0a      	SBIS 0x1,2
000319 cffe      	RJMP _0x27
                 ;
                 ;        RTC_pointer();
00031a df44      	RCALL _RTC_pointer
                 ;       }
                 ;
                 ;    if (PINE.3 == 0)                                            //DOWN/decrease   2
                 _0x26:
00031b 990b      	SBIC 0x1,3
00031c c003      	RJMP _0x2A
                 ;       {
                 ;        while(PINE.3 == 0);
                 _0x2B:
00031d 9b0b      	SBIS 0x1,3
00031e cffe      	RJMP _0x2B
                 ;
                 ;        RTC_pointer();
00031f df3f      	RCALL _RTC_pointer
                 ;       }
                 ;
                 ;    if (PINE.0 == 0)                                            //NEXT   3
                 _0x2A:
000320 9908      	SBIC 0x1,0
000321 c013      	RJMP _0x2E
                 ;       {
                 ;        while(PINE.0 == 0);
                 _0x2F:
000322 9b08      	SBIS 0x1,0
000323 cffe      	RJMP _0x2F
                 ;        rtc_setter++;
000324 eaa9      	LDI  R26,LOW(_rtc_setter)
000325 e0b5      	LDI  R27,HIGH(_rtc_setter)
000326 940e 0d1a 	CALL SUBOPT_0x16
                 ;        rtc_setter = rtc_setter % 6;
000328 91a0 05a9 	LDS  R26,_rtc_setter
00032a 91b0 05aa 	LDS  R27,_rtc_setter+1
00032c e0e6      	LDI  R30,LOW(6)
00032d e0f0      	LDI  R31,HIGH(6)
00032e 940e 1179 	CALL __MODW21
000330 93e0 05a9 	STS  _rtc_setter,R30
000332 93f0 05aa 	STS  _rtc_setter+1,R31
                 ;        RTC_pointer();
000334 df2a      	RCALL _RTC_pointer
                 ;       }
                 ;    if (PINE.1 == 0)                                            //SET   4
                 _0x2E:
000335 9909      	SBIC 0x1,1
000336 c01c      	RJMP _0x32
                 ;       {
                 ;        while(PINE.1 == 0);
                 _0x33:
000337 9b09      	SBIS 0x1,1
000338 cffe      	RJMP _0x33
                 ;            if (Screen == 310)
000339 940e 0d20 	CALL SUBOPT_0x17
00033b 33a6      	CPI  R26,LOW(0x136)
00033c e0e1      	LDI  R30,HIGH(0x136)
00033d 07be      	CPC  R27,R30
00033e f031      	BREQ _0xDE
                 ;            {
                 ;                rtc_set_date(dd1,mm1,yy1);
                 ;                rtc_set_time(hr1,min1,sec1);
                 ;                Screen = 31;
                 ;            }
                 ;            else if (Screen == 311)
00033f 940e 0d20 	CALL SUBOPT_0x17
000341 33a7      	CPI  R26,LOW(0x137)
000342 e0e1      	LDI  R30,HIGH(0x137)
000343 07be      	CPC  R27,R30
000344 f471      	BRNE _0x38
                 ;            {
                 ;                rtc_set_date(dd1,mm1,yy1);
                 _0xDE:
000345 92ba      	ST   -Y,R11
000346 92da      	ST   -Y,R13
000347 91e0 0567 	LDS  R30,_yy1
000349 93ea      	ST   -Y,R30
00034a 940e 0b90 	CALL _rtc_set_date
                 ;                rtc_set_time(hr1,min1,sec1);
00034c 925a      	ST   -Y,R5
00034d 927a      	ST   -Y,R7
00034e 929a      	ST   -Y,R9
00034f 940e 0b71 	CALL _rtc_set_time
                 ;                Screen = 31;
000351 940e 0d25 	CALL SUBOPT_0x18
                 ;            }
                 ;
                 ;       }
                 _0x38:
                 ;}
                 _0x32:
000353 9508      	RET
                 ;
                 ;
                 ;void input_pass(int next)
                 ;{
                 ;    int change = pow(10,(next-Pointer_horiz-1));
                 ;    pointer_display_horiz();
                 ;	next -> Y+2
                 ;	change -> R16,R17
                 ;    if (PINE.2 == 0)                                            //UP     1
                 ;       {
                 ;        while(PINE.2 == 0);
                 ;        if(change == 1)
                 ;        {temp_pass = temp_pass + (change);}
                 ;        else
                 ;        {temp_pass = temp_pass + 1 + (change);}
                 ;        temp_pass = temp_pass % 10000;
                 ;        show_pass();
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINE.3 == 0)                                            //DOWN   2
                 ;       {
                 ;        while(PINE.3 == 0);
                 ;        temp_pass = temp_pass - (change);
                 ;        temp_pass = temp_pass % 10000;
                 ;        temp_pass = ((temp_pass < 0) ? (9999 + temp_pass): temp_pass);
                 ;        show_pass();
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINE.0 == 0)                                            //NEXT  3
                 ;       {
                 ;        while(PINE.0 == 0);
                 ;
                 ;        Pointer_horiz++;
                 ;
                 ;        if((Pointer_horiz ==0) && (temp_pass == password))
                 ;        {flag = 1;}
                 ;
                 ;        Pointer_horiz = Pointer_horiz % next;
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    /*
                 ;    if (PINE.1 == 0)                                            //ESCAPE 4
                 ;       {
                 ;        while(PINE.1 == 0);
                 ;        if(Screen > 100)
                 ;        {Screen = Screen/10;}
                 ;        else
                 ;        Screen = (Screen/10)-1;
                 ;        //flag = 1;
                 ;       }
                 ;    */
                 ;}
                 ;
                 ;
                 ;void input(int next)                         //next recieves value no of options we will have in the next menu
                 ;{   //int next = 4;
                 _input:
                 ;    //int flag = 0;
                 ;    Pt = Pointer_vert;
                 ;	next -> Y+0
000354 91e0 058d 	LDS  R30,_Pointer_vert
000356 91f0 058e 	LDS  R31,_Pointer_vert+1
000358 93e0 058f 	STS  _Pt,R30
00035a 93f0 0590 	STS  _Pt+1,R31
                 ;    pointer_display_vert();
00035c dee6      	RCALL _pointer_display_vert
                 ;    delay_ms(100);
00035d 940e 0d2c 	CALL SUBOPT_0x19
                 ;    if (PINE.2 == 0)                                            //UP
00035f 990a      	SBIC 0x1,2
000360 c01f      	RJMP _0x4D
                 ;       {
                 ;        while(PINE.2 == 0);
                 _0x4E:
000361 9b0a      	SBIS 0x1,2
000362 cffe      	RJMP _0x4E
                 ;        Pt--;
000363 e8af      	LDI  R26,LOW(_Pt)
000364 e0b5      	LDI  R27,HIGH(_Pt)
000365 91ed      	LD   R30,X+
000366 91fd      	LD   R31,X+
000367 9731      	SBIW R30,1
000368 93fe      	ST   -X,R31
000369 93ee      	ST   -X,R30
                 ;        Pointer_vert = ((Pt < 0) ? (next+Pt): Pt) % next;
00036a 91a0 0590 	LDS  R26,_Pt+1
00036c 23aa      	TST  R26
00036d f44a      	BRPL _0x51
00036e 91e0 058f 	LDS  R30,_Pt
000370 91f0 0590 	LDS  R31,_Pt+1
000372 81a8      	LD   R26,Y
000373 81b9      	LDD  R27,Y+1
000374 0fea      	ADD  R30,R26
000375 1ffb      	ADC  R31,R27
000376 c004      	RJMP _0x52
                 _0x51:
000377 91e0 058f 	LDS  R30,_Pt
000379 91f0 0590 	LDS  R31,_Pt+1
                 _0x52:
00037b 01df      	MOVW R26,R30
00037c 81e8      	LD   R30,Y
00037d 81f9      	LDD  R31,Y+1
00037e 940e 0d32 	CALL SUBOPT_0x1A
                 ;        pointer_display_vert();
                 ;       }
                 ;
                 ;    if (PINE.3 == 0)                                            //DOWN
                 _0x4D:
000380 990b      	SBIC 0x1,3
000381 c00e      	RJMP _0x54
                 ;       {
                 ;        while(PINE.3 == 0);
                 _0x55:
000382 9b0b      	SBIS 0x1,3
000383 cffe      	RJMP _0x55
                 ;        Pointer_vert++;
000384 e8ad      	LDI  R26,LOW(_Pointer_vert)
000385 e0b5      	LDI  R27,HIGH(_Pointer_vert)
000386 940e 0d1a 	CALL SUBOPT_0x16
                 ;        Pointer_vert = Pointer_vert % next;
000388 81e8      	LD   R30,Y
000389 81f9      	LDD  R31,Y+1
00038a 91a0 058d 	LDS  R26,_Pointer_vert
00038c 91b0 058e 	LDS  R27,_Pointer_vert+1
00038e 940e 0d32 	CALL SUBOPT_0x1A
                 ;        pointer_display_vert();
                 ;       }
                 ;
                 ;    if (PINE.0 == 0)                                            //ENTER
                 _0x54:
000390 9908      	SBIC 0x1,0
000391 c018      	RJMP _0x58
                 ;       {
                 ;        while(PINE.0 == 0);
                 _0x59:
000392 9b08      	SBIS 0x1,0
000393 cffe      	RJMP _0x59
                 ;        if(Screen < 10)
000394 940e 0d20 	CALL SUBOPT_0x17
000396 971a      	SBIW R26,10
000397 f424      	BRGE _0x5C
                 ;        {
                 ;            Screen = ((Screen+1)*10) + Pointer_vert;
000398 940e 0d3a 	CALL SUBOPT_0x1B
00039a 9631      	ADIW R30,1
00039b c002      	RJMP _0xE0
                 ;        }
                 ;        else
                 _0x5C:
                 ;        {
                 ;            Screen = ((Screen)*10) + Pointer_vert;
00039c 940e 0d3a 	CALL SUBOPT_0x1B
                 _0xE0:
00039e e0aa      	LDI  R26,LOW(10)
00039f e0b0      	LDI  R27,HIGH(10)
0003a0 940e 1137 	CALL __MULW12
0003a2 91a0 058d 	LDS  R26,_Pointer_vert
0003a4 91b0 058e 	LDS  R27,_Pointer_vert+1
0003a6 0fea      	ADD  R30,R26
0003a7 1ffb      	ADC  R31,R27
0003a8 940e 0d3f 	CALL SUBOPT_0x1C
                 ;        }
                 ;
                 ;        //flag = 1;
                 ;       }
                 ;
                 ;    if (PINE.1 == 0)                                            //ESCAPE
                 _0x58:
0003aa 9909      	SBIC 0x1,1
0003ab c00f      	RJMP _0x5E
                 ;       {
                 ;        while(PINE.1 == 0);
                 _0x5F:
0003ac 9b09      	SBIS 0x1,1
0003ad cffe      	RJMP _0x5F
                 ;        if(Screen > 100)
0003ae 940e 0d44 	CALL SUBOPT_0x1D
0003b0 f01c      	BRLT _0x62
                 ;        {Screen = Screen/10;}
0003b1 940e 0d49 	CALL SUBOPT_0x1E
0003b3 c003      	RJMP _0xE1
                 ;        else
                 _0x62:
                 ;        Screen = (Screen/10)-1;
0003b4 940e 0d49 	CALL SUBOPT_0x1E
0003b6 9731      	SBIW R30,1
                 _0xE1:
0003b7 93e0 0589 	STS  _Screen,R30
0003b9 93f0 058a 	STS  _Screen+1,R31
                 ;        //flag = 1;
                 ;       }
                 ;
                 ;    //return (flag);
                 ;}
                 _0x5E:
0003bb 9622      	ADIW R28,2
0003bc 9508      	RET
                 ;
                 ;
                 ;void input_volt(int next)
                 ;{
                 _input_volt:
                 ;    int change = pow(10,(next-Pointer_horiz-1));
                 ;    pointer_display_horiz();
0003bd 940e 0d4f 	CALL SUBOPT_0x1F
                 ;	next -> Y+2
                 ;	change -> R16,R17
                 ;    delay_ms(100);
                 ;    if (PINE.2 == 0)                                            //UP     1
0003bf 990a      	SBIC 0x1,2
0003c0 c01d      	RJMP _0x64
                 ;       {
                 ;        while(PINE.2 == 0);
                 _0x65:
0003c1 9b0a      	SBIS 0x1,2
0003c2 cffe      	RJMP _0x65
                 ;        if(change == 1)
0003c3 e0e1      	LDI  R30,LOW(1)
0003c4 e0f0      	LDI  R31,HIGH(1)
0003c5 17e0      	CP   R30,R16
0003c6 07f1      	CPC  R31,R17
0003c7 f421      	BRNE _0x68
                 ;        {voltage = voltage + (change);}
0003c8 01f8      	MOVW R30,R16
0003c9 940e 0d6e 	CALL SUBOPT_0x20
0003cb c004      	RJMP _0xE2
                 ;        else
                 _0x68:
                 ;        {voltage = voltage + 1 + (change);}
0003cc 940e 0d01 	CALL SUBOPT_0x13
0003ce 940e 0d77 	CALL SUBOPT_0x21
                 _0xE2:
0003d0 940e 112a 	CALL __CWD1
0003d2 940e 110b 	CALL __ADDD12
0003d4 940e 0d7f 	CALL SUBOPT_0x22
                 ;        voltage = voltage % 1000;
0003d6 940e 0d6e 	CALL SUBOPT_0x20
0003d8 940e 0d88 	CALL SUBOPT_0x23
0003da 940e 0d7f 	CALL SUBOPT_0x22
                 ;        show_volt();
0003dc df1e      	RCALL _show_volt
                 ;        pointer_display_horiz();
0003dd de52      	RCALL _pointer_display_horiz
                 ;       }
                 ;
                 ;    if (PINE.3 == 0)                                            //Next   2
                 _0x64:
0003de 990b      	SBIC 0x1,3
0003df c008      	RJMP _0x6A
                 ;       {
                 ;        while(PINE.3 == 0);
                 _0x6B:
0003e0 9b0b      	SBIS 0x1,3
0003e1 cffe      	RJMP _0x6B
                 ;        Pointer_horiz++;
0003e2 e8ab      	LDI  R26,LOW(_Pointer_horiz)
0003e3 e0b5      	LDI  R27,HIGH(_Pointer_horiz)
0003e4 940e 0d1a 	CALL SUBOPT_0x16
                 ;
                 ;        Pointer_horiz = Pointer_horiz % next;
0003e6 940e 0d8f 	CALL SUBOPT_0x24
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINE.0 == 0)                                             //ENTER 3
                 _0x6A:
0003e8 9908      	SBIC 0x1,0
0003e9 c03f      	RJMP _0x6E
                 ;        {
                 ;         while(PINE.0 == 0);
                 _0x6F:
0003ea 9b08      	SBIS 0x1,0
0003eb cffe      	RJMP _0x6F
                 ;         if(110 <= voltage && voltage <= 135)
0003ec 940e 0d01 	CALL SUBOPT_0x13
                +
0003ee 36ee     +CPI R30 , LOW ( 0x6E )
0003ef e0a0     +LDI R26 , HIGH ( 0x6E )
0003f0 07fa     +CPC R31 , R26
0003f1 e0a0     +LDI R26 , BYTE3 ( 0x6E )
0003f2 076a     +CPC R22 , R26
0003f3 e0a0     +LDI R26 , BYTE4 ( 0x6E )
0003f4 077a     +CPC R23 , R26
                 	__CPD1N 0x6E
0003f5 f054      	BRLT _0x73
0003f6 940e 0d6e 	CALL SUBOPT_0x20
                +
0003f8 38a8     +CPI R26 , LOW ( 0x88 )
0003f9 e0e0     +LDI R30 , HIGH ( 0x88 )
0003fa 07be     +CPC R27 , R30
0003fb e0e0     +LDI R30 , BYTE3 ( 0x88 )
0003fc 078e     +CPC R24 , R30
0003fd e0e0     +LDI R30 , BYTE4 ( 0x88 )
0003fe 079e     +CPC R25 , R30
                 	__CPD2N 0x88
0003ff f00c      	BRLT _0x74
                 _0x73:
000400 c00e      	RJMP _0x72
                 _0x74:
                 ;         {
                 ;            lcd_clear();
000401 940e 0d9d 	CALL SUBOPT_0x25
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_puts("Voltage set to:");
                +
000403 e1e8     +LDI R30 , LOW ( _0x75 + ( 0 ) )
000404 e0f5     +LDI R31 , HIGH ( _0x75 + ( 0 ) )
                 	__POINTW1MN _0x75,0
000405 940e 0cc8 	CALL SUBOPT_0x9
                 ;            show_volt();
000407 def3      	RCALL _show_volt
                 ;            //Voltage = temp_volt;
                 ;            flag = 11;
000408 940e 0da0 	CALL SUBOPT_0x26
                 ;            Screen = 33;
00040a e2e1      	LDI  R30,LOW(33)
00040b e0f0      	LDI  R31,HIGH(33)
00040c 940e 0d3f 	CALL SUBOPT_0x1C
                 ;            delay_ms(2000);
00040e c016      	RJMP _0xE3
                 ;         }
                 ;         else
                 _0x72:
                 ;         {
                 ;            lcd_clear();
00040f 940e 0d9d 	CALL SUBOPT_0x25
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_putsf("Set value should");
000411 940e 0da7 	CALL SUBOPT_0x27
                 ;            lcd_gotoxy(0,1);
                 ;            lcd_putsf("be between 110-");
                +
000413 efee     +LDI R30 , LOW ( 2 * _0x0 + ( 78 ) )
000414 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 78 ) )
                 	__POINTW1FN _0x0,78
000415 940e 0dae 	CALL SUBOPT_0x28
                 ;            lcd_gotoxy(0,2);
000417 940e 0cac 	CALL SUBOPT_0x4
                 ;            lcd_putsf("135 volts");
                +
000419 e0ee     +LDI R30 , LOW ( 2 * _0x0 + ( 94 ) )
00041a e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW1FN _0x0,94
00041b 940e 0dae 	CALL SUBOPT_0x28
                 ;            voltage = 000;
00041d 940e 0db4 	CALL SUBOPT_0x29
                 ;            Screen = 330;
00041f e4ea      	LDI  R30,LOW(330)
000420 e0f1      	LDI  R31,HIGH(330)
000421 940e 0d3f 	CALL SUBOPT_0x1C
                 ;            flag = 11;
000423 940e 0da0 	CALL SUBOPT_0x26
                 ;            delay_ms(2000);
                 _0xE3:
000425 ede0      	LDI  R30,LOW(2000)
000426 e0f7      	LDI  R31,HIGH(2000)
000427 940e 0dbd 	CALL SUBOPT_0x2A
                 ;         }
                 ;        }
                 ;
                 ;    if (PINE.1 == 0)                                            //ESCAPE 4
                 _0x6E:
000429 9909      	SBIC 0x1,1
00042a c011      	RJMP _0x77
                 ;       {
                 ;        while(PINE.1 == 0);
                 _0x78:
00042b 9b09      	SBIS 0x1,1
00042c cffe      	RJMP _0x78
                 ;        flag = 11;
00042d 940e 0da0 	CALL SUBOPT_0x26
                 ;        if(Screen > 100)
00042f 940e 0d44 	CALL SUBOPT_0x1D
000431 f01c      	BRLT _0x7B
                 ;        {Screen = Screen/10;}
000432 940e 0d49 	CALL SUBOPT_0x1E
000434 c003      	RJMP _0xE4
                 ;        else
                 _0x7B:
                 ;        {Screen = (Screen/10)-1;}
000435 940e 0d49 	CALL SUBOPT_0x1E
000437 9731      	SBIW R30,1
                 _0xE4:
000438 93e0 0589 	STS  _Screen,R30
00043a 93f0 058a 	STS  _Screen+1,R31
                 ;        //flag = 1;
                 ;       }
                 ;}
                 _0x77:
00043c c07f      	RJMP _0x212000C
                 
                 	.DSEG
                 _0x75:
000518           	.BYTE 0x10
                 ;
                 ;void input_current(int next)
                 ;{
                 
                 	.CSEG
                 _input_current:
                 ;    int change = pow(10,(next-Pointer_horiz-1));
                 ;    pointer_display_horiz();
00043d 940e 0d4f 	CALL SUBOPT_0x1F
                 ;	next -> Y+2
                 ;	change -> R16,R17
                 ;    delay_ms(100);
                 ;    if (PINE.2 == 0)                                            //UP     1
00043f 990a      	SBIC 0x1,2
000440 c01d      	RJMP _0x7D
                 ;       {
                 ;        while(PINE.2 == 0);
                 _0x7E:
000441 9b0a      	SBIS 0x1,2
000442 cffe      	RJMP _0x7E
                 ;        if(change == 1)
000443 e0e1      	LDI  R30,LOW(1)
000444 e0f0      	LDI  R31,HIGH(1)
000445 17e0      	CP   R30,R16
000446 07f1      	CPC  R31,R17
000447 f421      	BRNE _0x81
                 ;        {current = current + (change);}
000448 01f8      	MOVW R30,R16
000449 940e 0dc1 	CALL SUBOPT_0x2B
00044b c004      	RJMP _0xE5
                 ;        else
                 _0x81:
                 ;        {current = current + 1 + (change);}
00044c 940e 0d11 	CALL SUBOPT_0x15
00044e 940e 0d77 	CALL SUBOPT_0x21
                 _0xE5:
000450 940e 112a 	CALL __CWD1
000452 940e 110b 	CALL __ADDD12
000454 940e 0dca 	CALL SUBOPT_0x2C
                 ;        current = current % 1000;
000456 940e 0dc1 	CALL SUBOPT_0x2B
000458 940e 0d88 	CALL SUBOPT_0x23
00045a 940e 0dca 	CALL SUBOPT_0x2C
                 ;        show_current();
00045c dea9      	RCALL _show_current
                 ;        pointer_display_horiz();
00045d ddd2      	RCALL _pointer_display_horiz
                 ;       }
                 ;
                 ;    if (PINE.3 == 0)                                            //Next   2
                 _0x7D:
00045e 990b      	SBIC 0x1,3
00045f c008      	RJMP _0x83
                 ;       {
                 ;        while(PINE.3 == 0);
                 _0x84:
000460 9b0b      	SBIS 0x1,3
000461 cffe      	RJMP _0x84
                 ;        Pointer_horiz++;
000462 e8ab      	LDI  R26,LOW(_Pointer_horiz)
000463 e0b5      	LDI  R27,HIGH(_Pointer_horiz)
000464 940e 0d1a 	CALL SUBOPT_0x16
                 ;
                 ;        Pointer_horiz = Pointer_horiz % next;
000466 940e 0d8f 	CALL SUBOPT_0x24
                 ;        pointer_display_horiz();
                 ;       }
                 ;
                 ;    if (PINE.0 == 0)                                             //ENTER 3
                 _0x83:
000468 9908      	SBIC 0x1,0
000469 c03f      	RJMP _0x87
                 ;        {
                 ;         while(PINE.0 == 0);
                 _0x88:
00046a 9b08      	SBIS 0x1,0
00046b cffe      	RJMP _0x88
                 ;         if(10 <= current && current <= 20)
00046c 940e 0d11 	CALL SUBOPT_0x15
                +
00046e 30ea     +CPI R30 , LOW ( 0xA )
00046f e0a0     +LDI R26 , HIGH ( 0xA )
000470 07fa     +CPC R31 , R26
000471 e0a0     +LDI R26 , BYTE3 ( 0xA )
000472 076a     +CPC R22 , R26
000473 e0a0     +LDI R26 , BYTE4 ( 0xA )
000474 077a     +CPC R23 , R26
                 	__CPD1N 0xA
000475 f054      	BRLT _0x8C
000476 940e 0dc1 	CALL SUBOPT_0x2B
                +
000478 31a5     +CPI R26 , LOW ( 0x15 )
000479 e0e0     +LDI R30 , HIGH ( 0x15 )
00047a 07be     +CPC R27 , R30
00047b e0e0     +LDI R30 , BYTE3 ( 0x15 )
00047c 078e     +CPC R24 , R30
00047d e0e0     +LDI R30 , BYTE4 ( 0x15 )
00047e 079e     +CPC R25 , R30
                 	__CPD2N 0x15
00047f f00c      	BRLT _0x8D
                 _0x8C:
000480 c00e      	RJMP _0x8B
                 _0x8D:
                 ;         {
                 ;            lcd_clear();
000481 940e 0d9d 	CALL SUBOPT_0x25
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_puts("Current set to:");
                +
000483 e2e8     +LDI R30 , LOW ( _0x8E + ( 0 ) )
000484 e0f5     +LDI R31 , HIGH ( _0x8E + ( 0 ) )
                 	__POINTW1MN _0x8E,0
000485 940e 0cc8 	CALL SUBOPT_0x9
                 ;            show_current();
000487 de7e      	RCALL _show_current
                 ;            flag = 11;
000488 940e 0da0 	CALL SUBOPT_0x26
                 ;            Screen = 33;
00048a e2e1      	LDI  R30,LOW(33)
00048b e0f0      	LDI  R31,HIGH(33)
00048c 940e 0d3f 	CALL SUBOPT_0x1C
                 ;            delay_ms(2000);
00048e c016      	RJMP _0xE6
                 ;         }
                 ;         else
                 _0x8B:
                 ;         {
                 ;            lcd_clear();
00048f 940e 0d9d 	CALL SUBOPT_0x25
                 ;            lcd_gotoxy(0,0);
                 ;            lcd_putsf("Set value should");
000491 940e 0da7 	CALL SUBOPT_0x27
                 ;            lcd_gotoxy(0,1);
                 ;            lcd_putsf("be between 10-");
                +
000493 e2e8     +LDI R30 , LOW ( 2 * _0x0 + ( 120 ) )
000494 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 120 ) )
                 	__POINTW1FN _0x0,120
000495 940e 0dae 	CALL SUBOPT_0x28
                 ;            lcd_gotoxy(0,2);
000497 940e 0cac 	CALL SUBOPT_0x4
                 ;            lcd_putsf("20 amps");
                +
000499 e3e7     +LDI R30 , LOW ( 2 * _0x0 + ( 135 ) )
00049a e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 135 ) )
                 	__POINTW1FN _0x0,135
00049b 940e 0dae 	CALL SUBOPT_0x28
                 ;            voltage = 000;
00049d 940e 0db4 	CALL SUBOPT_0x29
                 ;            Screen = 331;
00049f e4eb      	LDI  R30,LOW(331)
0004a0 e0f1      	LDI  R31,HIGH(331)
0004a1 940e 0d3f 	CALL SUBOPT_0x1C
                 ;            flag = 11;
0004a3 940e 0da0 	CALL SUBOPT_0x26
                 ;            delay_ms(2000);
                 _0xE6:
0004a5 ede0      	LDI  R30,LOW(2000)
0004a6 e0f7      	LDI  R31,HIGH(2000)
0004a7 940e 0dbd 	CALL SUBOPT_0x2A
                 ;         }
                 ;        }
                 ;
                 ;    if (PINE.1 == 0)                                            //ESCAPE 4
                 _0x87:
0004a9 9909      	SBIC 0x1,1
0004aa c011      	RJMP _0x90
                 ;       {
                 ;        while(PINE.1 == 0);
                 _0x91:
0004ab 9b09      	SBIS 0x1,1
0004ac cffe      	RJMP _0x91
                 ;        flag = 11;
0004ad 940e 0da0 	CALL SUBOPT_0x26
                 ;        if(Screen > 100)
0004af 940e 0d44 	CALL SUBOPT_0x1D
0004b1 f01c      	BRLT _0x94
                 ;        {Screen = Screen/10;}
0004b2 940e 0d49 	CALL SUBOPT_0x1E
0004b4 c003      	RJMP _0xE7
                 ;        else
                 _0x94:
                 ;        {Screen = (Screen/10)-1;}
0004b5 940e 0d49 	CALL SUBOPT_0x1E
0004b7 9731      	SBIW R30,1
                 _0xE7:
0004b8 93e0 0589 	STS  _Screen,R30
0004ba 93f0 058a 	STS  _Screen+1,R31
                 ;        //flag = 1;
                 ;       }
                 ;
                 ;
                 ;}
                 _0x90:
                 _0x212000C:
0004bc 8119      	LDD  R17,Y+1
0004bd 8108      	LDD  R16,Y+0
                 _0x212000D:
0004be 9624      	ADIW R28,4
0004bf 9508      	RET
                 
                 	.DSEG
                 _0x8E:
000528           	.BYTE 0x10
                 ;
                 ;
                 ;
                 ;/*
                 ;void PASSWORD_CHK()
                 ;{
                 ;    lcd_gotoxy(0,0);
                 ;    lcd_puts("ENTER PASSWORD:");
                 ;    lcd_gotoxy(0,1);
                 ;    lcd_puts("0000");
                 ;    while ((temp_pass != password) && (flag == 0))
                 ;    {
                 ;        input_pass(4);
                 ;    }
                 ;}
                 ; */
                 ;
                 ;
                 ;void Screen1()
                 ; 0000 00B5 {
                 
                 	.CSEG
                 _Screen1:
                 ; 0000 00B6     Screen = 1;
0004c0 e0e1      	LDI  R30,LOW(1)
0004c1 e0f0      	LDI  R31,HIGH(1)
0004c2 940e 0d3f 	CALL SUBOPT_0x1C
                 ; 0000 00B7     Pointer_horiz = 0;
0004c4 e0e0      	LDI  R30,LOW(0)
0004c5 93e0 058b 	STS  _Pointer_horiz,R30
0004c7 93e0 058c 	STS  _Pointer_horiz+1,R30
                 ; 0000 00B8     Pointer_vert = 0;
0004c9 940e 0dd3 	CALL SUBOPT_0x2D
                 ; 0000 00B9     lcd_clear();
0004cb 940e 0d9d 	CALL SUBOPT_0x25
                 ; 0000 00BA     lcd_gotoxy(0,0);
                 ; 0000 00BB     lcd_puts("Welcome to HMI");
                +
0004cd e3e8     +LDI R30 , LOW ( _0x96 + ( 0 ) )
0004ce e0f5     +LDI R31 , HIGH ( _0x96 + ( 0 ) )
                 	__POINTW1MN _0x96,0
0004cf 940e 0cc8 	CALL SUBOPT_0x9
                 ; 0000 00BC     /*lcd_gotoxy(0,1);
                 ; 0000 00BD     lcd_puts("Welcome to HMI");
                 ; 0000 00BE     lcd_gotoxy(0,2);
                 ; 0000 00BF     lcd_puts("Welcome to HMI");
                 ; 0000 00C0     lcd_gotoxy(0,3);
                 ; 0000 00C1     lcd_puts("Welcome to HMI");  */
                 ; 0000 00C2     delay_ms(1000);
0004d1 940e 0dd9 	CALL SUBOPT_0x2E
                 ; 0000 00C3 
                 ; 0000 00C4  /*  lcd_clear();
                 ; 0000 00C5    PASSWORD_CHK();
                 ; 0000 00C6 
                 ; 0000 00C7     lcd_clear();
                 ; 0000 00C8     lcd_gotoxy(0,0);
                 ; 0000 00C9     lcd_puts("PASSWORD CORRECT");
                 ; 0000 00CA     delay_ms(3000);
                 ; 0000 00CB  */
                 ; 0000 00CC     Screen = 2;
0004d3 e0e2      	LDI  R30,LOW(2)
0004d4 e0f0      	LDI  R31,HIGH(2)
0004d5 c0f5      	RJMP _0x212000B
                 ; 0000 00CD }
                 
                 	.DSEG
                 _0x96:
000538           	.BYTE 0xF
                 ;
                 ;void Screen2()
                 ; 0000 00D0 {
                 
                 	.CSEG
                 _Screen2:
                 ; 0000 00D1     //int flag1 = 0;
                 ; 0000 00D2     lcd_clear();
0004d6 940e 0be2 	CALL _lcd_clear
                 ; 0000 00D3     Screen = 2;
0004d8 e0e2      	LDI  R30,LOW(2)
0004d9 e0f0      	LDI  R31,HIGH(2)
0004da 940e 0d3f 	CALL SUBOPT_0x1C
                 ; 0000 00D4     Pointer_vert = 0;
0004dc 940e 0dd3 	CALL SUBOPT_0x2D
                 ; 0000 00D5     Pointer_horiz= 0;
0004de e0e0      	LDI  R30,LOW(0)
0004df 93e0 058b 	STS  _Pointer_horiz,R30
0004e1 93e0 058c 	STS  _Pointer_horiz+1,R30
                 ; 0000 00D6     lcd_gotoxy(1,0);
0004e3 e0e1      	LDI  R30,LOW(1)
0004e4 940e 0ccc 	CALL SUBOPT_0xA
                 ; 0000 00D7     lcd_putsf("Password Rst");
                +
0004e6 e4ee     +LDI R30 , LOW ( 2 * _0x0 + ( 158 ) )
0004e7 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 158 ) )
                 	__POINTW1FN _0x0,158
0004e8 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 00D8     lcd_gotoxy(1,1);
0004ea 940e 0de0 	CALL SUBOPT_0x30
                 ; 0000 00D9     lcd_putsf("Timer");
                +
0004ec e5eb     +LDI R30 , LOW ( 2 * _0x0 + ( 171 ) )
0004ed e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 171 ) )
                 	__POINTW1FN _0x0,171
0004ee 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 00DA     lcd_gotoxy(1,2);
0004f0 940e 0c9a 	CALL SUBOPT_0x1
                 ; 0000 00DB     lcd_putsf("Sensor Values");
                +
0004f2 e6e1     +LDI R30 , LOW ( 2 * _0x0 + ( 177 ) )
0004f3 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 177 ) )
                 	__POINTW1FN _0x0,177
0004f4 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 00DC     lcd_gotoxy(1,3);
0004f6 e0e1      	LDI  R30,LOW(1)
0004f7 940e 0de5 	CALL SUBOPT_0x31
                 ; 0000 00DD     lcd_putsf("Set Parameters");
                +
0004f9 e6ef     +LDI R30 , LOW ( 2 * _0x0 + ( 191 ) )
0004fa e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 191 ) )
                 	__POINTW1FN _0x0,191
0004fb 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 00DE     while(Screen == 2)
                 _0x97:
0004fd 940e 0d20 	CALL SUBOPT_0x17
0004ff 9712      	SBIW R26,2
000500 f429      	BRNE _0x99
                 ; 0000 00DF     {
                 ; 0000 00E0         input(4);
000501 e0e4      	LDI  R30,LOW(4)
000502 e0f0      	LDI  R31,HIGH(4)
000503 940e 0dea 	CALL SUBOPT_0x32
                 ; 0000 00E1     }
000505 cff7      	RJMP _0x97
                 _0x99:
                 ; 0000 00E2     //return(Screen);
                 ; 0000 00E3     //delay_ms(3000);
                 ; 0000 00E4 }
000506 9508      	RET
                 ;
                 ;/*
                 ;void Screen30()
                 ;{
                 ;    lcd_clear();
                 ;    Pointer_vert = 0;
                 ;    lcd_gotoxy(3,3);
                 ;    lcd_putsf("MOTOR MODE");
                 ;    lcd_gotoxy(1,0);
                 ;    lcd_putsf("BLDC");
                 ;    lcd_gotoxy(1,1);
                 ;    lcd_putsf("PMSM");
                 ;    lcd_gotoxy(1,2);
                 ;    lcd_putsf("IM");
                 ;    while(Screen == 30)
                 ;    {
                 ;        input(3);
                 ;    }
                 ;}
                 ;*/
                 ;
                 ;void Screen31()
                 ; 0000 00FB {
                 _Screen31:
                 ; 0000 00FC     //TIMER
                 ; 0000 00FD     lcd_clear();
000507 940e 0dee 	CALL SUBOPT_0x33
                 ; 0000 00FE     Pointer_vert = 0;
                 ; 0000 00FF     lcd_gotoxy(6,3);
000509 e0e6      	LDI  R30,LOW(6)
00050a 940e 0de5 	CALL SUBOPT_0x31
                 ; 0000 0100     lcd_putsf("TIME");
                +
00050c e7ee     +LDI R30 , LOW ( 2 * _0x0 + ( 206 ) )
00050d e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 206 ) )
                 	__POINTW1FN _0x0,206
00050e 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0101     /*
                 ; 0000 0102        rtc_get_time(&hr1,&min1,&sec1);
                 ; 0000 0103        rtc_get_date(&dd1,&mm1,&yy1);
                 ; 0000 0104 
                 ; 0000 0105        lcd_gotoxy(0,0);
                 ; 0000 0106 
                 ; 0000 0107        sprintf(disptime1,"TIME:%02d:%02d:%02d",hr1,min1,sec1);
                 ; 0000 0108        lcd_puts(disptime1);
                 ; 0000 0109 
                 ; 0000 010A        lcd_gotoxy(0,1);
                 ; 0000 010B        sprintf(dispdate1,"DATE:%02d/%02d/%04d",dd1,mm1,2000+yy1);
                 ; 0000 010C        lcd_puts(dispdate1);
                 ; 0000 010D     */
                 ; 0000 010E     lcd_gotoxy(1,0);
000510 e0e1      	LDI  R30,LOW(1)
000511 940e 0ccc 	CALL SUBOPT_0xA
                 ; 0000 010F     lcd_putsf("Set Date / Time");
                +
000513 e8e3     +LDI R30 , LOW ( 2 * _0x0 + ( 211 ) )
000514 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 211 ) )
                 	__POINTW1FN _0x0,211
000515 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0110     lcd_gotoxy(1,1);
000517 940e 0de0 	CALL SUBOPT_0x30
                 ; 0000 0111     lcd_putsf("Alarm Mode");
                +
000519 e9e3     +LDI R30 , LOW ( 2 * _0x0 + ( 227 ) )
00051a e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 227 ) )
                 	__POINTW1FN _0x0,227
00051b 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0112     lcd_gotoxy(1,2);
00051d 940e 0c9a 	CALL SUBOPT_0x1
                 ; 0000 0113     lcd_putsf("Countdown Timer");
                +
00051f e9ee     +LDI R30 , LOW ( 2 * _0x0 + ( 238 ) )
000520 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 238 ) )
                 	__POINTW1FN _0x0,238
000521 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0114     while(Screen == 31)
                 _0x9A:
000523 940e 0d20 	CALL SUBOPT_0x17
000525 975f      	SBIW R26,31
000526 f429      	BRNE _0x9C
                 ; 0000 0115     {
                 ; 0000 0116         input(3);
000527 e0e3      	LDI  R30,LOW(3)
000528 e0f0      	LDI  R31,HIGH(3)
000529 940e 0dea 	CALL SUBOPT_0x32
                 ; 0000 0117     }
00052b cff7      	RJMP _0x9A
                 _0x9C:
                 ; 0000 0118 }
00052c 9508      	RET
                 ;
                 ;void Screen310()
                 ; 0000 011B {
                 _Screen310:
                 ; 0000 011C     //Set Date and time.
                 ; 0000 011D     lcd_clear();
00052d 940e 0be2 	CALL _lcd_clear
                 ; 0000 011E     rtc_get_time(&hr1,&min1,&sec1);
00052f e0e5      	LDI  R30,LOW(5)
000530 e0f0      	LDI  R31,HIGH(5)
000531 93fa      	ST   -Y,R31
000532 93ea      	ST   -Y,R30
000533 e0e7      	LDI  R30,LOW(7)
000534 e0f0      	LDI  R31,HIGH(7)
000535 93fa      	ST   -Y,R31
000536 93ea      	ST   -Y,R30
000537 e0e9      	LDI  R30,LOW(9)
000538 e0f0      	LDI  R31,HIGH(9)
000539 93fa      	ST   -Y,R31
00053a 93ea      	ST   -Y,R30
00053b 940e 0b65 	CALL _rtc_get_time
                 ; 0000 011F     rtc_get_date(&dd1,&mm1,&yy1);
00053d e0eb      	LDI  R30,LOW(11)
00053e e0f0      	LDI  R31,HIGH(11)
00053f 93fa      	ST   -Y,R31
000540 93ea      	ST   -Y,R30
000541 e0ed      	LDI  R30,LOW(13)
000542 e0f0      	LDI  R31,HIGH(13)
000543 93fa      	ST   -Y,R31
000544 93ea      	ST   -Y,R30
000545 e6e7      	LDI  R30,LOW(_yy1)
000546 e0f5      	LDI  R31,HIGH(_yy1)
000547 940e 0df1 	CALL SUBOPT_0x34
                 ; 0000 0120 
                 ; 0000 0121     lcd_gotoxy(0,0);
                 ; 0000 0122     lcd_putsf("Date: ");
                +
000549 eaee     +LDI R30 , LOW ( 2 * _0x0 + ( 254 ) )
00054a e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 254 ) )
                 	__POINTW1FN _0x0,254
00054b 940e 0dae 	CALL SUBOPT_0x28
                 ; 0000 0123     lcd_gotoxy(0,2);
00054d 940e 0cac 	CALL SUBOPT_0x4
                 ; 0000 0124     lcd_putsf("Time: ");
                +
00054f ebe5     +LDI R30 , LOW ( 2 * _0x0 + ( 261 ) )
000550 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 261 ) )
                 	__POINTW1FN _0x0,261
000551 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0125     while(Screen == 310)
                 _0x9D:
000553 940e 0d20 	CALL SUBOPT_0x17
000555 33a6      	CPI  R26,LOW(0x136)
000556 e0e1      	LDI  R30,HIGH(0x136)
000557 07be      	CPC  R27,R30
000558 f411      	BRNE _0x9F
                 ; 0000 0126     {input_RTC();}
000559 ddbb      	RCALL _input_RTC
00055a cff8      	RJMP _0x9D
                 _0x9F:
                 ; 0000 0127 }
00055b 9508      	RET
                 ;
                 ;void Screen311()
                 ; 0000 012A {
                 _Screen311:
                 ; 0000 012B     //Alarm Mode
                 ; 0000 012C     lcd_clear();
00055c 940e 0be2 	CALL _lcd_clear
                 ; 0000 012D     rtc_get_time(&hr2,&min2,&sec2);
00055e e0e4      	LDI  R30,LOW(4)
00055f e0f0      	LDI  R31,HIGH(4)
000560 93fa      	ST   -Y,R31
000561 93ea      	ST   -Y,R30
000562 e0e6      	LDI  R30,LOW(6)
000563 e0f0      	LDI  R31,HIGH(6)
000564 93fa      	ST   -Y,R31
000565 93ea      	ST   -Y,R30
000566 e0e8      	LDI  R30,LOW(8)
000567 e0f0      	LDI  R31,HIGH(8)
000568 93fa      	ST   -Y,R31
000569 93ea      	ST   -Y,R30
00056a 940e 0b65 	CALL _rtc_get_time
                 ; 0000 012E     rtc_get_date(&dd2,&mm2,&yy2);
00056c e0ea      	LDI  R30,LOW(10)
00056d e0f0      	LDI  R31,HIGH(10)
00056e 93fa      	ST   -Y,R31
00056f 93ea      	ST   -Y,R30
000570 e0ec      	LDI  R30,LOW(12)
000571 e0f0      	LDI  R31,HIGH(12)
000572 93fa      	ST   -Y,R31
000573 93ea      	ST   -Y,R30
000574 e6e8      	LDI  R30,LOW(_yy2)
000575 e0f5      	LDI  R31,HIGH(_yy2)
000576 940e 0df1 	CALL SUBOPT_0x34
                 ; 0000 012F     lcd_gotoxy(0,0);
                 ; 0000 0130     lcd_putsf("New T:");
                +
000578 ebec     +LDI R30 , LOW ( 2 * _0x0 + ( 268 ) )
000579 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 268 ) )
                 	__POINTW1FN _0x0,268
00057a 940e 0dae 	CALL SUBOPT_0x28
                 ; 0000 0131     lcd_gotoxy(0,2);
00057c 940e 0cac 	CALL SUBOPT_0x4
                 ; 0000 0132     lcd_putsf("New D:");
                +
00057e ece3     +LDI R30 , LOW ( 2 * _0x0 + ( 275 ) )
00057f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 275 ) )
                 	__POINTW1FN _0x0,275
000580 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0133     while(Screen == 311)
                 _0xA0:
000582 940e 0d20 	CALL SUBOPT_0x17
000584 33a7      	CPI  R26,LOW(0x137)
000585 e0e1      	LDI  R30,HIGH(0x137)
000586 07be      	CPC  R27,R30
000587 f411      	BRNE _0xA2
                 ; 0000 0134     {input_RTC();
000588 dd8c      	RCALL _input_RTC
                 ; 0000 0135 
                 ; 0000 0136     }
000589 cff8      	RJMP _0xA0
                 _0xA2:
                 ; 0000 0137 
                 ; 0000 0138 }
00058a 9508      	RET
                 ;
                 ;void Screen312()
                 ; 0000 013B {
                 _Screen312:
                 ; 0000 013C     //Countdown timer. using input time.
                 ; 0000 013D     lcd_clear();
00058b 940e 0d9d 	CALL SUBOPT_0x25
                 ; 0000 013E     lcd_gotoxy(0,0);
                 ; 0000 013F     lcd_putsf("countdowntimer");
                +
00058d ecea     +LDI R30 , LOW ( 2 * _0x0 + ( 282 ) )
00058e e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 282 ) )
                 	__POINTW1FN _0x0,282
00058f 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0140     delay_ms(1000);
000591 940e 0dd9 	CALL SUBOPT_0x2E
                 ; 0000 0141     if(PINE.1 == 0)                  //ESCAPE -- 4
000593 9909      	SBIC 0x1,1
000594 c005      	RJMP _0xA3
                 ; 0000 0142     {
                 ; 0000 0143         while(PINE.1 == 0)
                 _0xA4:
000595 9909      	SBIC 0x1,1
000596 c003      	RJMP _0xA6
                 ; 0000 0144         {
                 ; 0000 0145             Screen = 31;
000597 940e 0d25 	CALL SUBOPT_0x18
                 ; 0000 0146         }
000599 cffb      	RJMP _0xA4
                 _0xA6:
                 ; 0000 0147     }
                 ; 0000 0148 
                 ; 0000 0149 }
                 _0xA3:
00059a 9508      	RET
                 ;
                 ;
                 ;void Screen32()
                 ; 0000 014D {
                 _Screen32:
                 ; 0000 014E     lcd_clear();
00059b 940e 0dee 	CALL SUBOPT_0x33
                 ; 0000 014F     Pointer_vert = 0;
                 ; 0000 0150     lcd_gotoxy(4,3);
00059d e0e4      	LDI  R30,LOW(4)
00059e 940e 0de5 	CALL SUBOPT_0x31
                 ; 0000 0151     lcd_putsf("SENSORS");
                +
0005a0 ede9     +LDI R30 , LOW ( 2 * _0x0 + ( 297 ) )
0005a1 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 297 ) )
                 	__POINTW1FN _0x0,297
0005a2 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0152     lcd_gotoxy(1,0);
0005a4 e0e1      	LDI  R30,LOW(1)
0005a5 940e 0ccc 	CALL SUBOPT_0xA
                 ; 0000 0153     lcd_putsf("Analog");
                +
0005a7 eee1     +LDI R30 , LOW ( 2 * _0x0 + ( 305 ) )
0005a8 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 305 ) )
                 	__POINTW1FN _0x0,305
0005a9 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0154     lcd_gotoxy(1,1);
0005ab 940e 0de0 	CALL SUBOPT_0x30
                 ; 0000 0155     lcd_putsf("Digital");
                +
0005ad eee8     +LDI R30 , LOW ( 2 * _0x0 + ( 312 ) )
0005ae e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 312 ) )
                 	__POINTW1FN _0x0,312
0005af 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0156     lcd_gotoxy(1,2);
0005b1 940e 0c9a 	CALL SUBOPT_0x1
                 ; 0000 0157     lcd_putsf("Thermocouple");
                +
0005b3 efe0     +LDI R30 , LOW ( 2 * _0x0 + ( 320 ) )
0005b4 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 320 ) )
                 	__POINTW1FN _0x0,320
0005b5 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0158 
                 ; 0000 0159     while(Screen == 32)
                 _0xA7:
0005b7 940e 0d20 	CALL SUBOPT_0x17
0005b9 9790      	SBIW R26,32
0005ba f429      	BRNE _0xA9
                 ; 0000 015A     {
                 ; 0000 015B         input(3);
0005bb e0e3      	LDI  R30,LOW(3)
0005bc e0f0      	LDI  R31,HIGH(3)
0005bd 940e 0dea 	CALL SUBOPT_0x32
                 ; 0000 015C     }
0005bf cff7      	RJMP _0xA7
                 _0xA9:
                 ; 0000 015D }
0005c0 9508      	RET
                 ;
                 ;void Screen320()  // Analog Values
                 ; 0000 0160 {
                 _Screen320:
                 ; 0000 0161     lcd_gotoxy(0,0);
0005c1 940e 0cb1 	CALL SUBOPT_0x5
                 ; 0000 0162     lcd_putsf("No functions          added yet");
                +
0005c3 efed     +LDI R30 , LOW ( 2 * _0x0 + ( 333 ) )
0005c4 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 333 ) )
                 	__POINTW1FN _0x0,333
0005c5 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0163     delay_ms(1000);
0005c7 940e 0dd9 	CALL SUBOPT_0x2E
                 ; 0000 0164     Screen = 32;
0005c9 e2e0      	LDI  R30,LOW(32)
0005ca e0f0      	LDI  R31,HIGH(32)
                 _0x212000B:
0005cb 93e0 0589 	STS  _Screen,R30
0005cd 93f0 058a 	STS  _Screen+1,R31
                 ; 0000 0165 }
0005cf 9508      	RET
                 ;
                 ;void Screen321()        // Digital Values
                 ; 0000 0168 {
                 _Screen321:
                 ; 0000 0169     int x = 0;
                 ; 0000 016A     char disp_ch[3];
                 ; 0000 016B     lcd_clear();
0005d0 9723      	SBIW R28,3
0005d1 931a      	ST   -Y,R17
0005d2 930a      	ST   -Y,R16
                 ;	x -> R16,R17
                 ;	disp_ch -> Y+2
                +
0005d3 e000     +LDI R16 , LOW ( 0 )
0005d4 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0005d5 940e 0d9d 	CALL SUBOPT_0x25
                 ; 0000 016C     lcd_gotoxy(0,0);
                 ; 0000 016D     lcd_putsf("Ch0:");
                +
0005d7 e1ed     +LDI R30 , LOW ( 2 * _0x0 + ( 365 ) )
0005d8 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 365 ) )
                 	__POINTW1FN _0x0,365
0005d9 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 016E     lcd_gotoxy(0,1);
0005db 940e 0cb6 	CALL SUBOPT_0x6
                 ; 0000 016F     lcd_putsf("Ch1:");
                +
0005dd e2e2     +LDI R30 , LOW ( 2 * _0x0 + ( 370 ) )
0005de e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 370 ) )
                 	__POINTW1FN _0x0,370
0005df 940e 0dae 	CALL SUBOPT_0x28
                 ; 0000 0170     lcd_gotoxy(0,2);
0005e1 940e 0cac 	CALL SUBOPT_0x4
                 ; 0000 0171     lcd_putsf("Ch2:");
                +
0005e3 e2e7     +LDI R30 , LOW ( 2 * _0x0 + ( 375 ) )
0005e4 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 375 ) )
                 	__POINTW1FN _0x0,375
0005e5 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0172     lcd_gotoxy(0,3);
0005e7 940e 0cbc 	CALL SUBOPT_0x7
                 ; 0000 0173     lcd_putsf("Ch3:");
                +
0005e9 e2ec     +LDI R30 , LOW ( 2 * _0x0 + ( 380 ) )
0005ea e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 380 ) )
                 	__POINTW1FN _0x0,380
0005eb 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0174     lcd_gotoxy(9,0);
0005ed e0e9      	LDI  R30,LOW(9)
0005ee 940e 0ccc 	CALL SUBOPT_0xA
                 ; 0000 0175     lcd_putsf("Ch4:");
                +
0005f0 e3e1     +LDI R30 , LOW ( 2 * _0x0 + ( 385 ) )
0005f1 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 385 ) )
                 	__POINTW1FN _0x0,385
0005f2 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0176     lcd_gotoxy(9,1);
0005f4 e0e9      	LDI  R30,LOW(9)
0005f5 940e 0df6 	CALL SUBOPT_0x35
                 ; 0000 0177     lcd_putsf("Ch5:");
                +
0005f7 e3e6     +LDI R30 , LOW ( 2 * _0x0 + ( 390 ) )
0005f8 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 390 ) )
                 	__POINTW1FN _0x0,390
0005f9 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 0178     lcd_gotoxy(9,2);
0005fb e0e9      	LDI  R30,LOW(9)
0005fc 940e 0cac 	CALL SUBOPT_0x4
                 ; 0000 0179     lcd_putsf("Ch6:");
                +
0005fe e3eb     +LDI R30 , LOW ( 2 * _0x0 + ( 395 ) )
0005ff e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 395 ) )
                 	__POINTW1FN _0x0,395
000600 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 017A     lcd_gotoxy(9,3);
000602 e0e9      	LDI  R30,LOW(9)
000603 940e 0de5 	CALL SUBOPT_0x31
                 ; 0000 017B     lcd_putsf("Ch7:");
                +
000605 e4e0     +LDI R30 , LOW ( 2 * _0x0 + ( 400 ) )
000606 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 400 ) )
                 	__POINTW1FN _0x0,400
000607 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 017C 
                 ; 0000 017D     while (PINE.1 != 0)
                 _0xAA:
000609 9b09      	SBIS 0x1,1
00060a c065      	RJMP _0xAC
                 ; 0000 017E     {
                 ; 0000 017F         x = read_adc(0x00)/4;
00060b e0e0      	LDI  R30,LOW(0)
00060c 940e 0dfb 	CALL SUBOPT_0x36
                 ; 0000 0180         sprintf(disp_ch,"%03d",x);
00060e 01f8      	MOVW R30,R16
00060f 940e 0cd1 	CALL SUBOPT_0xB
000611 940e 0e04 	CALL SUBOPT_0x37
                 ; 0000 0181         lcd_gotoxy(4,0);
000613 940e 0ccc 	CALL SUBOPT_0xA
                 ; 0000 0182         lcd_puts(disp_ch);
000615 940e 0e0a 	CALL SUBOPT_0x38
                 ; 0000 0183         x = read_adc(0x01)/4;
000617 e0e1      	LDI  R30,LOW(1)
000618 940e 0dfb 	CALL SUBOPT_0x36
                 ; 0000 0184         sprintf(disp_ch,"%03d",x);
00061a 01f8      	MOVW R30,R16
00061b 940e 0cd1 	CALL SUBOPT_0xB
00061d 940e 0e04 	CALL SUBOPT_0x37
                 ; 0000 0185         lcd_gotoxy(4,1);
00061f 940e 0df6 	CALL SUBOPT_0x35
                 ; 0000 0186         lcd_puts(disp_ch);
000621 940e 0e0a 	CALL SUBOPT_0x38
                 ; 0000 0187         x = read_adc(0x02)/4;
000623 e0e2      	LDI  R30,LOW(2)
000624 940e 0dfb 	CALL SUBOPT_0x36
                 ; 0000 0188         sprintf(disp_ch,"%03d",x);
000626 01f8      	MOVW R30,R16
000627 940e 0cd1 	CALL SUBOPT_0xB
000629 940e 0e04 	CALL SUBOPT_0x37
                 ; 0000 0189         lcd_gotoxy(4,2);
00062b 940e 0cac 	CALL SUBOPT_0x4
                 ; 0000 018A         lcd_puts(disp_ch);
00062d 940e 0e0a 	CALL SUBOPT_0x38
                 ; 0000 018B         x = read_adc(0x03)/4;
00062f e0e3      	LDI  R30,LOW(3)
000630 940e 0dfb 	CALL SUBOPT_0x36
                 ; 0000 018C         sprintf(disp_ch,"%03d",x);
000632 01f8      	MOVW R30,R16
000633 940e 0cd1 	CALL SUBOPT_0xB
000635 940e 0e04 	CALL SUBOPT_0x37
                 ; 0000 018D         lcd_gotoxy(4,3);
000637 940e 0de5 	CALL SUBOPT_0x31
                 ; 0000 018E         lcd_puts(disp_ch);
000639 940e 0e0a 	CALL SUBOPT_0x38
                 ; 0000 018F         x = read_adc(0x04)/4;
00063b e0e4      	LDI  R30,LOW(4)
00063c 940e 0dfb 	CALL SUBOPT_0x36
                 ; 0000 0190         sprintf(disp_ch,"%03d",x);
00063e 01f8      	MOVW R30,R16
00063f 940e 0cd1 	CALL SUBOPT_0xB
000641 940e 0e0d 	CALL SUBOPT_0x39
                 ; 0000 0191         lcd_gotoxy(13,0);
000643 940e 0ccc 	CALL SUBOPT_0xA
                 ; 0000 0192         lcd_puts(disp_ch);
000645 940e 0e0a 	CALL SUBOPT_0x38
                 ; 0000 0193         x = read_adc(0x05)/4;
000647 e0e5      	LDI  R30,LOW(5)
000648 940e 0dfb 	CALL SUBOPT_0x36
                 ; 0000 0194         sprintf(disp_ch,"%03d",x);
00064a 01f8      	MOVW R30,R16
00064b 940e 0cd1 	CALL SUBOPT_0xB
00064d 940e 0e0d 	CALL SUBOPT_0x39
                 ; 0000 0195         lcd_gotoxy(13,1);
00064f 940e 0df6 	CALL SUBOPT_0x35
                 ; 0000 0196         lcd_puts(disp_ch);
000651 940e 0e0a 	CALL SUBOPT_0x38
                 ; 0000 0197         x = read_adc(0x06)/4;
000653 e0e6      	LDI  R30,LOW(6)
000654 940e 0dfb 	CALL SUBOPT_0x36
                 ; 0000 0198         sprintf(disp_ch,"%03d",x);
000656 01f8      	MOVW R30,R16
000657 940e 0cd1 	CALL SUBOPT_0xB
000659 940e 0e0d 	CALL SUBOPT_0x39
                 ; 0000 0199         lcd_gotoxy(13,2);
00065b 940e 0cac 	CALL SUBOPT_0x4
                 ; 0000 019A         lcd_puts(disp_ch);
00065d 940e 0e0a 	CALL SUBOPT_0x38
                 ; 0000 019B         x = read_adc(0x07)/4;
00065f e0e7      	LDI  R30,LOW(7)
000660 940e 0dfb 	CALL SUBOPT_0x36
                 ; 0000 019C         sprintf(disp_ch,"%03d",x);
000662 01f8      	MOVW R30,R16
000663 940e 0cd1 	CALL SUBOPT_0xB
000665 e084      	LDI  R24,4
000666 940e 0969 	CALL _sprintf
000668 9628      	ADIW R28,8
                 ; 0000 019D         lcd_gotoxy(13,3);
000669 940e 0ce8 	CALL SUBOPT_0xF
                 ; 0000 019E         lcd_puts(disp_ch);
00066b 940e 0e0a 	CALL SUBOPT_0x38
                 ; 0000 019F         delay_ms(1000);
00066d 940e 0dd9 	CALL SUBOPT_0x2E
                 ; 0000 01A0     }
00066f cf99      	RJMP _0xAA
                 _0xAC:
                 ; 0000 01A1     Screen = 32;
000670 e2e0      	LDI  R30,LOW(32)
000671 e0f0      	LDI  R31,HIGH(32)
000672 940e 0d3f 	CALL SUBOPT_0x1C
                 ; 0000 01A2 }
000674 c1bb      	RJMP _0x212000A
                 ;
                 ;void Screen322()                            //Thermocouple Reading function
                 ; 0000 01A5 {
                 _Screen322:
                 ; 0000 01A6     char ThermVal[16];
                 ; 0000 01A7     int x = ThermoReadC();
                 ; 0000 01A8     while(Screen == 322)
000675 9760      	SBIW R28,16
000676 931a      	ST   -Y,R17
000677 930a      	ST   -Y,R16
                 ;	ThermVal -> Y+2
                 ;	x -> R16,R17
000678 db91      	RCALL _ThermoReadC
000679 018f      	MOVW R16,R30
                 _0xAD:
00067a 940e 0d20 	CALL SUBOPT_0x17
00067c 34a2      	CPI  R26,LOW(0x142)
00067d e0e1      	LDI  R30,HIGH(0x142)
00067e 07be      	CPC  R27,R30
00067f f4e1      	BRNE _0xAF
                 ; 0000 01A9     {
                 ; 0000 01AA         lcd_clear();
000680 940e 0d9d 	CALL SUBOPT_0x25
                 ; 0000 01AB         lcd_gotoxy(0,0);
                 ; 0000 01AC         sprintf(ThermVal,"Temp:%04d",x);
000682 01fe      	MOVW R30,R28
000683 9632      	ADIW R30,2
000684 93fa      	ST   -Y,R31
000685 93ea      	ST   -Y,R30
                +
000686 e4e5     +LDI R30 , LOW ( 2 * _0x0 + ( 405 ) )
000687 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 405 ) )
                 	__POINTW1FN _0x0,405
000688 93fa      	ST   -Y,R31
000689 93ea      	ST   -Y,R30
00068a 01f8      	MOVW R30,R16
00068b 940e 0cd1 	CALL SUBOPT_0xB
00068d e084      	LDI  R24,4
00068e 940e 0969 	CALL _sprintf
000690 9628      	ADIW R28,8
                 ; 0000 01AD         lcd_puts(ThermVal);
000691 940e 0e0a 	CALL SUBOPT_0x38
                 ; 0000 01AE        // delay_ms(1500);
                 ; 0000 01AF        if (PINE.1 == 0)                                            //ESCAPE Pressed 4
000693 9909      	SBIC 0x1,1
000694 c006      	RJMP _0xB0
                 ; 0000 01B0        {
                 ; 0000 01B1         while(PINE.1 == 0);
                 _0xB1:
000695 9b09      	SBIS 0x1,1
000696 cffe      	RJMP _0xB1
                 ; 0000 01B2         Screen = 32;
000697 e2e0      	LDI  R30,LOW(32)
000698 e0f0      	LDI  R31,HIGH(32)
000699 940e 0d3f 	CALL SUBOPT_0x1C
                 ; 0000 01B3         //flag = 1;
                 ; 0000 01B4        }
                 ; 0000 01B5     }
                 _0xB0:
00069b cfde      	RJMP _0xAD
                 _0xAF:
                 ; 0000 01B6 
                 ; 0000 01B7 
                 ; 0000 01B8 
                 ; 0000 01B9 }
00069c 8119      	LDD  R17,Y+1
00069d 8108      	LDD  R16,Y+0
00069e 9662      	ADIW R28,18
00069f 9508      	RET
                 ;
                 ;void Screen33()
                 ; 0000 01BC {
                 _Screen33:
                 ; 0000 01BD     lcd_clear();
0006a0 940e 0dee 	CALL SUBOPT_0x33
                 ; 0000 01BE     Pointer_vert = 0;
                 ; 0000 01BF     lcd_gotoxy(3,3);
0006a2 e0e3      	LDI  R30,LOW(3)
0006a3 940e 0de5 	CALL SUBOPT_0x31
                 ; 0000 01C0     lcd_putsf("PARAMETERS");
                +
0006a5 e4ef     +LDI R30 , LOW ( 2 * _0x0 + ( 415 ) )
0006a6 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 415 ) )
                 	__POINTW1FN _0x0,415
0006a7 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 01C1     lcd_gotoxy(1,0);
0006a9 e0e1      	LDI  R30,LOW(1)
0006aa 940e 0ccc 	CALL SUBOPT_0xA
                 ; 0000 01C2     lcd_putsf("Voltage (VOLTS)");
                +
0006ac e5ea     +LDI R30 , LOW ( 2 * _0x0 + ( 426 ) )
0006ad e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 426 ) )
                 	__POINTW1FN _0x0,426
0006ae 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 01C3     lcd_gotoxy(1,1);
0006b0 940e 0de0 	CALL SUBOPT_0x30
                 ; 0000 01C4     lcd_putsf("Current (AMPS)");
                +
0006b2 e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 442 ) )
0006b3 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 442 ) )
                 	__POINTW1FN _0x0,442
0006b4 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 01C5 
                 ; 0000 01C6     while(Screen == 33)
                 _0xB4:
0006b6 940e 0d20 	CALL SUBOPT_0x17
0006b8 9791      	SBIW R26,33
0006b9 f469      	BRNE _0xB6
                 ; 0000 01C7     {
                 ; 0000 01C8         input(2);
0006ba e0e2      	LDI  R30,LOW(2)
0006bb e0f0      	LDI  R31,HIGH(2)
0006bc 940e 0dea 	CALL SUBOPT_0x32
                 ; 0000 01C9 
                 ; 0000 01CA     if (PINE.1 == 0)                                            //ESCAPE Pressed 4
0006be 9909      	SBIC 0x1,1
0006bf c006      	RJMP _0xB7
                 ; 0000 01CB        {
                 ; 0000 01CC         while(PINE.1 == 0);
                 _0xB8:
0006c0 9b09      	SBIS 0x1,1
0006c1 cffe      	RJMP _0xB8
                 ; 0000 01CD         Screen = 2;
0006c2 e0e2      	LDI  R30,LOW(2)
0006c3 e0f0      	LDI  R31,HIGH(2)
0006c4 940e 0d3f 	CALL SUBOPT_0x1C
                 ; 0000 01CE        }
                 ; 0000 01CF     }
                 _0xB7:
0006c6 cfef      	RJMP _0xB4
                 _0xB6:
                 ; 0000 01D0    // Screen = 33;
                 ; 0000 01D1 
                 ; 0000 01D2 }
0006c7 9508      	RET
                 ;
                 ;void Screen330()      //SET VOLTAGE
                 ; 0000 01D5 {
                 _Screen330:
                 ; 0000 01D6     while(Screen == 330)
                 _0xBB:
0006c8 940e 0d20 	CALL SUBOPT_0x17
0006ca 34aa      	CPI  R26,LOW(0x14A)
0006cb e0e1      	LDI  R30,HIGH(0x14A)
0006cc 07be      	CPC  R27,R30
0006cd f4c9      	BRNE _0xBD
                 ; 0000 01D7     {
                 ; 0000 01D8     lcd_clear();
0006ce 940e 0d9d 	CALL SUBOPT_0x25
                 ; 0000 01D9     lcd_gotoxy(0,0);
                 ; 0000 01DA     lcd_putsf("Set voltage:");
                +
0006d0 e7e9     +LDI R30 , LOW ( 2 * _0x0 + ( 457 ) )
0006d1 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 457 ) )
                 	__POINTW1FN _0x0,457
0006d2 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 01DB     show_volt();
0006d4 dc26      	RCALL _show_volt
                 ; 0000 01DC     while(flag != 11)
                 _0xBE:
0006d5 91a0 059d 	LDS  R26,_flag
0006d7 91b0 059e 	LDS  R27,_flag+1
0006d9 971b      	SBIW R26,11
0006da f031      	BREQ _0xC0
                 ; 0000 01DD     {
                 ; 0000 01DE         input_volt(3);
0006db e0e3      	LDI  R30,LOW(3)
0006dc e0f0      	LDI  R31,HIGH(3)
0006dd 93fa      	ST   -Y,R31
0006de 93ea      	ST   -Y,R30
0006df dcdd      	RCALL _input_volt
                 ; 0000 01DF     }
0006e0 cff4      	RJMP _0xBE
                 _0xC0:
                 ; 0000 01E0     flag = 0;
0006e1 e0e0      	LDI  R30,LOW(0)
0006e2 93e0 059d 	STS  _flag,R30
0006e4 93e0 059e 	STS  _flag+1,R30
                 ; 0000 01E1     }
0006e6 cfe1      	RJMP _0xBB
                 _0xBD:
                 ; 0000 01E2 }
0006e7 9508      	RET
                 ;void Screen331()     //SET CURRENT
                 ; 0000 01E4 {
                 _Screen331:
                 ; 0000 01E5     while (Screen == 331)
                 _0xC1:
0006e8 940e 0d20 	CALL SUBOPT_0x17
0006ea 34ab      	CPI  R26,LOW(0x14B)
0006eb e0e1      	LDI  R30,HIGH(0x14B)
0006ec 07be      	CPC  R27,R30
0006ed f4c9      	BRNE _0xC3
                 ; 0000 01E6     {
                 ; 0000 01E7     lcd_clear();
0006ee 940e 0d9d 	CALL SUBOPT_0x25
                 ; 0000 01E8     lcd_gotoxy(0,0);
                 ; 0000 01E9     lcd_putsf("Set current:");
                +
0006f0 e8e6     +LDI R30 , LOW ( 2 * _0x0 + ( 470 ) )
0006f1 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 470 ) )
                 	__POINTW1FN _0x0,470
0006f2 940e 0ddc 	CALL SUBOPT_0x2F
                 ; 0000 01EA     show_current();
0006f4 dc11      	RCALL _show_current
                 ; 0000 01EB     while(flag != 11)
                 _0xC4:
0006f5 91a0 059d 	LDS  R26,_flag
0006f7 91b0 059e 	LDS  R27,_flag+1
0006f9 971b      	SBIW R26,11
0006fa f031      	BREQ _0xC6
                 ; 0000 01EC     {
                 ; 0000 01ED         input_current(3);
0006fb e0e3      	LDI  R30,LOW(3)
0006fc e0f0      	LDI  R31,HIGH(3)
0006fd 93fa      	ST   -Y,R31
0006fe 93ea      	ST   -Y,R30
0006ff dd3d      	RCALL _input_current
                 ; 0000 01EE     }
000700 cff4      	RJMP _0xC4
                 _0xC6:
                 ; 0000 01EF     flag = 0;
000701 e0e0      	LDI  R30,LOW(0)
000702 93e0 059d 	STS  _flag,R30
000704 93e0 059e 	STS  _flag+1,R30
                 ; 0000 01F0     }
000706 cfe1      	RJMP _0xC1
                 _0xC3:
                 ; 0000 01F1 }
000707 9508      	RET
                 ;
                 ;void Screen_sel()
                 ; 0000 01F4 {
                 _Screen_sel:
                 ; 0000 01F5     switch(Screen)
000708 940e 0d3a 	CALL SUBOPT_0x1B
                 ; 0000 01F6     {
                 ; 0000 01F7         case 1:
00070a 30e1      	CPI  R30,LOW(0x1)
00070b e0a0      	LDI  R26,HIGH(0x1)
00070c 07fa      	CPC  R31,R26
00070d f411      	BRNE _0xCA
                 ; 0000 01F8             Screen1();
00070e ddb1      	RCALL _Screen1
                 ; 0000 01F9         break;
00070f c05c      	RJMP _0xC9
                 ; 0000 01FA         case 2:
                 _0xCA:
000710 30e2      	CPI  R30,LOW(0x2)
000711 e0a0      	LDI  R26,HIGH(0x2)
000712 07fa      	CPC  R31,R26
000713 f411      	BRNE _0xCB
                 ; 0000 01FB             Screen2();
000714 ddc1      	RCALL _Screen2
                 ; 0000 01FC         break;
000715 c056      	RJMP _0xC9
                 ; 0000 01FD         //case 30:
                 ; 0000 01FE             //Screen30();
                 ; 0000 01FF 
                 ; 0000 0200 
                 ; 0000 0201 
                 ; 0000 0202         case 31:                            //Timer
                 _0xCB:
000716 31ef      	CPI  R30,LOW(0x1F)
000717 e0a0      	LDI  R26,HIGH(0x1F)
000718 07fa      	CPC  R31,R26
000719 f411      	BRNE _0xCC
                 ; 0000 0203             Screen31();
00071a ddec      	RCALL _Screen31
                 ; 0000 0204         break;
00071b c050      	RJMP _0xC9
                 ; 0000 0205         case 310:                           //Set date time.
                 _0xCC:
00071c 33e6      	CPI  R30,LOW(0x136)
00071d e0a1      	LDI  R26,HIGH(0x136)
00071e 07fa      	CPC  R31,R26
00071f f411      	BRNE _0xCD
                 ; 0000 0206             Screen310();
000720 de0c      	RCALL _Screen310
                 ; 0000 0207         break;
000721 c04a      	RJMP _0xC9
                 ; 0000 0208         case 311:                           //Alarm Mode
                 _0xCD:
000722 33e7      	CPI  R30,LOW(0x137)
000723 e0a1      	LDI  R26,HIGH(0x137)
000724 07fa      	CPC  R31,R26
000725 f411      	BRNE _0xCE
                 ; 0000 0209             Screen311();
000726 de35      	RCALL _Screen311
                 ; 0000 020A         break;
000727 c044      	RJMP _0xC9
                 ; 0000 020B         case 312:                           //Countdown timer
                 _0xCE:
000728 33e8      	CPI  R30,LOW(0x138)
000729 e0a1      	LDI  R26,HIGH(0x138)
00072a 07fa      	CPC  R31,R26
00072b f411      	BRNE _0xCF
                 ; 0000 020C             Screen312();
00072c de5e      	RCALL _Screen312
                 ; 0000 020D         break;
00072d c03e      	RJMP _0xC9
                 ; 0000 020E 
                 ; 0000 020F         case 32:
                 _0xCF:
00072e 32e0      	CPI  R30,LOW(0x20)
00072f e0a0      	LDI  R26,HIGH(0x20)
000730 07fa      	CPC  R31,R26
000731 f411      	BRNE _0xD0
                 ; 0000 0210             Screen32();
000732 de68      	RCALL _Screen32
                 ; 0000 0211         break;
000733 c038      	RJMP _0xC9
                 ; 0000 0212         case 320:                           //Analog
                 _0xD0:
000734 34e0      	CPI  R30,LOW(0x140)
000735 e0a1      	LDI  R26,HIGH(0x140)
000736 07fa      	CPC  R31,R26
000737 f411      	BRNE _0xD1
                 ; 0000 0213             Screen320();
000738 de88      	RCALL _Screen320
                 ; 0000 0214         break;
000739 c032      	RJMP _0xC9
                 ; 0000 0215         case 321:                           //Digital
                 _0xD1:
00073a 34e1      	CPI  R30,LOW(0x141)
00073b e0a1      	LDI  R26,HIGH(0x141)
00073c 07fa      	CPC  R31,R26
00073d f411      	BRNE _0xD2
                 ; 0000 0216             Screen321();
00073e de91      	RCALL _Screen321
                 ; 0000 0217         break;
00073f c02c      	RJMP _0xC9
                 ; 0000 0218         case 322:                           //Thermocouple
                 _0xD2:
000740 34e2      	CPI  R30,LOW(0x142)
000741 e0a1      	LDI  R26,HIGH(0x142)
000742 07fa      	CPC  R31,R26
000743 f411      	BRNE _0xD3
                 ; 0000 0219             Screen322();
000744 df30      	RCALL _Screen322
                 ; 0000 021A         break;
000745 c026      	RJMP _0xC9
                 ; 0000 021B 
                 ; 0000 021C         case 33:                           //Ports
                 _0xD3:
000746 32e1      	CPI  R30,LOW(0x21)
000747 e0a0      	LDI  R26,HIGH(0x21)
000748 07fa      	CPC  R31,R26
000749 f411      	BRNE _0xD4
                 ; 0000 021D             Screen33();
00074a df55      	RCALL _Screen33
                 ; 0000 021E         break;
00074b c020      	RJMP _0xC9
                 ; 0000 021F 
                 ; 0000 0220         case 330:
                 _0xD4:
00074c 34ea      	CPI  R30,LOW(0x14A)
00074d e0a1      	LDI  R26,HIGH(0x14A)
00074e 07fa      	CPC  R31,R26
00074f f411      	BRNE _0xD5
                 ; 0000 0221             Screen330();                   //Set Voltage
000750 df77      	RCALL _Screen330
                 ; 0000 0222         break;
000751 c01a      	RJMP _0xC9
                 ; 0000 0223         case 331:
                 _0xD5:
000752 34eb      	CPI  R30,LOW(0x14B)
000753 e0a1      	LDI  R26,HIGH(0x14B)
000754 07fa      	CPC  R31,R26
000755 f411      	BRNE _0xD7
                 ; 0000 0224             Screen331();
000756 df91      	RCALL _Screen331
                 ; 0000 0225         break;
000757 c014      	RJMP _0xC9
                 ; 0000 0226         default:
                 _0xD7:
                 ; 0000 0227             lcd_clear();
000758 940e 0d9d 	CALL SUBOPT_0x25
                 ; 0000 0228             lcd_gotoxy(0,0);
                 ; 0000 0229             lcd_puts("Error.");
                +
00075a e4e7     +LDI R30 , LOW ( _0xD8 + ( 0 ) )
00075b e0f5     +LDI R31 , HIGH ( _0xD8 + ( 0 ) )
                 	__POINTW1MN _0xD8,0
00075c 940e 0cc8 	CALL SUBOPT_0x9
                 ; 0000 022A             lcd_gotoxy(0,1);
00075e 940e 0cb6 	CALL SUBOPT_0x6
                 ; 0000 022B             lcd_puts("Restarting in 5 seconds.");
                +
000760 e4ee     +LDI R30 , LOW ( _0xD8 + ( 7 ) )
000761 e0f5     +LDI R31 , HIGH ( _0xD8 + ( 7 ) )
                 	__POINTW1MN _0xD8,7
000762 940e 0cc8 	CALL SUBOPT_0x9
                 ; 0000 022C             delay_ms(5000);
000764 e8e8      	LDI  R30,LOW(5000)
000765 e1f3      	LDI  R31,HIGH(5000)
000766 940e 0dbd 	CALL SUBOPT_0x2A
                 ; 0000 022D             Screen = 1;
000768 e0e1      	LDI  R30,LOW(1)
000769 e0f0      	LDI  R31,HIGH(1)
00076a 940e 0d3f 	CALL SUBOPT_0x1C
                 ; 0000 022E         break;
                 ; 0000 022F     }
                 _0xC9:
                 ; 0000 0230 }
00076c 9508      	RET
                 
                 	.DSEG
                 _0xD8:
000547           	.BYTE 0x20
                 ;
                 ;void main(void)
                 ; 0000 0233 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0234 // Declare your local variables here
                 ; 0000 0235 
                 ; 0000 0236 // Input/Output Ports initialization
                 ; 0000 0237 // Port A initialization
                 ; 0000 0238 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0239 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 023A PORTA=0x00;
00076d e0e0      	LDI  R30,LOW(0)
00076e bbeb      	OUT  0x1B,R30
                 ; 0000 023B DDRA=0x00;
00076f bbea      	OUT  0x1A,R30
                 ; 0000 023C 
                 ; 0000 023D // Port B initialization
                 ; 0000 023E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
                 ; 0000 023F // State7=T State6=T State5=T State4=T State3=T State2=0 State1=0 State0=0
                 ; 0000 0240 PORTB=0x00;
000770 bbe8      	OUT  0x18,R30
                 ; 0000 0241 DDRB=0x07;
000771 e0e7      	LDI  R30,LOW(7)
000772 bbe7      	OUT  0x17,R30
                 ; 0000 0242 
                 ; 0000 0243 // Port C initialization
                 ; 0000 0244 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0245 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0246 PORTC=0x00;
000773 e0e0      	LDI  R30,LOW(0)
000774 bbe5      	OUT  0x15,R30
                 ; 0000 0247 DDRC=0x00;
000775 bbe4      	OUT  0x14,R30
                 ; 0000 0248 
                 ; 0000 0249 // Port D initialization
                 ; 0000 024A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 024B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 024C PORTD=0x00;
000776 bbe2      	OUT  0x12,R30
                 ; 0000 024D DDRD=0x00;
000777 bbe1      	OUT  0x11,R30
                 ; 0000 024E 
                 ; 0000 024F // Port E initialization
                 ; 0000 0250 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0251 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0252 PORTE=0x00;
000778 b9e3      	OUT  0x3,R30
                 ; 0000 0253 DDRE=0x00;
000779 b9e2      	OUT  0x2,R30
                 ; 0000 0254 
                 ; 0000 0255 // Port F initialization
                 ; 0000 0256 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0257 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0258 PORTF=0x00;
00077a 93e0 0062 	STS  98,R30
                 ; 0000 0259 DDRF=0x00;
00077c 93e0 0061 	STS  97,R30
                 ; 0000 025A 
                 ; 0000 025B // Port G initialization
                 ; 0000 025C // Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 025D // State4=T State3=T State2=T State1=T State0=T
                 ; 0000 025E PORTG=0x00;
00077e 93e0 0065 	STS  101,R30
                 ; 0000 025F DDRG=0x00;
000780 93e0 0064 	STS  100,R30
                 ; 0000 0260 
                 ; 0000 0261 // Timer/Counter 0 initialization
                 ; 0000 0262 // Clock source: System Clock
                 ; 0000 0263 // Clock value: Timer 0 Stopped
                 ; 0000 0264 // Mode: Normal top=0xFF
                 ; 0000 0265 // OC0 output: Disconnected
                 ; 0000 0266 ASSR=0x00;
000782 bfe0      	OUT  0x30,R30
                 ; 0000 0267 TCCR0=0x00;
000783 bfe3      	OUT  0x33,R30
                 ; 0000 0268 TCNT0=0x00;
000784 bfe2      	OUT  0x32,R30
                 ; 0000 0269 OCR0=0x00;
000785 bfe1      	OUT  0x31,R30
                 ; 0000 026A 
                 ; 0000 026B // Timer/Counter 1 initialization
                 ; 0000 026C // Clock source: System Clock
                 ; 0000 026D // Clock value: Timer1 Stopped
                 ; 0000 026E // Mode: Normal top=0xFFFF
                 ; 0000 026F // OC1A output: Discon.
                 ; 0000 0270 // OC1B output: Discon.
                 ; 0000 0271 // OC1C output: Discon.
                 ; 0000 0272 // Noise Canceler: Off
                 ; 0000 0273 // Input Capture on Falling Edge
                 ; 0000 0274 // Timer1 Overflow Interrupt: On
                 ; 0000 0275 // Input Capture Interrupt: Off
                 ; 0000 0276 // Compare A Match Interrupt: Off
                 ; 0000 0277 // Compare B Match Interrupt: Off
                 ; 0000 0278 // Compare C Match Interrupt: Off
                 ; 0000 0279 TCCR1A=0x00;
000786 bdef      	OUT  0x2F,R30
                 ; 0000 027A TCCR1B=0x00;
000787 bdee      	OUT  0x2E,R30
                 ; 0000 027B TCNT1H=0x00;
000788 bded      	OUT  0x2D,R30
                 ; 0000 027C TCNT1L=0x00;
000789 bdec      	OUT  0x2C,R30
                 ; 0000 027D ICR1H=0x00;
00078a bde7      	OUT  0x27,R30
                 ; 0000 027E ICR1L=0x00;
00078b bde6      	OUT  0x26,R30
                 ; 0000 027F OCR1AH=0x00;
00078c bdeb      	OUT  0x2B,R30
                 ; 0000 0280 OCR1AL=0x00;
00078d bdea      	OUT  0x2A,R30
                 ; 0000 0281 OCR1BH=0x00;
00078e bde9      	OUT  0x29,R30
                 ; 0000 0282 OCR1BL=0x00;
00078f bde8      	OUT  0x28,R30
                 ; 0000 0283 OCR1CH=0x00;
000790 93e0 0079 	STS  121,R30
                 ; 0000 0284 OCR1CL=0x00;
000792 93e0 0078 	STS  120,R30
                 ; 0000 0285 
                 ; 0000 0286 // Timer/Counter 2 initialization
                 ; 0000 0287 // Clock source: System Clock
                 ; 0000 0288 // Clock value: Timer2 Stopped
                 ; 0000 0289 // Mode: Normal top=0xFF
                 ; 0000 028A // OC2 output: Disconnected
                 ; 0000 028B TCCR2=0x00;
000794 bde5      	OUT  0x25,R30
                 ; 0000 028C TCNT2=0x00;
000795 bde4      	OUT  0x24,R30
                 ; 0000 028D OCR2=0x00;
000796 bde3      	OUT  0x23,R30
                 ; 0000 028E 
                 ; 0000 028F // Timer/Counter 3 initialization
                 ; 0000 0290 // Clock source: System Clock
                 ; 0000 0291 // Clock value: Timer3 Stopped
                 ; 0000 0292 // Mode: Normal top=0xFFFF
                 ; 0000 0293 // OC3A output: Discon.
                 ; 0000 0294 // OC3B output: Discon.
                 ; 0000 0295 // OC3C output: Discon.
                 ; 0000 0296 // Noise Canceler: Off
                 ; 0000 0297 // Input Capture on Falling Edge
                 ; 0000 0298 // Timer3 Overflow Interrupt: Off
                 ; 0000 0299 // Input Capture Interrupt: Off
                 ; 0000 029A // Compare A Match Interrupt: Off
                 ; 0000 029B // Compare B Match Interrupt: Off
                 ; 0000 029C // Compare C Match Interrupt: Off
                 ; 0000 029D TCCR3A=0x00;
000797 93e0 008b 	STS  139,R30
                 ; 0000 029E TCCR3B=0x00;
000799 93e0 008a 	STS  138,R30
                 ; 0000 029F TCNT3H=0x00;
00079b 93e0 0089 	STS  137,R30
                 ; 0000 02A0 TCNT3L=0x00;
00079d 93e0 0088 	STS  136,R30
                 ; 0000 02A1 ICR3H=0x00;
00079f 93e0 0081 	STS  129,R30
                 ; 0000 02A2 ICR3L=0x00;
0007a1 93e0 0080 	STS  128,R30
                 ; 0000 02A3 OCR3AH=0x00;
0007a3 93e0 0087 	STS  135,R30
                 ; 0000 02A4 OCR3AL=0x00;
0007a5 93e0 0086 	STS  134,R30
                 ; 0000 02A5 OCR3BH=0x00;
0007a7 93e0 0085 	STS  133,R30
                 ; 0000 02A6 OCR3BL=0x00;
0007a9 93e0 0084 	STS  132,R30
                 ; 0000 02A7 OCR3CH=0x00;
0007ab 93e0 0083 	STS  131,R30
                 ; 0000 02A8 OCR3CL=0x00;
0007ad 93e0 0082 	STS  130,R30
                 ; 0000 02A9 
                 ; 0000 02AA // External Interrupt(s) initialization
                 ; 0000 02AB // INT0: Off
                 ; 0000 02AC // INT1: Off
                 ; 0000 02AD // INT2: Off
                 ; 0000 02AE // INT3: Off
                 ; 0000 02AF // INT4: On
                 ; 0000 02B0 // INT4 Mode: Falling Edge
                 ; 0000 02B1 // INT5: On
                 ; 0000 02B2 // INT5 Mode: Falling Edge
                 ; 0000 02B3 // INT6: On
                 ; 0000 02B4 // INT6 Mode: Falling Edge
                 ; 0000 02B5 // INT7: On
                 ; 0000 02B6 // INT7 Mode: Falling Edge
                 ; 0000 02B7 EICRA=0x00;
0007af 93e0 006a 	STS  106,R30
                 ; 0000 02B8 EICRB=0xAA;
0007b1 eaea      	LDI  R30,LOW(170)
0007b2 bfea      	OUT  0x3A,R30
                 ; 0000 02B9 EIMSK=0xF0;
0007b3 efe0      	LDI  R30,LOW(240)
0007b4 bfe9      	OUT  0x39,R30
                 ; 0000 02BA EIFR=0xF0;
0007b5 bfe8      	OUT  0x38,R30
                 ; 0000 02BB 
                 ; 0000 02BC // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 02BD TIMSK=0x05;
0007b6 e0e5      	LDI  R30,LOW(5)
0007b7 bfe7      	OUT  0x37,R30
                 ; 0000 02BE 
                 ; 0000 02BF ETIMSK=0x00;
0007b8 e0e0      	LDI  R30,LOW(0)
0007b9 93e0 007d 	STS  125,R30
                 ; 0000 02C0 
                 ; 0000 02C1 // USART0 initialization
                 ; 0000 02C2 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 02C3 // USART0 Receiver: On
                 ; 0000 02C4 // USART0 Transmitter: On
                 ; 0000 02C5 // USART0 Mode: Asynchronous
                 ; 0000 02C6 // USART0 Baud Rate: 9600
                 ; 0000 02C7 UCSR0A=0x00;
0007bb b9eb      	OUT  0xB,R30
                 ; 0000 02C8 UCSR0B=0x18;
0007bc e1e8      	LDI  R30,LOW(24)
0007bd b9ea      	OUT  0xA,R30
                 ; 0000 02C9 UCSR0C=0x06;
0007be e0e6      	LDI  R30,LOW(6)
0007bf 93e0 0095 	STS  149,R30
                 ; 0000 02CA UBRR0H=0x00;
0007c1 e0e0      	LDI  R30,LOW(0)
0007c2 93e0 0090 	STS  144,R30
                 ; 0000 02CB UBRR0L=0x67;
0007c4 e6e7      	LDI  R30,LOW(103)
0007c5 b9e9      	OUT  0x9,R30
                 ; 0000 02CC 
                 ; 0000 02CD // USART1 initialization
                 ; 0000 02CE // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 02CF // USART1 Receiver: On
                 ; 0000 02D0 // USART1 Transmitter: On
                 ; 0000 02D1 // USART1 Mode: Asynchronous
                 ; 0000 02D2 // USART1 Baud Rate: 9600
                 ; 0000 02D3 UCSR1A=0x00;
0007c6 e0e0      	LDI  R30,LOW(0)
0007c7 93e0 009b 	STS  155,R30
                 ; 0000 02D4 UCSR1B=0x18;
0007c9 e1e8      	LDI  R30,LOW(24)
0007ca 93e0 009a 	STS  154,R30
                 ; 0000 02D5 UCSR1C=0x06;
0007cc e0e6      	LDI  R30,LOW(6)
0007cd 93e0 009d 	STS  157,R30
                 ; 0000 02D6 UBRR1H=0x00;
0007cf e0e0      	LDI  R30,LOW(0)
0007d0 93e0 0098 	STS  152,R30
                 ; 0000 02D7 UBRR1L=0x67;
0007d2 e6e7      	LDI  R30,LOW(103)
0007d3 93e0 0099 	STS  153,R30
                 ; 0000 02D8 
                 ; 0000 02D9 // Analog Comparator initialization
                 ; 0000 02DA // Analog Comparator: Off
                 ; 0000 02DB // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 02DC ACSR=0x80;
0007d5 e8e0      	LDI  R30,LOW(128)
0007d6 b9e8      	OUT  0x8,R30
                 ; 0000 02DD SFIOR=0x00;
0007d7 e0e0      	LDI  R30,LOW(0)
0007d8 bde0      	OUT  0x20,R30
                 ; 0000 02DE 
                 ; 0000 02DF // ADC initialization
                 ; 0000 02E0 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 02E1 // ADC Voltage Reference: AREF pin
                 ; 0000 02E2 ADMUX=ADC_VREF_TYPE & 0xff;
0007d9 b9e7      	OUT  0x7,R30
                 ; 0000 02E3 ADCSRA=0x84;
0007da e8e4      	LDI  R30,LOW(132)
0007db b9e6      	OUT  0x6,R30
                 ; 0000 02E4 
                 ; 0000 02E5 // SPI initialization
                 ; 0000 02E6 // SPI Type: Master
                 ; 0000 02E7 // SPI Clock Rate: 4000.000 kHz
                 ; 0000 02E8 // SPI Clock Phase: Cycle Start
                 ; 0000 02E9 // SPI Clock Polarity: Low
                 ; 0000 02EA // SPI Data Order: MSB First
                 ; 0000 02EB SPCR=0x50;
0007dc e5e0      	LDI  R30,LOW(80)
0007dd b9ed      	OUT  0xD,R30
                 ; 0000 02EC SPSR=0x00;
0007de e0e0      	LDI  R30,LOW(0)
0007df b9ee      	OUT  0xE,R30
                 ; 0000 02ED 
                 ; 0000 02EE // TWI initialization
                 ; 0000 02EF // TWI disabled
                 ; 0000 02F0 TWCR=0x00;
0007e0 93e0 0074 	STS  116,R30
                 ; 0000 02F1 
                 ; 0000 02F2 // I2C Bus initialization
                 ; 0000 02F3 i2c_init();
0007e2 940e 0edf 	CALL _i2c_init
                 ; 0000 02F4 
                 ; 0000 02F5 // DS1307 Real Time Clock initialization
                 ; 0000 02F6 // Square wave output on pin SQW/OUT: Off
                 ; 0000 02F7 // SQW/OUT pin state: 0
                 ; 0000 02F8 rtc_init(0,0,0);
0007e4 e0e0      	LDI  R30,LOW(0)
0007e5 93ea      	ST   -Y,R30
0007e6 93ea      	ST   -Y,R30
0007e7 93ea      	ST   -Y,R30
0007e8 940e 0b4e 	CALL _rtc_init
                 ; 0000 02F9 
                 ; 0000 02FA 
                 ; 0000 02FB // Alphanumeric LCD initialization
                 ; 0000 02FC // Connections specified in the
                 ; 0000 02FD // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 02FE // RS - PORTC Bit 0
                 ; 0000 02FF // RD - PORTC Bit 1
                 ; 0000 0300 // EN - PORTC Bit 2
                 ; 0000 0301 // D4 - PORTC Bit 4
                 ; 0000 0302 // D5 - PORTC Bit 5
                 ; 0000 0303 // D6 - PORTC Bit 6
                 ; 0000 0304 // D7 - PORTC Bit 7
                 ; 0000 0305 // Characters/line: 16
                 ; 0000 0306 lcd_init(16);
0007ea e1e0      	LDI  R30,LOW(16)
0007eb 93ea      	ST   -Y,R30
0007ec 940e 0c30 	CALL _lcd_init
                 ; 0000 0307 
                 ; 0000 0308 // Global enable interrupts
                 ; 0000 0309 #asm("sei")
0007ee 9478      	sei
                 ; 0000 030A 
                 ; 0000 030B PORTE=0x0F;
0007ef e0ef      	LDI  R30,LOW(15)
0007f0 b9e3      	OUT  0x3,R30
                 ; 0000 030C DDRE=0x00;
0007f1 e0e0      	LDI  R30,LOW(0)
0007f2 b9e2      	OUT  0x2,R30
                 ; 0000 030D 
                 ; 0000 030E password = 1234;
0007f3 e0a0      	LDI  R26,LOW(_password)
0007f4 e0b0      	LDI  R27,HIGH(_password)
0007f5 ede2      	LDI  R30,LOW(1234)
0007f6 e0f4      	LDI  R31,HIGH(1234)
0007f7 940e 11d2 	CALL __EEPROMWRW
                 ; 0000 030F 
                 ; 0000 0310 
                 ; 0000 0311 while(1)
                 _0xD9:
                 ; 0000 0312 {
                 ; 0000 0313     Screen_sel();
0007f9 df0e      	RCALL _Screen_sel
                 ; 0000 0314 }
0007fa cffe      	RJMP _0xD9
                 ; 0000 0315 }
                 _0xDC:
0007fb cfff      	RJMP _0xDC
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
0007fc 931a      	ST   -Y,R17
0007fd 930a      	ST   -Y,R16
0007fe 81aa      	LDD  R26,Y+2
0007ff 81bb      	LDD  R27,Y+2+1
000800 9612      	ADIW R26,2
000801 940e 11a9 	CALL __GETW1P
000803 9730      	SBIW R30,0
000804 f129      	BREQ _0x2000010
000805 81aa      	LDD  R26,Y+2
000806 81bb      	LDD  R27,Y+2+1
000807 9614      	ADIW R26,4
000808 940e 11a9 	CALL __GETW1P
00080a 018f      	MOVW R16,R30
00080b 9730      	SBIW R30,0
00080c f061      	BREQ _0x2000012
                +
00080d 3002     +CPI R16 , LOW ( 2 )
00080e e0e0     +LDI R30 , HIGH ( 2 )
00080f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000810 f0c0      	BRLO _0x2000013
000811 01f8      	MOVW R30,R16
000812 9731      	SBIW R30,1
000813 018f      	MOVW R16,R30
                +
000814 81aa     +LDD R26 , Y + 2
000815 81bb     +LDD R27 , Y + 2 + 1
000816 9614     +ADIW R26 , 4
000817 93ed     +ST X + , R30
000818 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000819 81aa      	LDD  R26,Y+2
00081a 81bb      	LDD  R27,Y+2+1
00081b 9612      	ADIW R26,2
00081c 940e 0d1a 	CALL SUBOPT_0x16
00081e 9731      	SBIW R30,1
00081f 81ac      	LDD  R26,Y+4
000820 83a0      	STD  Z+0,R26
000821 81aa      	LDD  R26,Y+2
000822 81bb      	LDD  R27,Y+2+1
000823 940e 11a9 	CALL __GETW1P
000825 23ff      	TST  R31
000826 f012      	BRMI _0x2000014
000827 940e 0d1a 	CALL SUBOPT_0x16
                 _0x2000014:
                 _0x2000013:
000829 c006      	RJMP _0x2000015
                 _0x2000010:
00082a 81aa      	LDD  R26,Y+2
00082b 81bb      	LDD  R27,Y+2+1
00082c efef      	LDI  R30,LOW(65535)
00082d efff      	LDI  R31,HIGH(65535)
00082e 93ed      	ST   X+,R30
00082f 93fc      	ST   X,R31
                 _0x2000015:
                 _0x212000A:
000830 8119      	LDD  R17,Y+1
000831 8108      	LDD  R16,Y+0
000832 9625      	ADIW R28,5
000833 9508      	RET
                 __print_G100:
000834 9726      	SBIW R28,6
000835 940e 11fa 	CALL __SAVELOCR6
000837 e010      	LDI  R17,0
000838 85ac      	LDD  R26,Y+12
000839 85bd      	LDD  R27,Y+12+1
00083a e0e0      	LDI  R30,LOW(0)
00083b e0f0      	LDI  R31,HIGH(0)
00083c 93ed      	ST   X+,R30
00083d 93fc      	ST   X,R31
                 _0x2000016:
00083e 89ea      	LDD  R30,Y+18
00083f 89fb      	LDD  R31,Y+18+1
000840 9631      	ADIW R30,1
000841 8bea      	STD  Y+18,R30
000842 8bfb      	STD  Y+18+1,R31
000843 9731      	SBIW R30,1
000844 91e4      	LPM  R30,Z
000845 2f2e      	MOV  R18,R30
000846 30e0      	CPI  R30,0
000847 f411      	BRNE PC+3
000848 940c 0961 	JMP _0x2000018
00084a 2fe1      	MOV  R30,R17
00084b 30e0      	CPI  R30,0
00084c f439      	BRNE _0x200001C
00084d 3225      	CPI  R18,37
00084e f411      	BRNE _0x200001D
00084f e011      	LDI  R17,LOW(1)
000850 c002      	RJMP _0x200001E
                 _0x200001D:
000851 940e 0e13 	CALL SUBOPT_0x3A
                 _0x200001E:
000853 c10c      	RJMP _0x200001B
                 _0x200001C:
000854 30e1      	CPI  R30,LOW(0x1)
000855 f4a9      	BRNE _0x200001F
000856 3225      	CPI  R18,37
000857 f419      	BRNE _0x2000020
000858 940e 0e13 	CALL SUBOPT_0x3A
00085a c104      	RJMP _0x20000C9
                 _0x2000020:
00085b e012      	LDI  R17,LOW(2)
00085c e040      	LDI  R20,LOW(0)
00085d e000      	LDI  R16,LOW(0)
00085e 322d      	CPI  R18,45
00085f f411      	BRNE _0x2000021
000860 e001      	LDI  R16,LOW(1)
000861 c0fe      	RJMP _0x200001B
                 _0x2000021:
000862 322b      	CPI  R18,43
000863 f411      	BRNE _0x2000022
000864 e24b      	LDI  R20,LOW(43)
000865 c0fa      	RJMP _0x200001B
                 _0x2000022:
000866 3220      	CPI  R18,32
000867 f411      	BRNE _0x2000023
000868 e240      	LDI  R20,LOW(32)
000869 c0f6      	RJMP _0x200001B
                 _0x2000023:
00086a c002      	RJMP _0x2000024
                 _0x200001F:
00086b 30e2      	CPI  R30,LOW(0x2)
00086c f439      	BRNE _0x2000025
                 _0x2000024:
00086d e050      	LDI  R21,LOW(0)
00086e e013      	LDI  R17,LOW(3)
00086f 3320      	CPI  R18,48
000870 f411      	BRNE _0x2000026
000871 6800      	ORI  R16,LOW(128)
000872 c0ed      	RJMP _0x200001B
                 _0x2000026:
000873 c004      	RJMP _0x2000027
                 _0x2000025:
000874 30e3      	CPI  R30,LOW(0x3)
000875 f011      	BREQ PC+3
000876 940c 0960 	JMP _0x200001B
                 _0x2000027:
000878 3320      	CPI  R18,48
000879 f010      	BRLO _0x200002A
00087a 332a      	CPI  R18,58
00087b f008      	BRLO _0x200002B
                 _0x200002A:
00087c c007      	RJMP _0x2000029
                 _0x200002B:
00087d e0aa      	LDI  R26,LOW(10)
00087e 9f5a      	MUL  R21,R26
00087f 2d50      	MOV  R21,R0
000880 2fe2      	MOV  R30,R18
000881 53e0      	SUBI R30,LOW(48)
000882 0f5e      	ADD  R21,R30
000883 c0dc      	RJMP _0x200001B
                 _0x2000029:
000884 2fe2      	MOV  R30,R18
000885 36e3      	CPI  R30,LOW(0x63)
000886 f449      	BRNE _0x200002F
000887 940e 0e1c 	CALL SUBOPT_0x3B
000889 89e8      	LDD  R30,Y+16
00088a 89f9      	LDD  R31,Y+16+1
00088b 81a4      	LDD  R26,Z+4
00088c 93aa      	ST   -Y,R26
00088d 940e 0e22 	CALL SUBOPT_0x3C
00088f c0cf      	RJMP _0x2000030
                 _0x200002F:
000890 37e3      	CPI  R30,LOW(0x73)
000891 f441      	BRNE _0x2000032
000892 940e 0e1c 	CALL SUBOPT_0x3B
000894 940e 0e2a 	CALL SUBOPT_0x3D
000896 940e 0c64 	CALL _strlen
000898 2f1e      	MOV  R17,R30
000899 c00a      	RJMP _0x2000033
                 _0x2000032:
00089a 37e0      	CPI  R30,LOW(0x70)
00089b f461      	BRNE _0x2000035
00089c 940e 0e1c 	CALL SUBOPT_0x3B
00089e 940e 0e2a 	CALL SUBOPT_0x3D
0008a0 940e 0c6e 	CALL _strlenf
0008a2 2f1e      	MOV  R17,R30
0008a3 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0008a4 6002      	ORI  R16,LOW(2)
0008a5 770f      	ANDI R16,LOW(127)
0008a6 e030      	LDI  R19,LOW(0)
0008a7 c035      	RJMP _0x2000036
                 _0x2000035:
0008a8 36e4      	CPI  R30,LOW(0x64)
0008a9 f011      	BREQ _0x2000039
0008aa 36e9      	CPI  R30,LOW(0x69)
0008ab f411      	BRNE _0x200003A
                 _0x2000039:
0008ac 6004      	ORI  R16,LOW(4)
0008ad c002      	RJMP _0x200003B
                 _0x200003A:
0008ae 37e5      	CPI  R30,LOW(0x75)
0008af f431      	BRNE _0x200003C
                 _0x200003B:
0008b0 e8ec      	LDI  R30,LOW(_tbl10_G100*2)
0008b1 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0008b2 83ee      	STD  Y+6,R30
0008b3 83ff      	STD  Y+6+1,R31
0008b4 e015      	LDI  R17,LOW(5)
0008b5 c00d      	RJMP _0x200003D
                 _0x200003C:
0008b6 35e8      	CPI  R30,LOW(0x58)
0008b7 f411      	BRNE _0x200003F
0008b8 6008      	ORI  R16,LOW(8)
0008b9 c004      	RJMP _0x2000040
                 _0x200003F:
0008ba 37e8      	CPI  R30,LOW(0x78)
0008bb f011      	BREQ PC+3
0008bc 940c 095f 	JMP _0x2000071
                 _0x2000040:
0008be e9e6      	LDI  R30,LOW(_tbl16_G100*2)
0008bf e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0008c0 83ee      	STD  Y+6,R30
0008c1 83ff      	STD  Y+6+1,R31
0008c2 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0008c3 ff02      	SBRS R16,2
0008c4 c014      	RJMP _0x2000042
0008c5 940e 0e1c 	CALL SUBOPT_0x3B
0008c7 940e 0e34 	CALL SUBOPT_0x3E
0008c9 85ab      	LDD  R26,Y+11
0008ca 23aa      	TST  R26
0008cb f43a      	BRPL _0x2000043
0008cc 85ea      	LDD  R30,Y+10
0008cd 85fb      	LDD  R31,Y+10+1
0008ce 940e 1110 	CALL __ANEGW1
0008d0 87ea      	STD  Y+10,R30
0008d1 87fb      	STD  Y+10+1,R31
0008d2 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0008d3 3040      	CPI  R20,0
0008d4 f011      	BREQ _0x2000044
0008d5 5f1f      	SUBI R17,-LOW(1)
0008d6 c001      	RJMP _0x2000045
                 _0x2000044:
0008d7 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0008d8 c004      	RJMP _0x2000046
                 _0x2000042:
0008d9 940e 0e1c 	CALL SUBOPT_0x3B
0008db 940e 0e34 	CALL SUBOPT_0x3E
                 _0x2000046:
                 _0x2000036:
0008dd fd00      	SBRC R16,0
0008de c011      	RJMP _0x2000047
                 _0x2000048:
0008df 1715      	CP   R17,R21
0008e0 f478      	BRSH _0x200004A
0008e1 ff07      	SBRS R16,7
0008e2 c008      	RJMP _0x200004B
0008e3 ff02      	SBRS R16,2
0008e4 c004      	RJMP _0x200004C
0008e5 7f0b      	ANDI R16,LOW(251)
0008e6 2f24      	MOV  R18,R20
0008e7 5011      	SUBI R17,LOW(1)
0008e8 c001      	RJMP _0x200004D
                 _0x200004C:
0008e9 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0008ea c001      	RJMP _0x200004E
                 _0x200004B:
0008eb e220      	LDI  R18,LOW(32)
                 _0x200004E:
0008ec 940e 0e13 	CALL SUBOPT_0x3A
0008ee 5051      	SUBI R21,LOW(1)
0008ef cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0008f0 2f31      	MOV  R19,R17
0008f1 ff01      	SBRS R16,1
0008f2 c017      	RJMP _0x200004F
                 _0x2000050:
0008f3 3030      	CPI  R19,0
0008f4 f0a1      	BREQ _0x2000052
0008f5 ff03      	SBRS R16,3
0008f6 c006      	RJMP _0x2000053
0008f7 81ee      	LDD  R30,Y+6
0008f8 81ff      	LDD  R31,Y+6+1
0008f9 9125      	LPM  R18,Z+
0008fa 83ee      	STD  Y+6,R30
0008fb 83ff      	STD  Y+6+1,R31
0008fc c005      	RJMP _0x2000054
                 _0x2000053:
0008fd 81ae      	LDD  R26,Y+6
0008fe 81bf      	LDD  R27,Y+6+1
0008ff 912d      	LD   R18,X+
000900 83ae      	STD  Y+6,R26
000901 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000902 940e 0e13 	CALL SUBOPT_0x3A
000904 3050      	CPI  R21,0
000905 f009      	BREQ _0x2000055
000906 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000907 5031      	SUBI R19,LOW(1)
000908 cfea      	RJMP _0x2000050
                 _0x2000052:
000909 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00090a e320      	LDI  R18,LOW(48)
00090b 81ee      	LDD  R30,Y+6
00090c 81ff      	LDD  R31,Y+6+1
00090d 940e 11b2 	CALL __GETW1PF
00090f 87e8      	STD  Y+8,R30
000910 87f9      	STD  Y+8+1,R31
000911 81ee      	LDD  R30,Y+6
000912 81ff      	LDD  R31,Y+6+1
000913 9632      	ADIW R30,2
000914 83ee      	STD  Y+6,R30
000915 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000916 85e8      	LDD  R30,Y+8
000917 85f9      	LDD  R31,Y+8+1
000918 85aa      	LDD  R26,Y+10
000919 85bb      	LDD  R27,Y+10+1
00091a 17ae      	CP   R26,R30
00091b 07bf      	CPC  R27,R31
00091c f050      	BRLO _0x200005C
00091d 5f2f      	SUBI R18,-LOW(1)
00091e 85a8      	LDD  R26,Y+8
00091f 85b9      	LDD  R27,Y+8+1
000920 85ea      	LDD  R30,Y+10
000921 85fb      	LDD  R31,Y+10+1
000922 1bea      	SUB  R30,R26
000923 0bfb      	SBC  R31,R27
000924 87ea      	STD  Y+10,R30
000925 87fb      	STD  Y+10+1,R31
000926 cfef      	RJMP _0x200005A
                 _0x200005C:
000927 332a      	CPI  R18,58
000928 f028      	BRLO _0x200005D
000929 ff03      	SBRS R16,3
00092a c002      	RJMP _0x200005E
00092b 5f29      	SUBI R18,-LOW(7)
00092c c001      	RJMP _0x200005F
                 _0x200005E:
00092d 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00092e fd04      	SBRC R16,4
00092f c01a      	RJMP _0x2000061
000930 3321      	CPI  R18,49
000931 f420      	BRSH _0x2000063
000932 85a8      	LDD  R26,Y+8
000933 85b9      	LDD  R27,Y+8+1
000934 9711      	SBIW R26,1
000935 f409      	BRNE _0x2000062
                 _0x2000063:
000936 c009      	RJMP _0x20000CA
                 _0x2000062:
000937 1753      	CP   R21,R19
000938 f010      	BRLO _0x2000067
000939 ff00      	SBRS R16,0
00093a c001      	RJMP _0x2000068
                 _0x2000067:
00093b c013      	RJMP _0x2000066
                 _0x2000068:
00093c e220      	LDI  R18,LOW(32)
00093d ff07      	SBRS R16,7
00093e c00b      	RJMP _0x2000069
00093f e320      	LDI  R18,LOW(48)
                 _0x20000CA:
000940 6100      	ORI  R16,LOW(16)
000941 ff02      	SBRS R16,2
000942 c007      	RJMP _0x200006A
000943 7f0b      	ANDI R16,LOW(251)
000944 934a      	ST   -Y,R20
000945 940e 0e22 	CALL SUBOPT_0x3C
000947 3050      	CPI  R21,0
000948 f009      	BREQ _0x200006B
000949 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00094a 940e 0e13 	CALL SUBOPT_0x3A
00094c 3050      	CPI  R21,0
00094d f009      	BREQ _0x200006C
00094e 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00094f 5031      	SUBI R19,LOW(1)
000950 85a8      	LDD  R26,Y+8
000951 85b9      	LDD  R27,Y+8+1
000952 9712      	SBIW R26,2
000953 f008      	BRLO _0x2000059
000954 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000955 ff00      	SBRS R16,0
000956 c008      	RJMP _0x200006D
                 _0x200006E:
000957 3050      	CPI  R21,0
000958 f031      	BREQ _0x2000070
000959 5051      	SUBI R21,LOW(1)
00095a e2e0      	LDI  R30,LOW(32)
00095b 93ea      	ST   -Y,R30
00095c 940e 0e22 	CALL SUBOPT_0x3C
00095e cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
00095f e010      	LDI  R17,LOW(0)
                 _0x200001B:
000960 cedd      	RJMP _0x2000016
                 _0x2000018:
000961 85ac      	LDD  R26,Y+12
000962 85bd      	LDD  R27,Y+12+1
000963 940e 11a9 	CALL __GETW1P
000965 940e 1201 	CALL __LOADLOCR6
000967 9664      	ADIW R28,20
000968 9508      	RET
                 _sprintf:
000969 92ff      	PUSH R15
00096a 2ef8      	MOV  R15,R24
00096b 9726      	SBIW R28,6
00096c 940e 11fc 	CALL __SAVELOCR4
00096e 940e 0e3c 	CALL SUBOPT_0x3F
000970 9730      	SBIW R30,0
000971 f419      	BRNE _0x2000072
000972 efef      	LDI  R30,LOW(65535)
000973 efff      	LDI  R31,HIGH(65535)
000974 c025      	RJMP _0x2120009
                 _0x2000072:
000975 01de      	MOVW R26,R28
000976 9616      	ADIW R26,6
000977 940e 1107 	CALL __ADDW2R15
000979 018d      	MOVW R16,R26
00097a 940e 0e3c 	CALL SUBOPT_0x3F
00097c 83ee      	STD  Y+6,R30
00097d 83ff      	STD  Y+6+1,R31
00097e e0e0      	LDI  R30,LOW(0)
00097f 87e8      	STD  Y+8,R30
000980 87e9      	STD  Y+8+1,R30
000981 01de      	MOVW R26,R28
000982 961a      	ADIW R26,10
000983 940e 1107 	CALL __ADDW2R15
000985 940e 11a9 	CALL __GETW1P
000987 93fa      	ST   -Y,R31
000988 93ea      	ST   -Y,R30
000989 931a      	ST   -Y,R17
00098a 930a      	ST   -Y,R16
00098b efec      	LDI  R30,LOW(_put_buff_G100)
00098c e0f7      	LDI  R31,HIGH(_put_buff_G100)
00098d 93fa      	ST   -Y,R31
00098e 93ea      	ST   -Y,R30
00098f 01fe      	MOVW R30,R28
000990 963a      	ADIW R30,10
000991 93fa      	ST   -Y,R31
000992 93ea      	ST   -Y,R30
000993 dea0      	RCALL __print_G100
000994 019f      	MOVW R18,R30
000995 81ae      	LDD  R26,Y+6
000996 81bf      	LDD  R27,Y+6+1
000997 e0e0      	LDI  R30,LOW(0)
000998 93ec      	ST   X,R30
000999 01f9      	MOVW R30,R18
                 _0x2120009:
00099a 940e 1203 	CALL __LOADLOCR4
00099c 962a      	ADIW R28,10
00099d 90ff      	POP  R15
00099e 9508      	RET
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
00099f 817b         ldd  r23,y+3
0009a0 816a         ldd  r22,y+2
0009a1 81f9         ldd  r31,y+1
0009a2 81e8         ld   r30,y
0009a3 fb77         bst  r23,7
0009a4 0f77         lsl  r23
0009a5 fd67         sbrc r22,7
0009a6 6071         sbr  r23,1
0009a7 2f97         mov  r25,r23
0009a8 579e         subi r25,0x7e
0009a9 f081         breq __ftrunc0
0009aa f078         brcs __ftrunc0
0009ab 3198         cpi  r25,24
0009ac f490         brsh __ftrunc1
0009ad 27aa         clr  r26
0009ae 27bb         clr  r27
0009af 2788         clr  r24
                 __ftrunc2:
0009b0 9408         sec
0009b1 9587         ror  r24
0009b2 95b7         ror  r27
0009b3 95a7         ror  r26
0009b4 959a         dec  r25
0009b5 f7d1         brne __ftrunc2
0009b6 23ea         and  r30,r26
0009b7 23fb         and  r31,r27
0009b8 2368         and  r22,r24
0009b9 c005         rjmp __ftrunc1
                 __ftrunc0:
0009ba 94e8         clt
0009bb 2777         clr  r23
0009bc 27ee         clr  r30
0009bd 27ff         clr  r31
0009be 2766         clr  r22
                 __ftrunc1:
0009bf 776f         cbr  r22,0x80
0009c0 9576         lsr  r23
0009c1 f408         brcc __ftrunc3
0009c2 6860         sbr  r22,0x80
                 __ftrunc3:
0009c3 f977         bld  r23,7
0009c4 91a9         ld   r26,y+
0009c5 91b9         ld   r27,y+
0009c6 9189         ld   r24,y+
0009c7 9199         ld   r25,y+
0009c8 17ea         cp   r30,r26
0009c9 07fb         cpc  r31,r27
0009ca 0768         cpc  r22,r24
0009cb 0779         cpc  r23,r25
0009cc fb97         bst  r25,7
0009cd 9508         ret
                 _floor:
0009ce 940e 0e43 	CALL SUBOPT_0x40
0009d0 940e 11c0 	CALL __PUTPARD1
0009d2 940e 099f 	CALL _ftrunc
0009d4 940e 11bb 	CALL __PUTD1S0
0009d6 f419          brne __floor1
                 __floor0:
0009d7 940e 0e43 	CALL SUBOPT_0x40
0009d9 c005      	RJMP _0x2120008
                 __floor1:
0009da f7e6          brtc __floor0
0009db 940e 0e43 	CALL SUBOPT_0x40
0009dd 940e 0e46 	CALL SUBOPT_0x41
                 _0x2120008:
0009df 9624      	ADIW R28,4
0009e0 9508      	RET
                 _log:
0009e1 9724      	SBIW R28,4
0009e2 931a      	ST   -Y,R17
0009e3 930a      	ST   -Y,R16
0009e4 940e 0e4d 	CALL SUBOPT_0x42
0009e6 940e 11ef 	CALL __CPD02
0009e8 f02c      	BRLT _0x204000C
                +
0009e9 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
0009ea efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
0009eb e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
0009ec ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0009ed c077      	RJMP _0x2120007
                 _0x204000C:
0009ee 940e 0e52 	CALL SUBOPT_0x43
0009f0 940e 11c0 	CALL __PUTPARD1
0009f2 b7ed      	IN   R30,SPL
0009f3 b7fe      	IN   R31,SPH
0009f4 9731      	SBIW R30,1
0009f5 93fa      	ST   -Y,R31
0009f6 93ea      	ST   -Y,R30
0009f7 931f      	PUSH R17
0009f8 930f      	PUSH R16
0009f9 940e 0f3d 	CALL _frexp
0009fb 910f      	POP  R16
0009fc 911f      	POP  R17
0009fd 940e 0e57 	CALL SUBOPT_0x44
0009ff 940e 0e4d 	CALL SUBOPT_0x42
                +
000a01 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
000a02 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
000a03 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000a04 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000a05 940e 10e7 	CALL __CMPF12
000a07 f440      	BRSH _0x204000D
000a08 940e 0e5c 	CALL SUBOPT_0x45
000a0a 940e 1004 	CALL __ADDF12
000a0c 940e 0e57 	CALL SUBOPT_0x44
                +
000a0e 5001     +SUBI R16 , LOW ( 1 )
000a0f 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x204000D:
000a10 940e 0e52 	CALL SUBOPT_0x43
000a12 940e 0e46 	CALL SUBOPT_0x41
000a14 937f      	PUSH R23
000a15 936f      	PUSH R22
000a16 93ff      	PUSH R31
000a17 93ef      	PUSH R30
000a18 940e 0e52 	CALL SUBOPT_0x43
                +
000a1a e0a0     +LDI R26 , LOW ( 0x3F800000 )
000a1b e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000a1c e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000a1d e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000a1e 940e 1004 	CALL __ADDF12
000a20 91af      	POP  R26
000a21 91bf      	POP  R27
000a22 918f      	POP  R24
000a23 919f      	POP  R25
000a24 940e 10a2 	CALL __DIVF21
000a26 940e 0e57 	CALL SUBOPT_0x44
000a28 940e 0e5c 	CALL SUBOPT_0x45
000a2a 940e 0e5e 	CALL SUBOPT_0x46
                +
000a2c e2a6     +LDI R26 , LOW ( 0x3F654226 )
000a2d e4b2     +LDI R27 , HIGH ( 0x3F654226 )
000a2e e685     +LDI R24 , BYTE3 ( 0x3F654226 )
000a2f e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
000a30 940e 1054 	CALL __MULF12
000a32 01df      	MOVW R26,R30
000a33 01cb      	MOVW R24,R22
                +
000a34 e4ee     +LDI R30 , LOW ( 0x4054114E )
000a35 e1f1     +LDI R31 , HIGH ( 0x4054114E )
000a36 e564     +LDI R22 , BYTE3 ( 0x4054114E )
000a37 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
000a38 940e 0e65 	CALL SUBOPT_0x47
000a3a 940e 0e4d 	CALL SUBOPT_0x42
000a3c 940e 1054 	CALL __MULF12
000a3e 937f      	PUSH R23
000a3f 936f      	PUSH R22
000a40 93ff      	PUSH R31
000a41 93ef      	PUSH R30
000a42 940e 0e6a 	CALL SUBOPT_0x48
                +
000a44 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
000a45 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
000a46 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
000a47 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
000a48 940e 0ffd 	CALL __SUBF12
000a4a 91af      	POP  R26
000a4b 91bf      	POP  R27
000a4c 918f      	POP  R24
000a4d 919f      	POP  R25
000a4e 940e 10a2 	CALL __DIVF21
000a50 937f      	PUSH R23
000a51 936f      	PUSH R22
000a52 93ff      	PUSH R31
000a53 93ef      	PUSH R30
000a54 01f8      	MOVW R30,R16
000a55 940e 112a 	CALL __CWD1
000a57 940e 0fca 	CALL __CDF1
                +
000a59 e1a8     +LDI R26 , LOW ( 0x3F317218 )
000a5a e7b2     +LDI R27 , HIGH ( 0x3F317218 )
000a5b e381     +LDI R24 , BYTE3 ( 0x3F317218 )
000a5c e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
000a5d 940e 1054 	CALL __MULF12
000a5f 91af      	POP  R26
000a60 91bf      	POP  R27
000a61 918f      	POP  R24
000a62 919f      	POP  R25
000a63 940e 1004 	CALL __ADDF12
                 _0x2120007:
000a65 8119      	LDD  R17,Y+1
000a66 8108      	LDD  R16,Y+0
000a67 962a      	ADIW R28,10
000a68 9508      	RET
                 _exp:
000a69 9728      	SBIW R28,8
000a6a 931a      	ST   -Y,R17
000a6b 930a      	ST   -Y,R16
000a6c 940e 0e6f 	CALL SUBOPT_0x49
                +
000a6e e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
000a6f eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
000a70 ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
000a71 ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
000a72 940e 10e7 	CALL __CMPF12
000a74 f418      	BRSH _0x204000F
000a75 940e 0e74 	CALL SUBOPT_0x4A
000a77 c088      	RJMP _0x2120006
                 _0x204000F:
                +
000a78 85ea     +LDD R30 , Y + 10
000a79 85fb     +LDD R31 , Y + 10 + 1
000a7a 856c     +LDD R22 , Y + 10 + 2
000a7b 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000a7c 940e 11eb 	CALL __CPD10
000a7e f429      	BRNE _0x2040010
                +
000a7f e0e0     +LDI R30 , LOW ( 0x3F800000 )
000a80 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000a81 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000a82 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000a83 c07c      	RJMP _0x2120006
                 _0x2040010:
000a84 940e 0e6f 	CALL SUBOPT_0x49
                +
000a86 e1e8     +LDI R30 , LOW ( 0x42B17218 )
000a87 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000a88 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000a89 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
000a8a 940e 10e7 	CALL __CMPF12
000a8c f009      	BREQ PC+2
000a8d f410      	BRCC PC+3
000a8e 940c 0a95 	JMP  _0x2040011
                +
000a90 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
000a91 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
000a92 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
000a93 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
000a94 c06b      	RJMP _0x2120006
                 _0x2040011:
000a95 940e 0e6f 	CALL SUBOPT_0x49
                +
000a97 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000a98 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000a99 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000a9a e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000a9b 940e 1054 	CALL __MULF12
                +
000a9d 87ea     +STD Y + 10 , R30
000a9e 87fb     +STD Y + 10 + 1 , R31
000a9f 876c     +STD Y + 10 + 2 , R22
000aa0 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000aa1 940e 11c0 	CALL __PUTPARD1
000aa3 df2a      	RCALL _floor
000aa4 940e 0f93 	CALL __CFD1
000aa6 018f      	MOVW R16,R30
000aa7 01f8      	MOVW R30,R16
000aa8 940e 0e6f 	CALL SUBOPT_0x49
000aaa 940e 112a 	CALL __CWD1
000aac 940e 0fca 	CALL __CDF1
000aae 940e 0e65 	CALL SUBOPT_0x47
000ab0 01df      	MOVW R26,R30
000ab1 01cb      	MOVW R24,R22
                +
000ab2 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000ab3 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000ab4 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000ab5 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000ab6 940e 0e65 	CALL SUBOPT_0x47
000ab8 940e 0e57 	CALL SUBOPT_0x44
000aba 940e 0e5c 	CALL SUBOPT_0x45
000abc 940e 0e5e 	CALL SUBOPT_0x46
                +
000abe e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
000abf e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
000ac0 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
000ac1 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
000ac2 940e 1054 	CALL __MULF12
                +
000ac4 eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
000ac5 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
000ac6 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
000ac7 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
000ac8 940e 1004 	CALL __ADDF12
000aca 940e 0e4d 	CALL SUBOPT_0x42
000acc 940e 1054 	CALL __MULF12
000ace 940e 0e57 	CALL SUBOPT_0x44
000ad0 940e 0e6a 	CALL SUBOPT_0x48
                +
000ad2 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
000ad3 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
000ad4 ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
000ad5 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
000ad6 940e 1004 	CALL __ADDF12
                +
000ad8 83ea     +STD Y + 2 , R30
000ad9 83fb     +STD Y + 2 + 1 , R31
000ada 836c     +STD Y + 2 + 2 , R22
000adb 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000adc 940e 0e52 	CALL SUBOPT_0x43
                +
000ade 81aa     +LDD R26 , Y + 2
000adf 81bb     +LDD R27 , Y + 2 + 1
000ae0 818c     +LDD R24 , Y + 2 + 2
000ae1 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000ae2 940e 1004 	CALL __ADDF12
                +
000ae4 efa3     +LDI R26 , LOW ( 0x3FB504F3 )
000ae5 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
000ae6 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
000ae7 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
000ae8 940e 1054 	CALL __MULF12
000aea 937f      	PUSH R23
000aeb 936f      	PUSH R22
000aec 93ff      	PUSH R31
000aed 93ef      	PUSH R30
000aee 940e 0e4d 	CALL SUBOPT_0x42
000af0 940e 0e6a 	CALL SUBOPT_0x48
000af2 940e 0ffd 	CALL __SUBF12
000af4 91af      	POP  R26
000af5 91bf      	POP  R27
000af6 918f      	POP  R24
000af7 919f      	POP  R25
000af8 940e 10a2 	CALL __DIVF21
000afa 940e 11c0 	CALL __PUTPARD1
000afc 931a      	ST   -Y,R17
000afd 930a      	ST   -Y,R16
000afe 940e 0f50 	CALL _ldexp
                 _0x2120006:
000b00 8119      	LDD  R17,Y+1
000b01 8108      	LDD  R16,Y+0
000b02 962e      	ADIW R28,14
000b03 9508      	RET
                 _pow:
000b04 9724      	SBIW R28,4
000b05 940e 0e79 	CALL SUBOPT_0x4B
000b07 940e 11eb 	CALL __CPD10
000b09 f419      	BRNE _0x2040012
000b0a 940e 0e74 	CALL SUBOPT_0x4A
000b0c c03f      	RJMP _0x2120005
                 _0x2040012:
                +
000b0d 85a8     +LDD R26 , Y + 8
000b0e 85b9     +LDD R27 , Y + 8 + 1
000b0f 858a     +LDD R24 , Y + 8 + 2
000b10 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000b11 940e 11ef 	CALL __CPD02
000b13 f47c      	BRGE _0x2040013
000b14 940e 0e7e 	CALL SUBOPT_0x4C
000b16 940e 11eb 	CALL __CPD10
000b18 f429      	BRNE _0x2040014
                +
000b19 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000b1a e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000b1b e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000b1c e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000b1d c02e      	RJMP _0x2120005
                 _0x2040014:
000b1e 940e 0e79 	CALL SUBOPT_0x4B
000b20 940e 0e83 	CALL SUBOPT_0x4D
000b22 c029      	RJMP _0x2120005
                 _0x2040013:
000b23 940e 0e7e 	CALL SUBOPT_0x4C
000b25 01de      	MOVW R26,R28
000b26 940e 0f93 	CALL __CFD1
000b28 940e 11ad 	CALL __PUTDP1
000b2a 940e 0e43 	CALL SUBOPT_0x40
000b2c 940e 0fca 	CALL __CDF1
000b2e 01df      	MOVW R26,R30
000b2f 01cb      	MOVW R24,R22
000b30 940e 0e7e 	CALL SUBOPT_0x4C
000b32 940e 11f5 	CALL __CPD12
000b34 f019      	BREQ _0x2040015
000b35 940e 0e74 	CALL SUBOPT_0x4A
000b37 c014      	RJMP _0x2120005
                 _0x2040015:
000b38 940e 0e79 	CALL SUBOPT_0x4B
000b3a 940e 0f5e 	CALL __ANEGF1
000b3c 940e 0e83 	CALL SUBOPT_0x4D
                +
000b3e 87e8     +STD Y + 8 , R30
000b3f 87f9     +STD Y + 8 + 1 , R31
000b40 876a     +STD Y + 8 + 2 , R22
000b41 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000b42 81e8      	LD   R30,Y
000b43 70e1      	ANDI R30,LOW(0x1)
000b44 f419      	BRNE _0x2040016
000b45 940e 0e79 	CALL SUBOPT_0x4B
000b47 c004      	RJMP _0x2120005
                 _0x2040016:
000b48 940e 0e79 	CALL SUBOPT_0x4B
000b4a 940e 0f5e 	CALL __ANEGF1
                 _0x2120005:
000b4c 962c      	ADIW R28,12
000b4d 9508      	RET
                 
                 	.CSEG
                 _rtc_init:
000b4e 81ea      	LDD  R30,Y+2
000b4f 70e3      	ANDI R30,LOW(0x3)
000b50 83ea      	STD  Y+2,R30
000b51 81e9      	LDD  R30,Y+1
000b52 30e0      	CPI  R30,0
000b53 f019      	BREQ _0x2060003
000b54 81ea      	LDD  R30,Y+2
000b55 61e0      	ORI  R30,0x10
000b56 83ea      	STD  Y+2,R30
                 _0x2060003:
000b57 81e8      	LD   R30,Y
000b58 30e0      	CPI  R30,0
000b59 f019      	BREQ _0x2060004
000b5a 81ea      	LDD  R30,Y+2
000b5b 68e0      	ORI  R30,0x80
000b5c 83ea      	STD  Y+2,R30
                 _0x2060004:
000b5d 940e 0e91 	CALL SUBOPT_0x4E
000b5f e0e7      	LDI  R30,LOW(7)
000b60 940e 0e97 	CALL SUBOPT_0x4F
000b62 940e 0e9d 	CALL SUBOPT_0x50
000b64 c0c9      	RJMP _0x2120003
                 _rtc_get_time:
000b65 940e 0e91 	CALL SUBOPT_0x4E
000b67 e0e0      	LDI  R30,LOW(0)
000b68 940e 0ea1 	CALL SUBOPT_0x51
000b6a 81a8      	LD   R26,Y
000b6b 81b9      	LDD  R27,Y+1
000b6c 940e 0eb1 	CALL SUBOPT_0x52
000b6e 81ac      	LDD  R26,Y+4
000b6f 81bd      	LDD  R27,Y+4+1
000b70 c01a      	RJMP _0x2120004
                 _rtc_set_time:
000b71 940e 0e91 	CALL SUBOPT_0x4E
000b73 e0e0      	LDI  R30,LOW(0)
000b74 940e 0ec3 	CALL SUBOPT_0x53
000b76 940e 0ecb 	CALL SUBOPT_0x54
000b78 940e 0e97 	CALL SUBOPT_0x4F
000b7a 940e 0c85 	CALL _bin2bcd
000b7c 93ea      	ST   -Y,R30
000b7d 940e 0e9d 	CALL SUBOPT_0x50
000b7f c0ae      	RJMP _0x2120003
                 _rtc_get_date:
000b80 940e 0e91 	CALL SUBOPT_0x4E
000b82 e0e4      	LDI  R30,LOW(4)
000b83 940e 0ea1 	CALL SUBOPT_0x51
000b85 81ac      	LDD  R26,Y+4
000b86 81bd      	LDD  R27,Y+4+1
000b87 940e 0eb1 	CALL SUBOPT_0x52
000b89 81a8      	LD   R26,Y
000b8a 81b9      	LDD  R27,Y+1
                 _0x2120004:
000b8b 93ec      	ST   X,R30
000b8c 940e 0ef3 	CALL _i2c_stop
000b8e 9626      	ADIW R28,6
000b8f 9508      	RET
                 _rtc_set_date:
000b90 940e 0e91 	CALL SUBOPT_0x4E
000b92 e0e4      	LDI  R30,LOW(4)
000b93 940e 0e97 	CALL SUBOPT_0x4F
000b95 940e 0c85 	CALL _bin2bcd
000b97 93ea      	ST   -Y,R30
000b98 940e 0ecb 	CALL SUBOPT_0x54
000b9a 940e 0ec3 	CALL SUBOPT_0x53
000b9c 940e 0e9d 	CALL SUBOPT_0x50
000b9e c08f      	RJMP _0x2120003
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G104:
000b9f 81e8      	LD   R30,Y
000ba0 71e0      	ANDI R30,LOW(0x10)
000ba1 f011      	BREQ _0x2080004
000ba2 9aac      	SBI  0x15,4
000ba3 c001      	RJMP _0x2080005
                 _0x2080004:
000ba4 98ac      	CBI  0x15,4
                 _0x2080005:
000ba5 81e8      	LD   R30,Y
000ba6 72e0      	ANDI R30,LOW(0x20)
000ba7 f011      	BREQ _0x2080006
000ba8 9aad      	SBI  0x15,5
000ba9 c001      	RJMP _0x2080007
                 _0x2080006:
000baa 98ad      	CBI  0x15,5
                 _0x2080007:
000bab 81e8      	LD   R30,Y
000bac 74e0      	ANDI R30,LOW(0x40)
000bad f011      	BREQ _0x2080008
000bae 9aae      	SBI  0x15,6
000baf c001      	RJMP _0x2080009
                 _0x2080008:
000bb0 98ae      	CBI  0x15,6
                 _0x2080009:
000bb1 81e8      	LD   R30,Y
000bb2 78e0      	ANDI R30,LOW(0x80)
000bb3 f011      	BREQ _0x208000A
000bb4 9aaf      	SBI  0x15,7
000bb5 c001      	RJMP _0x208000B
                 _0x208000A:
000bb6 98af      	CBI  0x15,7
                 _0x208000B:
                +
000bb7 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
000bb8 958a     +DEC R24
000bb9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
000bba 9aaa      	SBI  0x15,2
                +
000bbb e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000bbc 958a     +DEC R24
000bbd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000bbe 98aa      	CBI  0x15,2
                +
000bbf e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000bc0 958a     +DEC R24
000bc1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000bc2 c09f      	RJMP _0x2120001
                 __lcd_write_data:
000bc3 81e8      	LD   R30,Y
000bc4 93ea      	ST   -Y,R30
000bc5 dfd9      	RCALL __lcd_write_nibble_G104
000bc6 81e8          ld    r30,y
000bc7 95e2          swap  r30
000bc8 83e8          st    y,r30
000bc9 81e8      	LD   R30,Y
000bca 93ea      	ST   -Y,R30
000bcb dfd3      	RCALL __lcd_write_nibble_G104
                +
000bcc ec88     +LDI R24 , LOW ( 200 )
000bcd e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000bce 9701     +SBIW R24 , 1
000bcf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000bd0 c091      	RJMP _0x2120001
                 _lcd_gotoxy:
000bd1 81e8      	LD   R30,Y
000bd2 e0f0      	LDI  R31,0
000bd3 55e1      	SUBI R30,LOW(-__base_y_G104)
000bd4 4ffa      	SBCI R31,HIGH(-__base_y_G104)
000bd5 81e0      	LD   R30,Z
000bd6 81a9      	LDD  R26,Y+1
000bd7 0fea      	ADD  R30,R26
000bd8 93ea      	ST   -Y,R30
000bd9 dfe9      	RCALL __lcd_write_data
000bda 81e9      	LDD  R30,Y+1
000bdb 93e0 05b3 	STS  __lcd_x,R30
000bdd 81e8      	LD   R30,Y
000bde 93e0 05b4 	STS  __lcd_y,R30
000be0 9622      	ADIW R28,2
000be1 9508      	RET
                 _lcd_clear:
000be2 e0e2      	LDI  R30,LOW(2)
000be3 940e 0ed0 	CALL SUBOPT_0x55
000be5 e0ec      	LDI  R30,LOW(12)
000be6 93ea      	ST   -Y,R30
000be7 dfdb      	RCALL __lcd_write_data
000be8 e0e1      	LDI  R30,LOW(1)
000be9 940e 0ed0 	CALL SUBOPT_0x55
000beb e0e0      	LDI  R30,LOW(0)
000bec 93e0 05b4 	STS  __lcd_y,R30
000bee 93e0 05b3 	STS  __lcd_x,R30
000bf0 9508      	RET
                 _lcd_putchar:
000bf1 81a8      	LD   R26,Y
000bf2 30aa      	CPI  R26,LOW(0xA)
000bf3 f031      	BREQ _0x2080011
000bf4 91e0 05b5 	LDS  R30,__lcd_maxx
000bf6 91a0 05b3 	LDS  R26,__lcd_x
000bf8 17ae      	CP   R26,R30
000bf9 f068      	BRLO _0x2080010
                 _0x2080011:
000bfa e0e0      	LDI  R30,LOW(0)
000bfb 93ea      	ST   -Y,R30
000bfc 91e0 05b4 	LDS  R30,__lcd_y
000bfe 5fef      	SUBI R30,-LOW(1)
000bff 93e0 05b4 	STS  __lcd_y,R30
000c01 93ea      	ST   -Y,R30
000c02 dfce      	RCALL _lcd_gotoxy
000c03 81a8      	LD   R26,Y
000c04 30aa      	CPI  R26,LOW(0xA)
000c05 f409      	BRNE _0x2080013
000c06 c05b      	RJMP _0x2120001
                 _0x2080013:
                 _0x2080010:
000c07 91e0 05b3 	LDS  R30,__lcd_x
000c09 5fef      	SUBI R30,-LOW(1)
000c0a 93e0 05b3 	STS  __lcd_x,R30
000c0c 9aa8      	SBI  0x15,0
000c0d 81e8      	LD   R30,Y
000c0e 93ea      	ST   -Y,R30
000c0f dfb3      	RCALL __lcd_write_data
000c10 98a8      	CBI  0x15,0
000c11 c050      	RJMP _0x2120001
                 _lcd_puts:
000c12 931a      	ST   -Y,R17
                 _0x2080014:
000c13 81a9      	LDD  R26,Y+1
000c14 81ba      	LDD  R27,Y+1+1
000c15 91ed      	LD   R30,X+
000c16 83a9      	STD  Y+1,R26
000c17 83ba      	STD  Y+1+1,R27
000c18 2f1e      	MOV  R17,R30
000c19 30e0      	CPI  R30,0
000c1a f019      	BREQ _0x2080016
000c1b 931a      	ST   -Y,R17
000c1c dfd4      	RCALL _lcd_putchar
000c1d cff5      	RJMP _0x2080014
                 _0x2080016:
000c1e c00e      	RJMP _0x2120002
                 _lcd_putsf:
000c1f 931a      	ST   -Y,R17
                 _0x2080017:
000c20 81e9      	LDD  R30,Y+1
000c21 81fa      	LDD  R31,Y+1+1
000c22 9631      	ADIW R30,1
000c23 83e9      	STD  Y+1,R30
000c24 83fa      	STD  Y+1+1,R31
000c25 9731      	SBIW R30,1
000c26 91e4      	LPM  R30,Z
000c27 2f1e      	MOV  R17,R30
000c28 30e0      	CPI  R30,0
000c29 f019      	BREQ _0x2080019
000c2a 931a      	ST   -Y,R17
000c2b dfc5      	RCALL _lcd_putchar
000c2c cff3      	RJMP _0x2080017
                 _0x2080019:
                 _0x2120002:
000c2d 8118      	LDD  R17,Y+0
                 _0x2120003:
000c2e 9623      	ADIW R28,3
000c2f 9508      	RET
                 _lcd_init:
000c30 9aa4      	SBI  0x14,4
000c31 9aa5      	SBI  0x14,5
000c32 9aa6      	SBI  0x14,6
000c33 9aa7      	SBI  0x14,7
000c34 9aa2      	SBI  0x14,2
000c35 9aa0      	SBI  0x14,0
000c36 9aa1      	SBI  0x14,1
000c37 98aa      	CBI  0x15,2
000c38 98a8      	CBI  0x15,0
000c39 98a9      	CBI  0x15,1
000c3a 81e8      	LD   R30,Y
000c3b 93e0 05b5 	STS  __lcd_maxx,R30
000c3d 58e0      	SUBI R30,-LOW(128)
                +
000c3e 93e0 05b1+STS __base_y_G104 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G104,2
000c40 81e8      	LD   R30,Y
000c41 54e0      	SUBI R30,-LOW(192)
                +
000c42 93e0 05b2+STS __base_y_G104 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G104,3
000c44 e1e4      	LDI  R30,LOW(20)
000c45 e0f0      	LDI  R31,HIGH(20)
000c46 940e 0dbd 	CALL SUBOPT_0x2A
000c48 940e 0ed6 	CALL SUBOPT_0x56
000c4a 940e 0ed6 	CALL SUBOPT_0x56
000c4c 940e 0ed6 	CALL SUBOPT_0x56
000c4e e2e0      	LDI  R30,LOW(32)
000c4f 93ea      	ST   -Y,R30
000c50 df4e      	RCALL __lcd_write_nibble_G104
                +
000c51 e980     +LDI R24 , LOW ( 400 )
000c52 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000c53 9701     +SBIW R24 , 1
000c54 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000c55 e2e8      	LDI  R30,LOW(40)
000c56 93ea      	ST   -Y,R30
000c57 df6b      	RCALL __lcd_write_data
000c58 e0e4      	LDI  R30,LOW(4)
000c59 93ea      	ST   -Y,R30
000c5a df68      	RCALL __lcd_write_data
000c5b e8e5      	LDI  R30,LOW(133)
000c5c 93ea      	ST   -Y,R30
000c5d df65      	RCALL __lcd_write_data
000c5e e0e6      	LDI  R30,LOW(6)
000c5f 93ea      	ST   -Y,R30
000c60 df62      	RCALL __lcd_write_data
000c61 df80      	RCALL _lcd_clear
                 _0x2120001:
000c62 9621      	ADIW R28,1
000c63 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
000c64 91a9          ld   r26,y+
000c65 91b9          ld   r27,y+
000c66 27ee          clr  r30
000c67 27ff          clr  r31
                 strlen0:
000c68 916d          ld   r22,x+
000c69 2366          tst  r22
000c6a f011          breq strlen1
000c6b 9631          adiw r30,1
000c6c cffb          rjmp strlen0
                 strlen1:
000c6d 9508          ret
                 _strlenf:
000c6e 27aa          clr  r26
000c6f 27bb          clr  r27
000c70 91e9          ld   r30,y+
000c71 91f9          ld   r31,y+
                 strlenf0:
000c72 9005      	lpm  r0,z+
000c73 2000          tst  r0
000c74 f011          breq strlenf1
000c75 9611          adiw r26,1
000c76 cffb          rjmp strlenf0
                 strlenf1:
000c77 01fd          movw r30,r26
000c78 9508          ret
                 
                 	.CSEG
                 _bcd2bin:
000c79 81e8          ld   r30,y
000c7a 95e2          swap r30
000c7b 70ef          andi r30,0xf
000c7c 2fae          mov  r26,r30
000c7d 0faa          lsl  r26
000c7e 0faa          lsl  r26
000c7f 0fea          add  r30,r26
000c80 0fee          lsl  r30
000c81 91a9          ld   r26,y+
000c82 70af          andi r26,0xf
000c83 0fea          add  r30,r26
000c84 9508          ret
                 _bin2bcd:
000c85 91a9          ld   r26,y+
000c86 27ee          clr  r30
                 bin2bcd0:
000c87 50aa          subi r26,10
000c88 f012          brmi bin2bcd1
000c89 5fe0          subi r30,-16
000c8a cffc          rjmp bin2bcd0
                 bin2bcd1:
000c8b 5fa6          subi r26,-10
000c8c 0fea          add  r30,r26
000c8d 9508          ret
                 
                 	.ESEG
                 _password:
000000 1b 05     	.DW  0x51B
                 
                 	.DSEG
                 _yy1:
000567           	.BYTE 0x1
                 _yy2:
000568           	.BYTE 0x1
                 _disptime1:
000569           	.BYTE 0x10
                 _dispdate1:
000579           	.BYTE 0x10
                 _Screen:
000589           	.BYTE 0x2
                 _Pointer_horiz:
00058b           	.BYTE 0x2
                 _Pointer_vert:
00058d           	.BYTE 0x2
                 _Pt:
00058f           	.BYTE 0x2
                 _temp_pass:
000591           	.BYTE 0x4
                 _voltage:
000595           	.BYTE 0x4
                 _current:
000599           	.BYTE 0x4
                 _flag:
00059d           	.BYTE 0x2
                 _disp_pass:
00059f           	.BYTE 0x4
                 _disp_volt:
0005a3           	.BYTE 0x3
                 _disp_current:
0005a6           	.BYTE 0x3
                 _rtc_setter:
0005a9           	.BYTE 0x2
                 __seed_G101:
0005ab           	.BYTE 0x4
                 __base_y_G104:
0005af           	.BYTE 0x4
                 __lcd_x:
0005b3           	.BYTE 0x1
                 __lcd_y:
0005b4           	.BYTE 0x1
                 __lcd_maxx:
0005b5           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
000c8e e0e0      	LDI  R30,LOW(0)
000c8f 93ea      	ST   -Y,R30
000c90 e0e2      	LDI  R30,LOW(2)
000c91 93ea      	ST   -Y,R30
000c92 940e 0bd1 	CALL _lcd_gotoxy
                +
000c94 ebe0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000c95 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000c96 93fa      	ST   -Y,R31
000c97 93ea      	ST   -Y,R30
000c98 940c 0c1f 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000c9a e0e1      	LDI  R30,LOW(1)
000c9b 93ea      	ST   -Y,R30
000c9c e0e2      	LDI  R30,LOW(2)
000c9d 93ea      	ST   -Y,R30
000c9e 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2:
                +
000ca0 ebe0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000ca1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000ca2 93fa      	ST   -Y,R31
000ca3 93ea      	ST   -Y,R30
000ca4 940c 0c1f 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000ca6 93ea      	ST   -Y,R30
000ca7 e0e2      	LDI  R30,LOW(2)
000ca8 93ea      	ST   -Y,R30
000ca9 940e 0bd1 	CALL _lcd_gotoxy
000cab cff4      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x4:
000cac 93ea      	ST   -Y,R30
000cad e0e2      	LDI  R30,LOW(2)
000cae 93ea      	ST   -Y,R30
000caf 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x5:
000cb1 e0e0      	LDI  R30,LOW(0)
000cb2 93ea      	ST   -Y,R30
000cb3 93ea      	ST   -Y,R30
000cb4 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x6:
000cb6 e0e0      	LDI  R30,LOW(0)
000cb7 93ea      	ST   -Y,R30
000cb8 e0e1      	LDI  R30,LOW(1)
000cb9 93ea      	ST   -Y,R30
000cba 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000cbc e0e0      	LDI  R30,LOW(0)
000cbd 93ea      	ST   -Y,R30
000cbe e0e3      	LDI  R30,LOW(3)
000cbf 93ea      	ST   -Y,R30
000cc0 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
000cc2 27ff      	CLR  R31
000cc3 2766      	CLR  R22
000cc4 2777      	CLR  R23
000cc5 940e 11c0 	CALL __PUTPARD1
000cc7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x9:
000cc8 93fa      	ST   -Y,R31
000cc9 93ea      	ST   -Y,R30
000cca 940c 0c12 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xA:
000ccc 93ea      	ST   -Y,R30
000ccd e0e0      	LDI  R30,LOW(0)
000cce 93ea      	ST   -Y,R30
000ccf 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xB:
000cd1 940e 112a 	CALL __CWD1
000cd3 940e 11c0 	CALL __PUTPARD1
000cd5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000cd6 e0ef      	LDI  R30,LOW(15)
000cd7 93ea      	ST   -Y,R30
000cd8 e0e1      	LDI  R30,LOW(1)
000cd9 93ea      	ST   -Y,R30
000cda 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000cdc e0ea      	LDI  R30,LOW(10)
000cdd 93ea      	ST   -Y,R30
000cde e0e1      	LDI  R30,LOW(1)
000cdf 93ea      	ST   -Y,R30
000ce0 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000ce2 e0e7      	LDI  R30,LOW(7)
000ce3 93ea      	ST   -Y,R30
000ce4 e0e1      	LDI  R30,LOW(1)
000ce5 93ea      	ST   -Y,R30
000ce6 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
000ce8 e0ed      	LDI  R30,LOW(13)
000ce9 93ea      	ST   -Y,R30
000cea e0e3      	LDI  R30,LOW(3)
000ceb 93ea      	ST   -Y,R30
000cec 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000cee e0ea      	LDI  R30,LOW(10)
000cef 93ea      	ST   -Y,R30
000cf0 e0e3      	LDI  R30,LOW(3)
000cf1 93ea      	ST   -Y,R30
000cf2 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000cf4 e0e7      	LDI  R30,LOW(7)
000cf5 93ea      	ST   -Y,R30
000cf6 e0e3      	LDI  R30,LOW(3)
000cf7 93ea      	ST   -Y,R30
000cf8 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x12:
000cfa 93fa      	ST   -Y,R31
000cfb 93ea      	ST   -Y,R30
                +
000cfc ede8     +LDI R30 , LOW ( 2 * _0x0 + ( 40 ) )
000cfd e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 40 ) )
                 	__POINTW1FN _0x0,40
000cfe 93fa      	ST   -Y,R31
000cff 93ea      	ST   -Y,R30
000d00 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x13:
000d01 91e0 0595 	LDS  R30,_voltage
000d03 91f0 0596 	LDS  R31,_voltage+1
000d05 9160 0597 	LDS  R22,_voltage+2
000d07 9170 0598 	LDS  R23,_voltage+3
000d09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
000d0a 940e 11c0 	CALL __PUTPARD1
000d0c e084      	LDI  R24,4
000d0d 940e 0969 	CALL _sprintf
000d0f 9628      	ADIW R28,8
000d10 cfa5      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000d11 91e0 0599 	LDS  R30,_current
000d13 91f0 059a 	LDS  R31,_current+1
000d15 9160 059b 	LDS  R22,_current+2
000d17 9170 059c 	LDS  R23,_current+3
000d19 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x16:
000d1a 91ed      	LD   R30,X+
000d1b 91fd      	LD   R31,X+
000d1c 9631      	ADIW R30,1
000d1d 93fe      	ST   -X,R31
000d1e 93ee      	ST   -X,R30
000d1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 21 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x17:
000d20 91a0 0589 	LDS  R26,_Screen
000d22 91b0 058a 	LDS  R27,_Screen+1
000d24 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
000d25 e1ef      	LDI  R30,LOW(31)
000d26 e0f0      	LDI  R31,HIGH(31)
000d27 93e0 0589 	STS  _Screen,R30
000d29 93f0 058a 	STS  _Screen+1,R31
000d2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x19:
000d2c e6e4      	LDI  R30,LOW(100)
000d2d e0f0      	LDI  R31,HIGH(100)
000d2e 93fa      	ST   -Y,R31
000d2f 93ea      	ST   -Y,R30
000d30 940c 0f31 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1A:
000d32 940e 1179 	CALL __MODW21
000d34 93e0 058d 	STS  _Pointer_vert,R30
000d36 93f0 058e 	STS  _Pointer_vert+1,R31
000d38 940c 0243 	JMP  _pointer_display_vert
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
000d3a 91e0 0589 	LDS  R30,_Screen
000d3c 91f0 058a 	LDS  R31,_Screen+1
000d3e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x1C:
000d3f 93e0 0589 	STS  _Screen,R30
000d41 93f0 058a 	STS  _Screen+1,R31
000d43 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
000d44 dfdb      	RCALL SUBOPT_0x17
000d45 36a5      	CPI  R26,LOW(0x65)
000d46 e0e0      	LDI  R30,HIGH(0x65)
000d47 07be      	CPC  R27,R30
000d48 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x1E:
000d49 dfd6      	RCALL SUBOPT_0x17
000d4a e0ea      	LDI  R30,LOW(10)
000d4b e0f0      	LDI  R31,HIGH(10)
000d4c 940e 114f 	CALL __DIVW21
000d4e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1F:
000d4f 931a      	ST   -Y,R17
000d50 930a      	ST   -Y,R16
                +
000d51 e0e0     +LDI R30 , LOW ( 0x41200000 )
000d52 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000d53 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000d54 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000d55 940e 11c0 	CALL __PUTPARD1
000d57 91a0 058b 	LDS  R26,_Pointer_horiz
000d59 91b0 058c 	LDS  R27,_Pointer_horiz+1
000d5b 81ee      	LDD  R30,Y+6
000d5c 81ff      	LDD  R31,Y+6+1
000d5d 1bea      	SUB  R30,R26
000d5e 0bfb      	SBC  R31,R27
000d5f 9731      	SBIW R30,1
000d60 940e 112a 	CALL __CWD1
000d62 940e 0fca 	CALL __CDF1
000d64 940e 11c0 	CALL __PUTPARD1
000d66 940e 0b04 	CALL _pow
000d68 940e 0f91 	CALL __CFD1U
000d6a 018f      	MOVW R16,R30
000d6b 940e 0230 	CALL _pointer_display_horiz
000d6d cfbe      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
000d6e 91a0 0595 	LDS  R26,_voltage
000d70 91b0 0596 	LDS  R27,_voltage+1
000d72 9180 0597 	LDS  R24,_voltage+2
000d74 9190 0598 	LDS  R25,_voltage+3
000d76 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x21:
                +
000d77 5fef     +SUBI R30 , LOW ( - 1 )
000d78 4fff     +SBCI R31 , HIGH ( - 1 )
000d79 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000d7a 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
000d7b 01df      	MOVW R26,R30
000d7c 01cb      	MOVW R24,R22
000d7d 01f8      	MOVW R30,R16
000d7e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x22:
000d7f 93e0 0595 	STS  _voltage,R30
000d81 93f0 0596 	STS  _voltage+1,R31
000d83 9360 0597 	STS  _voltage+2,R22
000d85 9370 0598 	STS  _voltage+3,R23
000d87 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
                +
000d88 eee8     +LDI R30 , LOW ( 0x3E8 )
000d89 e0f3     +LDI R31 , HIGH ( 0x3E8 )
000d8a e060     +LDI R22 , BYTE3 ( 0x3E8 )
000d8b e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
000d8c 940e 1187 	CALL __MODD21
000d8e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x24:
000d8f 81ea      	LDD  R30,Y+2
000d90 81fb      	LDD  R31,Y+2+1
000d91 91a0 058b 	LDS  R26,_Pointer_horiz
000d93 91b0 058c 	LDS  R27,_Pointer_horiz+1
000d95 940e 1179 	CALL __MODW21
000d97 93e0 058b 	STS  _Pointer_horiz,R30
000d99 93f0 058c 	STS  _Pointer_horiz+1,R31
000d9b 940c 0230 	JMP  _pointer_display_horiz
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x25:
000d9d 940e 0be2 	CALL _lcd_clear
000d9f cf11      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x26:
000da0 e0eb      	LDI  R30,LOW(11)
000da1 e0f0      	LDI  R31,HIGH(11)
000da2 93e0 059d 	STS  _flag,R30
000da4 93f0 059e 	STS  _flag+1,R31
000da6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x27:
                +
000da7 eeed     +LDI R30 , LOW ( 2 * _0x0 + ( 61 ) )
000da8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 61 ) )
                 	__POINTW1FN _0x0,61
000da9 93fa      	ST   -Y,R31
000daa 93ea      	ST   -Y,R30
000dab 940e 0c1f 	CALL _lcd_putsf
000dad cf08      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x28:
000dae 93fa      	ST   -Y,R31
000daf 93ea      	ST   -Y,R30
000db0 940e 0c1f 	CALL _lcd_putsf
000db2 e0e0      	LDI  R30,LOW(0)
000db3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
000db4 93e0 0595 	STS  _voltage,R30
000db6 93e0 0596 	STS  _voltage+1,R30
000db8 93e0 0597 	STS  _voltage+2,R30
000dba 93e0 0598 	STS  _voltage+3,R30
000dbc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2A:
000dbd 93fa      	ST   -Y,R31
000dbe 93ea      	ST   -Y,R30
000dbf 940c 0f31 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
000dc1 91a0 0599 	LDS  R26,_current
000dc3 91b0 059a 	LDS  R27,_current+1
000dc5 9180 059b 	LDS  R24,_current+2
000dc7 9190 059c 	LDS  R25,_current+3
000dc9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
000dca 93e0 0599 	STS  _current,R30
000dcc 93f0 059a 	STS  _current+1,R31
000dce 9360 059b 	STS  _current+2,R22
000dd0 9370 059c 	STS  _current+3,R23
000dd2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2D:
000dd3 e0e0      	LDI  R30,LOW(0)
000dd4 93e0 058d 	STS  _Pointer_vert,R30
000dd6 93e0 058e 	STS  _Pointer_vert+1,R30
000dd8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
000dd9 eee8      	LDI  R30,LOW(1000)
000dda e0f3      	LDI  R31,HIGH(1000)
000ddb cfe1      	RJMP SUBOPT_0x2A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 28 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0x2F:
000ddc 93fa      	ST   -Y,R31
000ddd 93ea      	ST   -Y,R30
000dde 940c 0c1f 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x30:
000de0 e0e1      	LDI  R30,LOW(1)
000de1 93ea      	ST   -Y,R30
000de2 93ea      	ST   -Y,R30
000de3 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x31:
000de5 93ea      	ST   -Y,R30
000de6 e0e3      	LDI  R30,LOW(3)
000de7 93ea      	ST   -Y,R30
000de8 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x32:
000dea 93fa      	ST   -Y,R31
000deb 93ea      	ST   -Y,R30
000dec 940c 0354 	JMP  _input
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
000dee 940e 0be2 	CALL _lcd_clear
000df0 cfe2      	RJMP SUBOPT_0x2D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
000df1 93fa      	ST   -Y,R31
000df2 93ea      	ST   -Y,R30
000df3 940e 0b80 	CALL _rtc_get_date
000df5 cebb      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x35:
000df6 93ea      	ST   -Y,R30
000df7 e0e1      	LDI  R30,LOW(1)
000df8 93ea      	ST   -Y,R30
000df9 940c 0bd1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x36:
000dfb 93ea      	ST   -Y,R30
000dfc 940e 01e3 	CALL _read_adc
000dfe 940e 1125 	CALL __LSRW2
000e00 018f      	MOVW R16,R30
000e01 01fe      	MOVW R30,R28
000e02 9632      	ADIW R30,2
000e03 cef6      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x37:
000e04 e084      	LDI  R24,4
000e05 940e 0969 	CALL _sprintf
000e07 9628      	ADIW R28,8
000e08 e0e4      	LDI  R30,LOW(4)
000e09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x38:
000e0a 01fe      	MOVW R30,R28
000e0b 9632      	ADIW R30,2
000e0c cebb      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x39:
000e0d e084      	LDI  R24,4
000e0e 940e 0969 	CALL _sprintf
000e10 9628      	ADIW R28,8
000e11 e0ed      	LDI  R30,LOW(13)
000e12 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3A:
000e13 932a      	ST   -Y,R18
000e14 85ed      	LDD  R30,Y+13
000e15 85fe      	LDD  R31,Y+13+1
000e16 93fa      	ST   -Y,R31
000e17 93ea      	ST   -Y,R30
000e18 89e9      	LDD  R30,Y+17
000e19 89fa      	LDD  R31,Y+17+1
000e1a 9509      	ICALL
000e1b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3B:
000e1c 89e8      	LDD  R30,Y+16
000e1d 89f9      	LDD  R31,Y+16+1
000e1e 9734      	SBIW R30,4
000e1f 8be8      	STD  Y+16,R30
000e20 8bf9      	STD  Y+16+1,R31
000e21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3C:
000e22 85ed      	LDD  R30,Y+13
000e23 85fe      	LDD  R31,Y+13+1
000e24 93fa      	ST   -Y,R31
000e25 93ea      	ST   -Y,R30
000e26 89e9      	LDD  R30,Y+17
000e27 89fa      	LDD  R31,Y+17+1
000e28 9509      	ICALL
000e29 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3D:
000e2a 89a8      	LDD  R26,Y+16
000e2b 89b9      	LDD  R27,Y+16+1
000e2c 9614      	ADIW R26,4
000e2d 940e 11a9 	CALL __GETW1P
000e2f 83ee      	STD  Y+6,R30
000e30 83ff      	STD  Y+6+1,R31
000e31 93fa      	ST   -Y,R31
000e32 93ea      	ST   -Y,R30
000e33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3E:
000e34 89a8      	LDD  R26,Y+16
000e35 89b9      	LDD  R27,Y+16+1
000e36 9614      	ADIW R26,4
000e37 940e 11a9 	CALL __GETW1P
000e39 87ea      	STD  Y+10,R30
000e3a 87fb      	STD  Y+10+1,R31
000e3b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3F:
000e3c 01de      	MOVW R26,R28
000e3d 961c      	ADIW R26,12
000e3e 940e 1107 	CALL __ADDW2R15
000e40 940e 11a9 	CALL __GETW1P
000e42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x40:
000e43 940e 11b6 	CALL __GETD1S0
000e45 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x41:
                +
000e46 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000e47 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000e48 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000e49 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000e4a 940e 0ffd 	CALL __SUBF12
000e4c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x42:
                +
000e4d 81ae     +LDD R26 , Y + 6
000e4e 81bf     +LDD R27 , Y + 6 + 1
000e4f 8588     +LDD R24 , Y + 6 + 2
000e50 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000e51 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x43:
                +
000e52 81ee     +LDD R30 , Y + 6
000e53 81ff     +LDD R31 , Y + 6 + 1
000e54 8568     +LDD R22 , Y + 6 + 2
000e55 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000e56 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x44:
                +
000e57 83ee     +STD Y + 6 , R30
000e58 83ff     +STD Y + 6 + 1 , R31
000e59 8768     +STD Y + 6 + 2 , R22
000e5a 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000e5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x45:
000e5c dff5      	RCALL SUBOPT_0x43
000e5d cfef      	RJMP SUBOPT_0x42
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x46:
000e5e 940e 1054 	CALL __MULF12
                +
000e60 83ea     +STD Y + 2 , R30
000e61 83fb     +STD Y + 2 + 1 , R31
000e62 836c     +STD Y + 2 + 2 , R22
000e63 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000e64 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x47:
000e65 940e 11c5 	CALL __SWAPD12
000e67 940e 0ffd 	CALL __SUBF12
000e69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x48:
                +
000e6a 81ea     +LDD R30 , Y + 2
000e6b 81fb     +LDD R31 , Y + 2 + 1
000e6c 816c     +LDD R22 , Y + 2 + 2
000e6d 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000e6e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x49:
                +
000e6f 85aa     +LDD R26 , Y + 10
000e70 85bb     +LDD R27 , Y + 10 + 1
000e71 858c     +LDD R24 , Y + 10 + 2
000e72 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000e73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4A:
                +
000e74 e0e0     +LDI R30 , LOW ( 0x0 )
000e75 e0f0     +LDI R31 , HIGH ( 0x0 )
000e76 e060     +LDI R22 , BYTE3 ( 0x0 )
000e77 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000e78 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4B:
                +
000e79 85e8     +LDD R30 , Y + 8
000e7a 85f9     +LDD R31 , Y + 8 + 1
000e7b 856a     +LDD R22 , Y + 8 + 2
000e7c 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000e7d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4C:
                +
000e7e 81ec     +LDD R30 , Y + 4
000e7f 81fd     +LDD R31 , Y + 4 + 1
000e80 816e     +LDD R22 , Y + 4 + 2
000e81 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000e82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4D:
000e83 940e 11c0 	CALL __PUTPARD1
000e85 940e 09e1 	CALL _log
                +
000e87 81ac     +LDD R26 , Y + 4
000e88 81bd     +LDD R27 , Y + 4 + 1
000e89 818e     +LDD R24 , Y + 4 + 2
000e8a 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000e8b 940e 1054 	CALL __MULF12
000e8d 940e 11c0 	CALL __PUTPARD1
000e8f 940c 0a69 	JMP  _exp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4E:
000e91 940e 0ee4 	CALL _i2c_start
000e93 ede0      	LDI  R30,LOW(208)
000e94 93ea      	ST   -Y,R30
000e95 940c 0f18 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
000e97 93ea      	ST   -Y,R30
000e98 940e 0f18 	CALL _i2c_write
000e9a 81ea      	LDD  R30,Y+2
000e9b 93ea      	ST   -Y,R30
000e9c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x50:
000e9d 940e 0f18 	CALL _i2c_write
000e9f 940c 0ef3 	JMP  _i2c_stop
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x51:
000ea1 93ea      	ST   -Y,R30
000ea2 940e 0f18 	CALL _i2c_write
000ea4 940e 0ee4 	CALL _i2c_start
000ea6 ede1      	LDI  R30,LOW(209)
000ea7 93ea      	ST   -Y,R30
000ea8 940e 0f18 	CALL _i2c_write
000eaa e0e1      	LDI  R30,LOW(1)
000eab 93ea      	ST   -Y,R30
000eac 940e 0efd 	CALL _i2c_read
000eae 93ea      	ST   -Y,R30
000eaf 940c 0c79 	JMP  _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x52:
000eb1 93ec      	ST   X,R30
000eb2 e0e1      	LDI  R30,LOW(1)
000eb3 93ea      	ST   -Y,R30
000eb4 940e 0efd 	CALL _i2c_read
000eb6 93ea      	ST   -Y,R30
000eb7 940e 0c79 	CALL _bcd2bin
000eb9 81aa      	LDD  R26,Y+2
000eba 81bb      	LDD  R27,Y+2+1
000ebb 93ec      	ST   X,R30
000ebc e0e0      	LDI  R30,LOW(0)
000ebd 93ea      	ST   -Y,R30
000ebe 940e 0efd 	CALL _i2c_read
000ec0 93ea      	ST   -Y,R30
000ec1 940c 0c79 	JMP  _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x53:
000ec3 93ea      	ST   -Y,R30
000ec4 940e 0f18 	CALL _i2c_write
000ec6 81e8      	LD   R30,Y
000ec7 93ea      	ST   -Y,R30
000ec8 ddbc      	RCALL _bin2bcd
000ec9 93ea      	ST   -Y,R30
000eca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x54:
000ecb 940e 0f18 	CALL _i2c_write
000ecd 81e9      	LDD  R30,Y+1
000ece 93ea      	ST   -Y,R30
000ecf cdb5      	RJMP _bin2bcd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x55:
000ed0 93ea      	ST   -Y,R30
000ed1 940e 0bc3 	CALL __lcd_write_data
000ed3 e0e3      	LDI  R30,LOW(3)
000ed4 e0f0      	LDI  R31,HIGH(3)
000ed5 cee7      	RJMP SUBOPT_0x2A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x56:
000ed6 e3e0      	LDI  R30,LOW(48)
000ed7 93ea      	ST   -Y,R30
000ed8 940e 0b9f 	CALL __lcd_write_nibble_G104
                +
000eda e980     +LDI R24 , LOW ( 400 )
000edb e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000edc 9701     +SBIW R24 , 1
000edd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000ede 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
000edf 9890      	cbi  __i2c_port,__scl_bit
000ee0 9891      	cbi  __i2c_port,__sda_bit
000ee1 9a88      	sbi  __i2c_dir,__scl_bit
000ee2 9889      	cbi  __i2c_dir,__sda_bit
000ee3 c015      	rjmp __i2c_delay2
                 _i2c_start:
000ee4 9889      	cbi  __i2c_dir,__sda_bit
000ee5 9888      	cbi  __i2c_dir,__scl_bit
000ee6 27ee      	clr  r30
000ee7 0000      	nop
000ee8 9b81      	sbis __i2c_pin,__sda_bit
000ee9 9508      	ret
000eea 9b80      	sbis __i2c_pin,__scl_bit
000eeb 9508      	ret
000eec d004      	rcall __i2c_delay1
000eed 9a89      	sbi  __i2c_dir,__sda_bit
000eee d002      	rcall __i2c_delay1
000eef 9a88      	sbi  __i2c_dir,__scl_bit
000ef0 e0e1      	ldi  r30,1
                 __i2c_delay1:
000ef1 e16b      	ldi  r22,27
000ef2 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000ef3 9a89      	sbi  __i2c_dir,__sda_bit
000ef4 9a88      	sbi  __i2c_dir,__scl_bit
000ef5 d003      	rcall __i2c_delay2
000ef6 9888      	cbi  __i2c_dir,__scl_bit
000ef7 dff9      	rcall __i2c_delay1
000ef8 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000ef9 e365      	ldi  r22,53
                 __i2c_delay2l:
000efa 956a      	dec  r22
000efb f7f1      	brne __i2c_delay2l
000efc 9508      	ret
                 _i2c_read:
000efd e078      	ldi  r23,8
                 __i2c_read0:
000efe 9888      	cbi  __i2c_dir,__scl_bit
000eff dff1      	rcall __i2c_delay1
                 __i2c_read3:
000f00 9b80      	sbis __i2c_pin,__scl_bit
000f01 cffe      	rjmp __i2c_read3
000f02 dfee      	rcall __i2c_delay1
000f03 9488      	clc
000f04 9981      	sbic __i2c_pin,__sda_bit
000f05 9408      	sec
000f06 9a88      	sbi  __i2c_dir,__scl_bit
000f07 dff1      	rcall __i2c_delay2
000f08 1fee      	rol  r30
000f09 957a      	dec  r23
000f0a f799      	brne __i2c_read0
000f0b 9179      	ld   r23,y+
000f0c 2377      	tst  r23
000f0d f411      	brne __i2c_read1
000f0e 9889      	cbi  __i2c_dir,__sda_bit
000f0f c001      	rjmp __i2c_read2
                 __i2c_read1:
000f10 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000f11 dfdf      	rcall __i2c_delay1
000f12 9888      	cbi  __i2c_dir,__scl_bit
000f13 dfe5      	rcall __i2c_delay2
000f14 9a88      	sbi  __i2c_dir,__scl_bit
000f15 dfdb      	rcall __i2c_delay1
000f16 9889      	cbi  __i2c_dir,__sda_bit
000f17 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000f18 91e9      	ld   r30,y+
000f19 e078      	ldi  r23,8
                 __i2c_write0:
000f1a 0fee      	lsl  r30
000f1b f410      	brcc __i2c_write1
000f1c 9889      	cbi  __i2c_dir,__sda_bit
000f1d c001      	rjmp __i2c_write2
                 __i2c_write1:
000f1e 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
000f1f dfd9      	rcall __i2c_delay2
000f20 9888      	cbi  __i2c_dir,__scl_bit
000f21 dfcf      	rcall __i2c_delay1
                 __i2c_write3:
000f22 9b80      	sbis __i2c_pin,__scl_bit
000f23 cffe      	rjmp __i2c_write3
000f24 dfcc      	rcall __i2c_delay1
000f25 9a88      	sbi  __i2c_dir,__scl_bit
000f26 957a      	dec  r23
000f27 f791      	brne __i2c_write0
000f28 9889      	cbi  __i2c_dir,__sda_bit
000f29 dfc7      	rcall __i2c_delay1
000f2a 9888      	cbi  __i2c_dir,__scl_bit
000f2b dfcd      	rcall __i2c_delay2
000f2c e0e1      	ldi  r30,1
000f2d 9981      	sbic __i2c_pin,__sda_bit
000f2e 27ee      	clr  r30
000f2f 9a88      	sbi  __i2c_dir,__scl_bit
000f30 cfc0      	rjmp __i2c_delay1
                 
                 _delay_ms:
000f31 91e9      	ld   r30,y+
000f32 91f9      	ld   r31,y+
000f33 9630      	adiw r30,0
000f34 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000f35 ea80     +LDI R24 , LOW ( 0xFA0 )
000f36 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000f37 9701     +SBIW R24 , 1
000f38 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000f39 95a8      	wdr
000f3a 9731      	sbiw r30,1
000f3b f7c9      	brne __delay_ms0
                 __delay_ms1:
000f3c 9508      	ret
                 
                 _frexp:
000f3d 91a9      	LD   R26,Y+
000f3e 91b9      	LD   R27,Y+
000f3f 91e9      	LD   R30,Y+
000f40 91f9      	LD   R31,Y+
000f41 9169      	LD   R22,Y+
000f42 9179      	LD   R23,Y+
000f43 fb77      	BST  R23,7
000f44 0f66      	LSL  R22
000f45 1f77      	ROL  R23
000f46 2788      	CLR  R24
000f47 577e      	SUBI R23,0x7E
000f48 0b88      	SBC  R24,R24
000f49 937d      	ST   X+,R23
000f4a 938c      	ST   X,R24
000f4b e77e      	LDI  R23,0x7E
000f4c 9576      	LSR  R23
000f4d 9567      	ROR  R22
000f4e f07e      	BRTS __ANEGF1
000f4f 9508      	RET
                 
                 _ldexp:
000f50 91a9      	LD   R26,Y+
000f51 91b9      	LD   R27,Y+
000f52 91e9      	LD   R30,Y+
000f53 91f9      	LD   R31,Y+
000f54 9169      	LD   R22,Y+
000f55 9179      	LD   R23,Y+
000f56 fb77      	BST  R23,7
000f57 0f66      	LSL  R22
000f58 1f77      	ROL  R23
000f59 0f7a      	ADD  R23,R26
000f5a 9576      	LSR  R23
000f5b 9567      	ROR  R22
000f5c f00e      	BRTS __ANEGF1
000f5d 9508      	RET
                 
                 __ANEGF1:
000f5e 9730      	SBIW R30,0
000f5f 4060      	SBCI R22,0
000f60 4070      	SBCI R23,0
000f61 f009      	BREQ __ANEGF10
000f62 5870      	SUBI R23,0x80
                 __ANEGF10:
000f63 9508      	RET
                 
                 __ROUND_REPACK:
000f64 2355      	TST  R21
000f65 f442      	BRPL __REPACK
000f66 3850      	CPI  R21,0x80
000f67 f411      	BRNE __ROUND_REPACK0
000f68 ffe0      	SBRS R30,0
000f69 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000f6a 9631      	ADIW R30,1
000f6b 1f69      	ADC  R22,R25
000f6c 1f79      	ADC  R23,R25
000f6d f06b      	BRVS __REPACK1
                 
                 __REPACK:
000f6e e850      	LDI  R21,0x80
000f6f 2757      	EOR  R21,R23
000f70 f411      	BRNE __REPACK0
000f71 935f      	PUSH R21
000f72 c0cf      	RJMP __ZERORES
                 __REPACK0:
000f73 3f5f      	CPI  R21,0xFF
000f74 f031      	BREQ __REPACK1
000f75 0f66      	LSL  R22
000f76 0c00      	LSL  R0
000f77 9557      	ROR  R21
000f78 9567      	ROR  R22
000f79 2f75      	MOV  R23,R21
000f7a 9508      	RET
                 __REPACK1:
000f7b 935f      	PUSH R21
000f7c 2000      	TST  R0
000f7d f00a      	BRMI __REPACK2
000f7e c0cf      	RJMP __MAXRES
                 __REPACK2:
000f7f c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000f80 e850      	LDI  R21,0x80
000f81 2e19      	MOV  R1,R25
000f82 2215      	AND  R1,R21
000f83 0f88      	LSL  R24
000f84 1f99      	ROL  R25
000f85 2795      	EOR  R25,R21
000f86 0f55      	LSL  R21
000f87 9587      	ROR  R24
                 
                 __UNPACK1:
000f88 e850      	LDI  R21,0x80
000f89 2e07      	MOV  R0,R23
000f8a 2205      	AND  R0,R21
000f8b 0f66      	LSL  R22
000f8c 1f77      	ROL  R23
000f8d 2775      	EOR  R23,R21
000f8e 0f55      	LSL  R21
000f8f 9567      	ROR  R22
000f90 9508      	RET
                 
                 __CFD1U:
000f91 9468      	SET
000f92 c001      	RJMP __CFD1U0
                 __CFD1:
000f93 94e8      	CLT
                 __CFD1U0:
000f94 935f      	PUSH R21
000f95 dff2      	RCALL __UNPACK1
000f96 3870      	CPI  R23,0x80
000f97 f018      	BRLO __CFD10
000f98 3f7f      	CPI  R23,0xFF
000f99 f408      	BRCC __CFD10
000f9a c0a7      	RJMP __ZERORES
                 __CFD10:
000f9b e156      	LDI  R21,22
000f9c 1b57      	SUB  R21,R23
000f9d f4aa      	BRPL __CFD11
000f9e 9551      	NEG  R21
000f9f 3058      	CPI  R21,8
000fa0 f40e      	BRTC __CFD19
000fa1 3059      	CPI  R21,9
                 __CFD19:
000fa2 f030      	BRLO __CFD17
000fa3 efef      	SER  R30
000fa4 efff      	SER  R31
000fa5 ef6f      	SER  R22
000fa6 e77f      	LDI  R23,0x7F
000fa7 f977      	BLD  R23,7
000fa8 c01a      	RJMP __CFD15
                 __CFD17:
000fa9 2777      	CLR  R23
000faa 2355      	TST  R21
000fab f0b9      	BREQ __CFD15
                 __CFD18:
000fac 0fee      	LSL  R30
000fad 1fff      	ROL  R31
000fae 1f66      	ROL  R22
000faf 1f77      	ROL  R23
000fb0 955a      	DEC  R21
000fb1 f7d1      	BRNE __CFD18
000fb2 c010      	RJMP __CFD15
                 __CFD11:
000fb3 2777      	CLR  R23
                 __CFD12:
000fb4 3058      	CPI  R21,8
000fb5 f028      	BRLO __CFD13
000fb6 2fef      	MOV  R30,R31
000fb7 2ff6      	MOV  R31,R22
000fb8 2f67      	MOV  R22,R23
000fb9 5058      	SUBI R21,8
000fba cff9      	RJMP __CFD12
                 __CFD13:
000fbb 2355      	TST  R21
000fbc f031      	BREQ __CFD15
                 __CFD14:
000fbd 9576      	LSR  R23
000fbe 9567      	ROR  R22
000fbf 95f7      	ROR  R31
000fc0 95e7      	ROR  R30
000fc1 955a      	DEC  R21
000fc2 f7d1      	BRNE __CFD14
                 __CFD15:
000fc3 2000      	TST  R0
000fc4 f40a      	BRPL __CFD16
000fc5 d14e      	RCALL __ANEGD1
                 __CFD16:
000fc6 915f      	POP  R21
000fc7 9508      	RET
                 
                 __CDF1U:
000fc8 9468      	SET
000fc9 c001      	RJMP __CDF1U0
                 __CDF1:
000fca 94e8      	CLT
                 __CDF1U0:
000fcb 9730      	SBIW R30,0
000fcc 4060      	SBCI R22,0
000fcd 4070      	SBCI R23,0
000fce f0b1      	BREQ __CDF10
000fcf 2400      	CLR  R0
000fd0 f026      	BRTS __CDF11
000fd1 2377      	TST  R23
000fd2 f412      	BRPL __CDF11
000fd3 9400      	COM  R0
000fd4 d13f      	RCALL __ANEGD1
                 __CDF11:
000fd5 2e17      	MOV  R1,R23
000fd6 e17e      	LDI  R23,30
000fd7 2011      	TST  R1
                 __CDF12:
000fd8 f032      	BRMI __CDF13
000fd9 957a      	DEC  R23
000fda 0fee      	LSL  R30
000fdb 1fff      	ROL  R31
000fdc 1f66      	ROL  R22
000fdd 1c11      	ROL  R1
000fde cff9      	RJMP __CDF12
                 __CDF13:
000fdf 2fef      	MOV  R30,R31
000fe0 2ff6      	MOV  R31,R22
000fe1 2d61      	MOV  R22,R1
000fe2 935f      	PUSH R21
000fe3 df8a      	RCALL __REPACK
000fe4 915f      	POP  R21
                 __CDF10:
000fe5 9508      	RET
                 
                 __SWAPACC:
000fe6 934f      	PUSH R20
000fe7 01af      	MOVW R20,R30
000fe8 01fd      	MOVW R30,R26
000fe9 01da      	MOVW R26,R20
000fea 01ab      	MOVW R20,R22
000feb 01bc      	MOVW R22,R24
000fec 01ca      	MOVW R24,R20
000fed 2d40      	MOV  R20,R0
000fee 2c01      	MOV  R0,R1
000fef 2e14      	MOV  R1,R20
000ff0 914f      	POP  R20
000ff1 9508      	RET
                 
                 __UADD12:
000ff2 0fea      	ADD  R30,R26
000ff3 1ffb      	ADC  R31,R27
000ff4 1f68      	ADC  R22,R24
000ff5 9508      	RET
                 
                 __NEGMAN1:
000ff6 95e0      	COM  R30
000ff7 95f0      	COM  R31
000ff8 9560      	COM  R22
000ff9 5fef      	SUBI R30,-1
000ffa 4fff      	SBCI R31,-1
000ffb 4f6f      	SBCI R22,-1
000ffc 9508      	RET
                 
                 __SUBF12:
000ffd 935f      	PUSH R21
000ffe df81      	RCALL __UNPACK
000fff 3890      	CPI  R25,0x80
001000 f171      	BREQ __ADDF129
001001 e850      	LDI  R21,0x80
001002 2615      	EOR  R1,R21
                 
001003 c004      	RJMP __ADDF120
                 
                 __ADDF12:
001004 935f      	PUSH R21
001005 df7a      	RCALL __UNPACK
001006 3890      	CPI  R25,0x80
001007 f139      	BREQ __ADDF129
                 
                 __ADDF120:
001008 3870      	CPI  R23,0x80
001009 f121      	BREQ __ADDF128
                 __ADDF121:
00100a 2f57      	MOV  R21,R23
00100b 1b59      	SUB  R21,R25
00100c f12b      	BRVS __ADDF1211
00100d f412      	BRPL __ADDF122
00100e dfd7      	RCALL __SWAPACC
00100f cffa      	RJMP __ADDF121
                 __ADDF122:
001010 3158      	CPI  R21,24
001011 f018      	BRLO __ADDF123
001012 27aa      	CLR  R26
001013 27bb      	CLR  R27
001014 2788      	CLR  R24
                 __ADDF123:
001015 3058      	CPI  R21,8
001016 f028      	BRLO __ADDF124
001017 2fab      	MOV  R26,R27
001018 2fb8      	MOV  R27,R24
001019 2788      	CLR  R24
00101a 5058      	SUBI R21,8
00101b cff9      	RJMP __ADDF123
                 __ADDF124:
00101c 2355      	TST  R21
00101d f029      	BREQ __ADDF126
                 __ADDF125:
00101e 9586      	LSR  R24
00101f 95b7      	ROR  R27
001020 95a7      	ROR  R26
001021 955a      	DEC  R21
001022 f7d9      	BRNE __ADDF125
                 __ADDF126:
001023 2d50      	MOV  R21,R0
001024 2551      	EOR  R21,R1
001025 f072      	BRMI __ADDF127
001026 dfcb      	RCALL __UADD12
001027 f438      	BRCC __ADDF129
001028 9567      	ROR  R22
001029 95f7      	ROR  R31
00102a 95e7      	ROR  R30
00102b 9573      	INC  R23
00102c f413      	BRVC __ADDF129
00102d c020      	RJMP __MAXRES
                 __ADDF128:
00102e dfb7      	RCALL __SWAPACC
                 __ADDF129:
00102f df3e      	RCALL __REPACK
001030 915f      	POP  R21
001031 9508      	RET
                 __ADDF1211:
001032 f7d8      	BRCC __ADDF128
001033 cffb      	RJMP __ADDF129
                 __ADDF127:
001034 1bea      	SUB  R30,R26
001035 0bfb      	SBC  R31,R27
001036 0b68      	SBC  R22,R24
001037 f051      	BREQ __ZERORES
001038 f410      	BRCC __ADDF1210
001039 9400      	COM  R0
00103a dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00103b 2366      	TST  R22
00103c f392      	BRMI __ADDF129
00103d 0fee      	LSL  R30
00103e 1fff      	ROL  R31
00103f 1f66      	ROL  R22
001040 957a      	DEC  R23
001041 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001042 27ee      	CLR  R30
001043 27ff      	CLR  R31
001044 2766      	CLR  R22
001045 2777      	CLR  R23
001046 915f      	POP  R21
001047 9508      	RET
                 
                 __MINRES:
001048 efef      	SER  R30
001049 efff      	SER  R31
00104a e76f      	LDI  R22,0x7F
00104b ef7f      	SER  R23
00104c 915f      	POP  R21
00104d 9508      	RET
                 
                 __MAXRES:
00104e efef      	SER  R30
00104f efff      	SER  R31
001050 e76f      	LDI  R22,0x7F
001051 e77f      	LDI  R23,0x7F
001052 915f      	POP  R21
001053 9508      	RET
                 
                 __MULF12:
001054 935f      	PUSH R21
001055 df2a      	RCALL __UNPACK
001056 3870      	CPI  R23,0x80
001057 f351      	BREQ __ZERORES
001058 3890      	CPI  R25,0x80
001059 f341      	BREQ __ZERORES
00105a 2401      	EOR  R0,R1
00105b 9408      	SEC
00105c 1f79      	ADC  R23,R25
00105d f423      	BRVC __MULF124
00105e f31c      	BRLT __ZERORES
                 __MULF125:
00105f 2000      	TST  R0
001060 f33a      	BRMI __MINRES
001061 cfec      	RJMP __MAXRES
                 __MULF124:
001062 920f      	PUSH R0
001063 931f      	PUSH R17
001064 932f      	PUSH R18
001065 933f      	PUSH R19
001066 934f      	PUSH R20
001067 2711      	CLR  R17
001068 2722      	CLR  R18
001069 2799      	CLR  R25
00106a 9f68      	MUL  R22,R24
00106b 01a0      	MOVW R20,R0
00106c 9f8f      	MUL  R24,R31
00106d 2d30      	MOV  R19,R0
00106e 0d41      	ADD  R20,R1
00106f 1f59      	ADC  R21,R25
001070 9f6b      	MUL  R22,R27
001071 0d30      	ADD  R19,R0
001072 1d41      	ADC  R20,R1
001073 1f59      	ADC  R21,R25
001074 9f8e      	MUL  R24,R30
001075 d027      	RCALL __MULF126
001076 9fbf      	MUL  R27,R31
001077 d025      	RCALL __MULF126
001078 9f6a      	MUL  R22,R26
001079 d023      	RCALL __MULF126
00107a 9fbe      	MUL  R27,R30
00107b d01d      	RCALL __MULF127
00107c 9faf      	MUL  R26,R31
00107d d01b      	RCALL __MULF127
00107e 9fae      	MUL  R26,R30
00107f 0d11      	ADD  R17,R1
001080 1f29      	ADC  R18,R25
001081 1f39      	ADC  R19,R25
001082 1f49      	ADC  R20,R25
001083 1f59      	ADC  R21,R25
001084 2fe3      	MOV  R30,R19
001085 2ff4      	MOV  R31,R20
001086 2f65      	MOV  R22,R21
001087 2f52      	MOV  R21,R18
001088 914f      	POP  R20
001089 913f      	POP  R19
00108a 912f      	POP  R18
00108b 911f      	POP  R17
00108c 900f      	POP  R0
00108d 2366      	TST  R22
00108e f02a      	BRMI __MULF122
00108f 0f55      	LSL  R21
001090 1fee      	ROL  R30
001091 1fff      	ROL  R31
001092 1f66      	ROL  R22
001093 c002      	RJMP __MULF123
                 __MULF122:
001094 9573      	INC  R23
001095 f24b      	BRVS __MULF125
                 __MULF123:
001096 decd      	RCALL __ROUND_REPACK
001097 915f      	POP  R21
001098 9508      	RET
                 
                 __MULF127:
001099 0d10      	ADD  R17,R0
00109a 1d21      	ADC  R18,R1
00109b 1f39      	ADC  R19,R25
00109c c002      	RJMP __MULF128
                 __MULF126:
00109d 0d20      	ADD  R18,R0
00109e 1d31      	ADC  R19,R1
                 __MULF128:
00109f 1f49      	ADC  R20,R25
0010a0 1f59      	ADC  R21,R25
0010a1 9508      	RET
                 
                 __DIVF21:
0010a2 935f      	PUSH R21
0010a3 dedc      	RCALL __UNPACK
0010a4 3870      	CPI  R23,0x80
0010a5 f421      	BRNE __DIVF210
0010a6 2011      	TST  R1
                 __DIVF211:
0010a7 f40a      	BRPL __DIVF219
0010a8 cf9f      	RJMP __MINRES
                 __DIVF219:
0010a9 cfa4      	RJMP __MAXRES
                 __DIVF210:
0010aa 3890      	CPI  R25,0x80
0010ab f409      	BRNE __DIVF218
                 __DIVF217:
0010ac cf95      	RJMP __ZERORES
                 __DIVF218:
0010ad 2401      	EOR  R0,R1
0010ae 9408      	SEC
0010af 0b97      	SBC  R25,R23
0010b0 f41b      	BRVC __DIVF216
0010b1 f3d4      	BRLT __DIVF217
0010b2 2000      	TST  R0
0010b3 cff3      	RJMP __DIVF211
                 __DIVF216:
0010b4 2f79      	MOV  R23,R25
0010b5 931f      	PUSH R17
0010b6 932f      	PUSH R18
0010b7 933f      	PUSH R19
0010b8 934f      	PUSH R20
0010b9 2411      	CLR  R1
0010ba 2711      	CLR  R17
0010bb 2722      	CLR  R18
0010bc 2733      	CLR  R19
0010bd 2744      	CLR  R20
0010be 2755      	CLR  R21
0010bf e290      	LDI  R25,32
                 __DIVF212:
0010c0 17ae      	CP   R26,R30
0010c1 07bf      	CPC  R27,R31
0010c2 0786      	CPC  R24,R22
0010c3 0741      	CPC  R20,R17
0010c4 f030      	BRLO __DIVF213
0010c5 1bae      	SUB  R26,R30
0010c6 0bbf      	SBC  R27,R31
0010c7 0b86      	SBC  R24,R22
0010c8 0b41      	SBC  R20,R17
0010c9 9408      	SEC
0010ca c001      	RJMP __DIVF214
                 __DIVF213:
0010cb 9488      	CLC
                 __DIVF214:
0010cc 1f55      	ROL  R21
0010cd 1f22      	ROL  R18
0010ce 1f33      	ROL  R19
0010cf 1c11      	ROL  R1
0010d0 1faa      	ROL  R26
0010d1 1fbb      	ROL  R27
0010d2 1f88      	ROL  R24
0010d3 1f44      	ROL  R20
0010d4 959a      	DEC  R25
0010d5 f751      	BRNE __DIVF212
0010d6 01f9      	MOVW R30,R18
0010d7 2d61      	MOV  R22,R1
0010d8 914f      	POP  R20
0010d9 913f      	POP  R19
0010da 912f      	POP  R18
0010db 911f      	POP  R17
0010dc 2366      	TST  R22
0010dd f032      	BRMI __DIVF215
0010de 0f55      	LSL  R21
0010df 1fee      	ROL  R30
0010e0 1fff      	ROL  R31
0010e1 1f66      	ROL  R22
0010e2 957a      	DEC  R23
0010e3 f243      	BRVS __DIVF217
                 __DIVF215:
0010e4 de7f      	RCALL __ROUND_REPACK
0010e5 915f      	POP  R21
0010e6 9508      	RET
                 
                 __CMPF12:
0010e7 2399      	TST  R25
0010e8 f09a      	BRMI __CMPF120
0010e9 2377      	TST  R23
0010ea f042      	BRMI __CMPF121
0010eb 1797      	CP   R25,R23
0010ec f048      	BRLO __CMPF122
0010ed f429      	BRNE __CMPF121
0010ee 17ae      	CP   R26,R30
0010ef 07bf      	CPC  R27,R31
0010f0 0786      	CPC  R24,R22
0010f1 f020      	BRLO __CMPF122
0010f2 f031      	BREQ __CMPF123
                 __CMPF121:
0010f3 9498      	CLZ
0010f4 9488      	CLC
0010f5 9508      	RET
                 __CMPF122:
0010f6 9498      	CLZ
0010f7 9408      	SEC
0010f8 9508      	RET
                 __CMPF123:
0010f9 9418      	SEZ
0010fa 9488      	CLC
0010fb 9508      	RET
                 __CMPF120:
0010fc 2377      	TST  R23
0010fd f7c2      	BRPL __CMPF122
0010fe 1797      	CP   R25,R23
0010ff f398      	BRLO __CMPF121
001100 f7a9      	BRNE __CMPF122
001101 17ea      	CP   R30,R26
001102 07fb      	CPC  R31,R27
001103 0768      	CPC  R22,R24
001104 f388      	BRLO __CMPF122
001105 f399      	BREQ __CMPF123
001106 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
001107 2400      	CLR  R0
001108 0daf      	ADD  R26,R15
001109 1db0      	ADC  R27,R0
00110a 9508      	RET
                 
                 __ADDD12:
00110b 0fea      	ADD  R30,R26
00110c 1ffb      	ADC  R31,R27
00110d 1f68      	ADC  R22,R24
00110e 1f79      	ADC  R23,R25
00110f 9508      	RET
                 
                 __ANEGW1:
001110 95f1      	NEG  R31
001111 95e1      	NEG  R30
001112 40f0      	SBCI R31,0
001113 9508      	RET
                 
                 __ANEGD1:
001114 95f0      	COM  R31
001115 9560      	COM  R22
001116 9570      	COM  R23
001117 95e1      	NEG  R30
001118 4fff      	SBCI R31,-1
001119 4f6f      	SBCI R22,-1
00111a 4f7f      	SBCI R23,-1
00111b 9508      	RET
                 
                 __ASRW12:
00111c 23ee      	TST  R30
00111d 2e0e      	MOV  R0,R30
00111e 01fd      	MOVW R30,R26
00111f f021      	BREQ __ASRW12R
                 __ASRW12L:
001120 95f5      	ASR  R31
001121 95e7      	ROR  R30
001122 940a      	DEC  R0
001123 f7e1      	BRNE __ASRW12L
                 __ASRW12R:
001124 9508      	RET
                 
                 __LSRW2:
001125 95f6      	LSR  R31
001126 95e7      	ROR  R30
001127 95f6      	LSR  R31
001128 95e7      	ROR  R30
001129 9508      	RET
                 
                 __CWD1:
00112a 2f6f      	MOV  R22,R31
00112b 0f66      	ADD  R22,R22
00112c 0b66      	SBC  R22,R22
00112d 2f76      	MOV  R23,R22
00112e 9508      	RET
                 
                 __MULW12U:
00112f 9ffa      	MUL  R31,R26
001130 2df0      	MOV  R31,R0
001131 9feb      	MUL  R30,R27
001132 0df0      	ADD  R31,R0
001133 9fea      	MUL  R30,R26
001134 2de0      	MOV  R30,R0
001135 0df1      	ADD  R31,R1
001136 9508      	RET
                 
                 __MULW12:
001137 d063      	RCALL __CHKSIGNW
001138 dff6      	RCALL __MULW12U
001139 f40e      	BRTC __MULW121
00113a dfd5      	RCALL __ANEGW1
                 __MULW121:
00113b 9508      	RET
                 
                 __DIVW21U:
00113c 2400      	CLR  R0
00113d 2411      	CLR  R1
00113e e190      	LDI  R25,16
                 __DIVW21U1:
00113f 0faa      	LSL  R26
001140 1fbb      	ROL  R27
001141 1c00      	ROL  R0
001142 1c11      	ROL  R1
001143 1a0e      	SUB  R0,R30
001144 0a1f      	SBC  R1,R31
001145 f418      	BRCC __DIVW21U2
001146 0e0e      	ADD  R0,R30
001147 1e1f      	ADC  R1,R31
001148 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001149 60a1      	SBR  R26,1
                 __DIVW21U3:
00114a 959a      	DEC  R25
00114b f799      	BRNE __DIVW21U1
00114c 01fd      	MOVW R30,R26
00114d 01d0      	MOVW R26,R0
00114e 9508      	RET
                 
                 __DIVW21:
00114f d04b      	RCALL __CHKSIGNW
001150 dfeb      	RCALL __DIVW21U
001151 f40e      	BRTC __DIVW211
001152 dfbd      	RCALL __ANEGW1
                 __DIVW211:
001153 9508      	RET
                 
                 __DIVD21U:
001154 933f      	PUSH R19
001155 934f      	PUSH R20
001156 935f      	PUSH R21
001157 2400      	CLR  R0
001158 2411      	CLR  R1
001159 2744      	CLR  R20
00115a 2755      	CLR  R21
00115b e230      	LDI  R19,32
                 __DIVD21U1:
00115c 0faa      	LSL  R26
00115d 1fbb      	ROL  R27
00115e 1f88      	ROL  R24
00115f 1f99      	ROL  R25
001160 1c00      	ROL  R0
001161 1c11      	ROL  R1
001162 1f44      	ROL  R20
001163 1f55      	ROL  R21
001164 1a0e      	SUB  R0,R30
001165 0a1f      	SBC  R1,R31
001166 0b46      	SBC  R20,R22
001167 0b57      	SBC  R21,R23
001168 f428      	BRCC __DIVD21U2
001169 0e0e      	ADD  R0,R30
00116a 1e1f      	ADC  R1,R31
00116b 1f46      	ADC  R20,R22
00116c 1f57      	ADC  R21,R23
00116d c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00116e 60a1      	SBR  R26,1
                 __DIVD21U3:
00116f 953a      	DEC  R19
001170 f759      	BRNE __DIVD21U1
001171 01fd      	MOVW R30,R26
001172 01bc      	MOVW R22,R24
001173 01d0      	MOVW R26,R0
001174 01ca      	MOVW R24,R20
001175 915f      	POP  R21
001176 914f      	POP  R20
001177 913f      	POP  R19
001178 9508      	RET
                 
                 __MODW21:
001179 94e8      	CLT
00117a ffb7      	SBRS R27,7
00117b c004      	RJMP __MODW211
00117c 95a0      	COM  R26
00117d 95b0      	COM  R27
00117e 9611      	ADIW R26,1
00117f 9468      	SET
                 __MODW211:
001180 fdf7      	SBRC R31,7
001181 df8e      	RCALL __ANEGW1
001182 dfb9      	RCALL __DIVW21U
001183 01fd      	MOVW R30,R26
001184 f40e      	BRTC __MODW212
001185 df8a      	RCALL __ANEGW1
                 __MODW212:
001186 9508      	RET
                 
                 __MODD21:
001187 94e8      	CLT
001188 ff97      	SBRS R25,7
001189 c009      	RJMP __MODD211
00118a 95a0      	COM  R26
00118b 95b0      	COM  R27
00118c 9580      	COM  R24
00118d 9590      	COM  R25
00118e 5faf      	SUBI R26,-1
00118f 4fbf      	SBCI R27,-1
001190 4f8f      	SBCI R24,-1
001191 4f9f      	SBCI R25,-1
001192 9468      	SET
                 __MODD211:
001193 fd77      	SBRC R23,7
001194 df7f      	RCALL __ANEGD1
001195 dfbe      	RCALL __DIVD21U
001196 01fd      	MOVW R30,R26
001197 01bc      	MOVW R22,R24
001198 f40e      	BRTC __MODD212
001199 df7a      	RCALL __ANEGD1
                 __MODD212:
00119a 9508      	RET
                 
                 __CHKSIGNW:
00119b 94e8      	CLT
00119c fff7      	SBRS R31,7
00119d c002      	RJMP __CHKSW1
00119e df71      	RCALL __ANEGW1
00119f 9468      	SET
                 __CHKSW1:
0011a0 ffb7      	SBRS R27,7
0011a1 c006      	RJMP __CHKSW2
0011a2 95a0      	COM  R26
0011a3 95b0      	COM  R27
0011a4 9611      	ADIW R26,1
0011a5 f800      	BLD  R0,0
0011a6 9403      	INC  R0
0011a7 fa00      	BST  R0,0
                 __CHKSW2:
0011a8 9508      	RET
                 
                 __GETW1P:
0011a9 91ed      	LD   R30,X+
0011aa 91fc      	LD   R31,X
0011ab 9711      	SBIW R26,1
0011ac 9508      	RET
                 
                 __PUTDP1:
0011ad 93ed      	ST   X+,R30
0011ae 93fd      	ST   X+,R31
0011af 936d      	ST   X+,R22
0011b0 937c      	ST   X,R23
0011b1 9508      	RET
                 
                 __GETW1PF:
0011b2 9005      	LPM  R0,Z+
0011b3 91f4      	LPM  R31,Z
0011b4 2de0      	MOV  R30,R0
0011b5 9508      	RET
                 
                 __GETD1S0:
0011b6 81e8      	LD   R30,Y
0011b7 81f9      	LDD  R31,Y+1
0011b8 816a      	LDD  R22,Y+2
0011b9 817b      	LDD  R23,Y+3
0011ba 9508      	RET
                 
                 __PUTD1S0:
0011bb 83e8      	ST   Y,R30
0011bc 83f9      	STD  Y+1,R31
0011bd 836a      	STD  Y+2,R22
0011be 837b      	STD  Y+3,R23
0011bf 9508      	RET
                 
                 __PUTPARD1:
0011c0 937a      	ST   -Y,R23
0011c1 936a      	ST   -Y,R22
0011c2 93fa      	ST   -Y,R31
0011c3 93ea      	ST   -Y,R30
0011c4 9508      	RET
                 
                 __SWAPD12:
0011c5 2e18      	MOV  R1,R24
0011c6 2f86      	MOV  R24,R22
0011c7 2d61      	MOV  R22,R1
0011c8 2e19      	MOV  R1,R25
0011c9 2f97      	MOV  R25,R23
0011ca 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0011cb 2e1b      	MOV  R1,R27
0011cc 2fbf      	MOV  R27,R31
0011cd 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0011ce 2e1a      	MOV  R1,R26
0011cf 2fae      	MOV  R26,R30
0011d0 2de1      	MOV  R30,R1
0011d1 9508      	RET
                 
                 __EEPROMWRW:
0011d2 d007      	RCALL __EEPROMWRB
0011d3 9611      	ADIW R26,1
0011d4 93ef      	PUSH R30
0011d5 2fef      	MOV  R30,R31
0011d6 d003      	RCALL __EEPROMWRB
0011d7 91ef      	POP  R30
0011d8 9711      	SBIW R26,1
0011d9 9508      	RET
                 
                 __EEPROMWRB:
0011da 9be1      	SBIS EECR,EEWE
0011db c002      	RJMP __EEPROMWRB1
0011dc 95a8      	WDR
0011dd cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0011de b79f      	IN   R25,SREG
0011df 94f8      	CLI
0011e0 bbae      	OUT  EEARL,R26
0011e1 bbbf      	OUT  EEARH,R27
0011e2 9ae0      	SBI  EECR,EERE
0011e3 b38d      	IN   R24,EEDR
0011e4 17e8      	CP   R30,R24
0011e5 f019      	BREQ __EEPROMWRB0
0011e6 bbed      	OUT  EEDR,R30
0011e7 9ae2      	SBI  EECR,EEMWE
0011e8 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0011e9 bf9f      	OUT  SREG,R25
0011ea 9508      	RET
                 
                 __CPD10:
0011eb 9730      	SBIW R30,0
0011ec 4060      	SBCI R22,0
0011ed 4070      	SBCI R23,0
0011ee 9508      	RET
                 
                 __CPD02:
0011ef 2400      	CLR  R0
0011f0 160a      	CP   R0,R26
0011f1 060b      	CPC  R0,R27
0011f2 0608      	CPC  R0,R24
0011f3 0609      	CPC  R0,R25
0011f4 9508      	RET
                 
                 __CPD12:
0011f5 17ea      	CP   R30,R26
0011f6 07fb      	CPC  R31,R27
0011f7 0768      	CPC  R22,R24
0011f8 0779      	CPC  R23,R25
0011f9 9508      	RET
                 
                 __SAVELOCR6:
0011fa 935a      	ST   -Y,R21
                 __SAVELOCR5:
0011fb 934a      	ST   -Y,R20
                 __SAVELOCR4:
0011fc 933a      	ST   -Y,R19
                 __SAVELOCR3:
0011fd 932a      	ST   -Y,R18
                 __SAVELOCR2:
0011fe 931a      	ST   -Y,R17
0011ff 930a      	ST   -Y,R16
001200 9508      	RET
                 
                 __LOADLOCR6:
001201 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001202 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001203 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001204 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001205 8119      	LDD  R17,Y+1
001206 8108      	LD   R16,Y
001207 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  58 r1 :  39 r2 :   0 r3 :   0 r4 :   0 r5 :   2 r6 :   0 r7 :   2 
r8 :   0 r9 :   2 r10:   0 r11:   2 r12:   0 r13:   2 r14:   0 r15:   4 
r16:  83 r17:  58 r18:  44 r19:  30 r20:  38 r21:  86 r22: 120 r23: 118 
r24:  98 r25:  76 r26: 242 r27: 119 r28:  38 r29:   1 r30: 856 r31: 354 
x  :  32 y  : 454 z  :  16 
Registers used: 27 out of 35 (77.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  28 add   :  22 
adiw  :  47 and   :   5 andi  :  14 asr   :   3 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   1 break :   0 breq  :  48 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  18 
brlt  :  10 brmi  :  11 brne  :  85 brpl  :   9 brsh  :   5 brtc  :   6 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   5 call  : 504 
cbi   :  25 cbr   :   1 clc   :   4 clh   :   0 cli   :   2 cln   :   0 
clr   :  48 cls   :   0 clt   :   6 clv   :   0 clz   :   2 com   :  16 
cp    :  15 cpc   :  58 cpi   :  84 cpse  :   0 dec   :  19 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   7 inc   :   3 jmp   :  69 ld    :  63 ldd   : 150 
ldi   : 577 lds   :  51 lpm   :  16 lsl   :  20 lsr   :   7 mov   :  64 
movw  :  73 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   1 
or    :   1 ori   :   8 out   :  56 pop   :  41 push  :  41 rcall : 103 
ret   : 134 reti  :   6 rjmp  : 224 rol   :  37 ror   :  22 sbc   :  14 
sbci  :  22 sbi   :  30 sbic  :  22 sbis  :  26 sbiw  :  44 sbr   :   4 
sbrc  :   5 sbrs  :  16 sec   :   6 seh   :   0 sei   :   1 sen   :   0 
ser   :   8 ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 217 std   :  59 sts   :  82 sub   :   8 subi  :  33 
swap  :   2 tst   :  24 wdr   :   2 
Instructions used: 85 out of 117 (72.6%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x002410   8520    712   9232  131072   7.0%
[.dseg] 0x000100 0x0005b6      0    182    182    4351   4.2%
[.eseg] 0x000000 0x000002      0      2      2    4096   0.0%

Assembly complete, 0 errors, 17 warnings
