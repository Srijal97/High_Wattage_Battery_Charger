;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <Math.h>
;#include "commands.c"
;/*
; * commands.c
; *
; *  Created on: Jan 10, 2020
; *      Author: Mr.Yash
; */
;
;//#include <Serial.h>
;#include <commands.h>
;//#include <alcd.h>
;#include <ver1.h>
;
;flash char *msg;
;flash char *xmitMsg;
;flash char *rec;
;flash char *rdata;
;
;//char sdataA[20];    // Send data for SCI-A
;char rdataA[20]; // Received data for SCI-A
;int comStart;
;int i = 0;
;
;    //commands will be given a 3 digit numeric code based on the button pressed;
;    //Stored values for the particular option-
;
;    //    000-  noOp
;    //    001-  mainOn
;    //    002-  mainOff
;    //    003-  resetFault
;    //    004-  faultDetect
;    //    005-
;    //    006-
;    //    007-
;    //    008-
;    //    009-
;    //    010-
;    //    011-  readVolt
;    //    012-  readAmp
;    //    013-
;    //    014-
;    //    015-
;    //    016-
;    //    017-
;    //    018-
;    //    019-
;    //    020-
;    //    021-
;    //    022-
;    //    023-
;    //    024-
;    //    025-
;    //    026-
;    //    027-
;    //    028-
;    //    029-
;    //    030-
;    //    031-
;    //    032-
;    //    033-
;    //    034-
;    //    035-
;    //    036-
;    //    037-
;    //    038-
;    //    039-
;
;void xmitString(flash char * xmitMsg)
; 0000 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    int i =0;
;    for(i = 0;*(xmitMsg+i)!= '\0';i++)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	*xmitMsg -> Y+2
;	i -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;    {
;         putchar(xmitMsg[i]);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;    }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;}
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;void noOp()
;{
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;}
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;void mainOn()
;{
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;    //lcd_clear();
;    //lcd_putsf("Entering Soft-Start");
;    xmitMsg ="<001>";
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;    xmitString(xmitMsg);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;    //delay_ms(500);
;
;   // lcd_clear();
;
;
;}
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;
;void mainOff()
;{
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;   // lcd_clear();
;    //lcd_putsf("Entering Soft-Stop");
;    xmitMsg = "<002>";
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;    xmitString(xmitMsg);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;    //delay_ms(500);
;   // lcd_clear();
;}
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;void resetFault()
;{
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;    //lcd_putsf("Resetting Faults");
;    xmitMsg = "<003>";
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;    xmitString(xmitMsg);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;
;}
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;void readVolt()
;{
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;    xmitMsg = "<004>";
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;    xmitString(xmitMsg);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;    //voltVal = recVolt();
;    //msg = sprintf("\nVoltage is: %d",voltVal);
;    //lcd_putsf(msg);
;
;}
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;void readAmp()
;{
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;    xmitMsg = "<005>";
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;    xmitString(xmitMsg);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;    //ampVal = recAmp();
;    //msg = sprintf("\nCurrent is: %d",ampVal);
;    //lcd_putsf(msg);
;}
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;
;//On receiving response from the TMS, further actions are taken by recFunc array
;void rxnoOp()
;{
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;
;}
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;
;void rxmainOn()
;{
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;    PORTC.3 = 0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;    //flash char*msg ="The System has turned on";
;     //PORTF &= ~0x40;
;    //putchar('r');
;    //xmitMsg = "on button pressed acknowledged by the dsp";
;    //xmitString(xmitMsg);
;   // lcd_putsf(msg);                            //function to display message on the lcd
;
;}
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;
;void rxmainOff()
;{
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;
;    PORTC.3 = 1;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;//    putchar('s');
;//    xmitMsg = "off button pressed acknowledged by the dsp";
;//    xmitString(xmitMsg);
;//    msg = "The System has turned off";
;    //lcd_putsf(msg);
;
;}
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;
;void rxresetFault()
;{
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;    //msg = "Faults have been reset";
;   // lcd_putsf(msg);
;
;}
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;
;void rxfaultDetect(char *data)
;{
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;    int i = 0,j,k=0;
;    int fault = 0, cpyFault;
;    int fltBit[8], tmpBit[8];
;    fault = data[2]-'0'+((data[1]-'0')*10)+((data[0]-'0')*100);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;	*data -> Y+42
;	i -> R16,R17
;	j -> R18,R19
;	k -> R20,R21
;	fault -> Y+40
;	cpyFault -> Y+38
;	fltBit -> Y+22
;	tmpBit -> Y+6
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;    cpyFault = fault;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;
;
;    // counter for binary array
;    while (cpyFault > 0) {
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;        tmpBit[i] = cpyFault % 2;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;        cpyFault = cpyFault / 2;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;        i++;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;    }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;
;    for (j = i - 1; j >= 0; j--,k++){
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;        fltBit[k] = tmpBit[j];
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;    }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;    for (j=k;j<8;j++)
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;    {
;        fltBit[j] = 0;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;    }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;
;    if(fltBit[0] == 1)PORTF != ~0x40;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;    if(fltBit[1] == 1);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;    if(fltBit[2] == 1)PORTF != ~0x80;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;    if(fltBit[3] == 1)  ;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;    if(fltBit[4] == 1)   ;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;    if(fltBit[5] == 1)    ;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;    if(fltBit[6] == 1)     ;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;    if(fltBit[7] == 1)      ;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;
;
;
;
;
;
;
;
;    if(fault!=0)
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;    {
;        PORTD.3=0;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;    }
;
;
;}
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;
;void rxreadVolt()
;{
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;    int i = 0;
;    for(i = 0;i<4;i++)
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;	i -> R16,R17
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;    {
;
;    }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;
;    msg = rdata;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;    //lcd_putsf(msg);
;
;}
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;
;void rxreadAmp()
;{
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;    int i;flash char *tempRdata;
;    for(i=5;*(rec+i-1)!='\0';i++)
;PCODE: $0000012E VOL: 0
;	i -> R16,R17
;	*tempRdata -> R18,R19
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;    {
;        tempRdata= (rec+i);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;        if(i==5)  rdata = tempRdata;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;        tempRdata++;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;    }
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;    msg = rdata;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;    //lcd_putsf(msg);
;
;}
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;
;
;void recOp() {
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;
;
;    char data = getchar();
;
;    PORTF |= 0x80;
;PCODE: $00000153 VOL: 0
;	data -> R17
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;
;    if(data == '<') {
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;        comStart = 1;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;        i = 0;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;
;    }
;    else if(data == '>') {
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;            *(rdataA+i) = data;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;            comStart = 0;
;PCODE: $00000168 VOL: 0
;            i = 0;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;            comDecode(rdataA);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;    }
;    if (comStart == 1) {
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;            *(rdataA+i) = data;  // Read data
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;            i++;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;            if(i==9){i=0;}
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;    }
;PCODE: $0000017F VOL: 0
;}
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;
;
;void comDecode(char * rec)
;{
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;
;    char cmd[3] = {'0','0','0'};
;    char data[4] = {'0','0','0','0'};
;    int icmd = 0;
;    int idata = 0;
;    int i;
;
;    for(i = 1; i < 4; i++)
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;	*rec -> Y+13
;	cmd -> Y+10
;	data -> Y+6
;	icmd -> R16,R17
;	idata -> R18,R19
;	i -> R20,R21
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;    {
;       cmd[i-1] = rec[i];
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;    }
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;
;    for(i = 5; i < 9; i++)
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;    {
;       data[i-5] = rec[i];
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;    }
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;
;
;    icmd = (cmd[2]-'0') + ((cmd[1] - '0')*10) + ((cmd[0]-'0')*100);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;    idata = (data[3]-'0') + ((data[2] - '0')*10) + ((data[1]-'0')*100) + ((data[0]-'0')*1000);
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;
;    if (icmd == 1) {  // <001>
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;        rxmainOn();
;PCODE: $000001FA VOL: 0
;    }
;    else if (icmd == 2) {
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;        rxmainOff();
;PCODE: $00000200 VOL: 0
;    }
;    else if (icmd == 4 ) {
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;        if (idata != 0) {
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;           PORTD.3 = 0;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;           PORTC.3 = 1;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;        }
;        else {
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;           PORTD.3 = 1;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;        }
;PCODE: $00000210 VOL: 0
;
;
;    }
;
;
;}
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;// Standard Input/Output functions
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 64
;    char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;    unsigned char rx_wr_index0 = 0, rx_rd_index0 = 0;
;#else
;    unsigned int rx_wr_index0=0, rx_rd_index0 = 0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;    unsigned char rx_counter0 = 0;
;#else
;    unsigned int rx_counter0 = 0;
;#endif
;
;
;int on_pressed = 0;
;int off_pressed = 0;
;int data_received = 0;
;int reset_pressed = 0;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0048 {
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0049     char status, data;
; 0000 004A     status = UCSR0A;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 004B     data = UDR0;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 004C 
; 0000 004D     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))== 0) {
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 004E        rx_buffer0[rx_wr_index0++] = data;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 004F     #if RX_BUFFER_SIZE0 == 256
; 0000 0050        // special case for receiver buffer size=256
; 0000 0051        if (++rx_counter0 == 0)
; 0000 0052             rx_buffer_overflow0 = 1;
; 0000 0053     #else
; 0000 0054        if (rx_wr_index0 == RX_BUFFER_SIZE0)
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 0055             rx_wr_index0=0;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0056 
; 0000 0057        if (++rx_counter0 == RX_BUFFER_SIZE0){
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0058             rx_counter0=0;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0059             rx_buffer_overflow0=1;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 005A        }
; 0000 005B     #endif
; 0000 005C 
; 0000 005D     }
;PCODE: $0000023A VOL: 0
; 0000 005E 
; 0000 005F     data_received = 1;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0060 }
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;
;
;
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 006A {
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 006B     char data;
; 0000 006C 
; 0000 006D     while (rx_counter0 == 0);
;PCODE: $00000244 VOL: 0
;	data -> R17
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 006E 
; 0000 006F     data = rx_buffer0[rx_rd_index0++];
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0070 
; 0000 0071     #if RX_BUFFER_SIZE0 != 256
; 0000 0072         if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0073     #endif
; 0000 0074     #asm("cli")
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
	cli
;PCODE: $00000259 VOL: 0
; 0000 0075         --rx_counter0;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 0076     #asm("sei")
;PCODE: $0000025D VOL: 0
	sei
;PCODE: $0000025E VOL: 0
; 0000 0077 
; 0000 0078     return data;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0079 }
;PCODE: $00000262 VOL: 0
;#pragma used-
;#endif
;
;
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 64
;    char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;    unsigned char tx_wr_index0 = 0, tx_rd_index0=0;
;#else
;    unsigned int tx_wr_index0 = 0, tx_rd_index0=0;
;#endif
;
;#if TX_BUFFER_SIZE0 < 256
;    unsigned char tx_counter0 = 0;
;#else
;    unsigned int tx_counter0 = 0;
;#endif
;
;
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 0093 {
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0094     if (tx_counter0) {
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0095        --tx_counter0;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 0096        UDR0 = tx_buffer0[tx_rd_index0++];
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 0097 
; 0000 0098     #if TX_BUFFER_SIZE0 != 256
; 0000 0099        if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 009A     #endif
; 0000 009B 
; 0000 009C     }
;PCODE: $00000278 VOL: 0
; 0000 009D }
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;
;
;
;
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00A8 {
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 00A9     while (tx_counter0 == TX_BUFFER_SIZE0);
;	c -> Y+0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 00AA     #asm("cli")
;PCODE: $00000285 VOL: 0
	cli
;PCODE: $00000286 VOL: 0
; 0000 00AB     if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 00AC        {
; 0000 00AD        tx_buffer0[tx_wr_index0++]=c;
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 00AE     #if TX_BUFFER_SIZE0 != 256
; 0000 00AF        if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 00B0     #endif
; 0000 00B1        ++tx_counter0;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 00B2        }
; 0000 00B3     else
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 00B4        UDR0=c;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 00B5     #asm("sei")
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
	sei
;PCODE: $000002A6 VOL: 0
; 0000 00B6 }
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;#pragma used-
;#endif
;
;
;
;short int on_button_state = 0x0000;
;short int off_button_state = 0x0000;
;short int reset_button_state = 0x0000;
;
;// Timer3 overflow interrupt service routine
;interrupt[TIM3_OVF] void timer3_ovf_isr(void) {
; 0000 00C1 interrupt[30] void timer3_ovf_isr(void) {
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 00C2 
; 0000 00C3     // ISR called every 8.595 msec when TCCRB = 0x09, and OCR3A = 0xFFFF
; 0000 00C4 
; 0000 00C5     // switch debounce logic. refer: https://www.embedded.com/electronics-blogs/break-points/4024981/My-favorite-software-debouncers
; 0000 00C6     // 16 bit shifts = approx 130msec debounce delay
; 0000 00C7     on_button_state = (0x8000 | !PINE.4) | (on_button_state << 1);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 00C8     if(on_button_state == 0xC000) {
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 00C9        //PORTC.3 = 0;
; 0000 00CA        //PORTF &= ~0x40;
; 0000 00CB        on_pressed = 1;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 00CC 
; 0000 00CD     }
; 0000 00CE 
; 0000 00CF     off_button_state = (0x8000 | !PINE.5) | (off_button_state << 1);
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 00D0     if(off_button_state == 0xC000 ) {
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 00D1       //PORTC.3 = 1;
; 0000 00D2        off_pressed = 1;
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 00D3 
; 0000 00D4     }
; 0000 00D5 
; 0000 00D6     reset_button_state = (0x8000 | !PINE.6) | (reset_button_state << 1);
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 00D7     if(reset_button_state == 0xC000) {
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 00D8 
; 0000 00D9 
; 0000 00DA        PORTD.3 = 1;
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 00DB        reset_pressed = 1;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 00DC 
; 0000 00DD     }
; 0000 00DE 
; 0000 00DF 
; 0000 00E0 }
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;
;
;void main(void)
; 0000 00E4 {
;PCODE: $000002DE VOL: 0
; 0000 00E5 
; 0000 00E6 
; 0000 00E7     PORTA=0x00;
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 00E8     DDRA=0x00;
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 00E9 
; 0000 00EA 
; 0000 00EB     PORTB=0x00;
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 00EC     DDRB=0x07;
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 00ED 
; 0000 00EE 
; 0000 00EF     PORTC=0x08;
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 00F0     DDRC=0x08;
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 00F1 
; 0000 00F2 
; 0000 00F3     PORTD=0xC8;
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 00F4     DDRD=0x08;
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 00F5 
; 0000 00F6 
; 0000 00F7 
; 0000 00F8     PORTE=0xFF;
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 00F9     DDRE=0x00;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 00FA 
; 0000 00FB 
; 0000 00FC 
; 0000 00FD     PORTF=0xFF;
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 00FE     DDRF=0xFF;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 00FF 
; 0000 0100 
; 0000 0101     PORTG=0x00;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 0102     DDRG=0x00;
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 0103 
; 0000 0104     TCCR3A=0x00;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 0105     TCCR3B=0x09;
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 0106     TCNT3H=0x00;
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 0107     TCNT3L=0x00;
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0108     ICR3H=0x00;
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 0109     ICR3L=0x00;
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 010A     OCR3AH=0xFF;
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 010B     OCR3AL=0xFF;
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 010C     OCR3BH=0x00;
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 010D     OCR3BL=0x00;
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 010E     OCR3CH=0x00;
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 010F     OCR3CL=0x00;
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 0110 
; 0000 0111     //// External Interrupt(s) initialization
; 0000 0112     //EICRA=0x00;
; 0000 0113     //EICRB=0xAA;
; 0000 0114     //EIMSK=0xF0;
; 0000 0115     //EIFR=0xF0;
; 0000 0116 
; 0000 0117     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0118     TIMSK=0x00;
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 0119     ETIMSK=0x04;
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 011A 
; 0000 011B     // USART0 initialization
; 0000 011C //
; 0000 011D //    UCSR0A=0x00;
; 0000 011E //    UCSR0B=0x18;
; 0000 011F //    UCSR0C=0x06;
; 0000 0120 //    UBRR0H=0x00;
; 0000 0121 //    UBRR0L=0x67;
; 0000 0122 
; 0000 0123     // USART0 initialization
; 0000 0124     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0125     // USART0 Receiver: On
; 0000 0126     // USART0 Transmitter: On
; 0000 0127     // USART0 Mode: Asynchronous
; 0000 0128     // USART0 Baud Rate: 9600
; 0000 0129     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 012A     UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 012B     UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 012C     UBRR0H=0x00;
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 012D     UBRR0L=0x33;
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 012E 
; 0000 012F     PORTF &= ~0x80;
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 0130     // Global enable interrupts
; 0000 0131     #asm("sei")
;PCODE: $00000324 VOL: 0
	sei
;PCODE: $00000325 VOL: 0
; 0000 0132 
; 0000 0133     while(1)
;PCODE: $00000326 VOL: 0
; 0000 0134     {
; 0000 0135            if(on_pressed == 1)
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 0136             {
; 0000 0137 
; 0000 0138                 mainOn();
;PCODE: $0000032A VOL: 0
; 0000 0139                 on_pressed = 0;
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 013A             }
; 0000 013B             else if(off_pressed == 1)
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 013C             {
; 0000 013D                 mainOff();
;PCODE: $00000332 VOL: 0
; 0000 013E                 off_pressed = 0;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 013F 
; 0000 0140             }
; 0000 0141             if(data_received == 1)
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 0142             {
; 0000 0143                 recOp();
;PCODE: $0000033A VOL: 0
; 0000 0144                 data_received = 0;
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 0145             }
; 0000 0146             if(reset_pressed == 1)
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 0147             {
; 0000 0148                 resetFault();
;PCODE: $00000341 VOL: 0
; 0000 0149                 reset_pressed = 0;
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 014A             }
; 0000 014B         //Screen_sel();
; 0000 014C 
; 0000 014D     }
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 014E 
; 0000 014F }
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
